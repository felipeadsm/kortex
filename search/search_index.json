{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"KINOVA\u00ae KORTEX\u2122 API Reference"},{"location":"#description","title":"DescriptionTable of Contents","text":"<p>The official repository contains documentation and examples explaining how to use the KINOVA\u00ae KORTEX\u2122 API client with C++ or Python. The repository has been tested on Windows 10, Ubuntu 16.04, Ubuntu 18.04 and Ubuntu 20.04.</p> <ul> <li>Description</li> <li>Licensing</li> <li>Role of Google Protocol Buffer in Kortex API</li> <li>Quick Start for C++ users</li> <li>Quick Start for Python users</li> <li>Quick Start for modbus users</li> <li>Download links</li> <li>Build and Run instructions</li> </ul> <p></p>"},{"location":"#licensing","title":"Licensing","text":"<p>This repository is licenced under the BSD 3-Clause \"Revised\" License </p> <p></p>"},{"location":"#role-of-google-protocol-buffer-in-kortex-api","title":"Role of Google Protocol Buffer in Kortex API","text":"<p>The Kortex API uses Google Protocol Buffer message objects to exchange data between client and server.  </p> <p>Google Protocol Buffer offers structured data objects with standard methods for each member field:</p> <ul> <li>structured, nested objects </li> <li>basic types and collections </li> <li>getter/setter methods on basic types </li> <li>iterators, dimension and appending methods on collections </li> <li>many helpers (e.g. serialize/deserialize, I/O functions)</li> </ul> <p>When using the Kortex API a developer will need to understand the Google Protocol Buffer feature set to maximize their efficiency.</p> <p></p>"},{"location":"#quick-start-for-python-users","title":"Quick Start for Python users","text":"<p>To run the Python examples you will need to install the Python interpreter and the pip installation module.</p> <p>Note that for C++ developers it could be useful to install the Python Kortex API to allow for quick tests and validations.</p> <p>Here is some general information about the Python interpreter and the pip module manager.</p> <ul> <li>Python General Information</li> <li>API mechanism</li> <li>Transport / Router / Session / Notification</li> <li>Device routing</li> <li>Servoing modes</li> <li>Error management</li> <li>Examples</li> </ul> <p></p>"},{"location":"#download-links","title":"Download links","text":"<p>The latest download links for each arm type are reported in the table below:</p> Arm type Firmware Release notes API Gen3 2.4.0 2.5.0 2.5.0 Gen3 lite 2.3.2 2.3.2 2.3.0 <p>When following the link to Artifactory, to download the correct C++ API, you have to select the package for your architecture on the left-hand side tree view and then click Download on the right-hand side:</p> <p></p> Previous releases <p> <ul> <li> Release 2.2.0 for Gen3: Firmware, Release Notes, Kortex API </li> <li> Release 2.1.1 for Gen3 lite: Firmware, Release Notes, Kortex API </li> <li> Release 2.0.1 for Gen3: Firmware, Release Notes, Kortex API </li> <li> Release 2.0.0 for Gen3: Firmware, Release Notes, Kortex API </li> </ul> </p> <p></p>"},{"location":"#build-and-run-instructions","title":"Build and Run instructions","text":"<p>Python API</p> <p></p>"},{"location":"#useful-links","title":"Useful Links","text":"Kinova home page: https://www.kinovarobotics.com Google Protocol Buffers home page: https://developers.google.com/protocol-buffers"},{"location":"kortex_api_references/","title":"Kortex Api Reference","text":"<ul> <li>ActuatorConfig (Python)<ul> <li>class AxisOffsets</li> <li>class AxisPosition</li> <li>class CoggingFeedforwardModeInformation</li> <li>class CommandModeInformation</li> <li>class ControlLoop</li> <li>class ControlLoopParameters</li> <li>class ControlModeInformation</li> <li>class CustomDataSelection</li> <li>class EncoderDerivativeParameters</li> <li>class FrequencyResponse</li> <li>class LoopSelection</li> <li>class PositionCommand</li> <li>class RampResponse</li> <li>class Servoing</li> <li>class StepResponse</li> <li>class TorqueCalibration</li> <li>class TorqueOffset</li> <li>class VectorDriveParameters</li> <li>Enum CoggingFeedforwardMode</li> <li>Enum CommandMode</li> <li>Enum ControlLoopSelection</li> <li>Enum ControlMode</li> <li>Enum CustomDataIndex</li> <li>Enum SafetyIdentifierBankA</li> <li>Enum SafetyLimitType</li> <li>Enum ServiceVersion</li> </ul> </li> <li>ActuatorCyclic (Python)<ul> <li>class Command</li> <li>class CustomData</li> <li>class Feedback</li> <li>class MessageId</li> <li>Enum CommandFlags</li> <li>Enum ServiceVersion</li> <li>Enum StatusFlags</li> </ul> </li> <li>Api (Python)<ul> <li>Enum ErrorCodes</li> <li>Enum SubErrorCodes</li> </ul> </li> <li>Base (Python)<ul> <li>class Action</li> <li>class ActionExecutionState</li> <li>class ActionHandle</li> <li>class ActionList</li> <li>class ActionNotification</li> <li>class ActionNotificationList</li> <li>class ActivateMapHandle</li> <li>class ActuatorInformation</li> <li>class Admittance</li> <li>class AdvancedSequenceHandle</li> <li>class AngularWaypoint</li> <li>class AppendActionInformation</li> <li>class ArmStateInformation</li> <li>class ArmStateNotification</li> <li>class BluetoothEnableState</li> <li>class BridgeConfig</li> <li>class BridgeIdentifier</li> <li>class BridgeList</li> <li>class BridgePortConfig</li> <li>class BridgeResult</li> <li>class CapSenseConfig</li> <li>class CartesianLimitation</li> <li>class CartesianLimitationList</li> <li>class CartesianSpeed</li> <li>class CartesianTrajectoryConstraint</li> <li>class CartesianWaypoint</li> <li>class ChangeJointSpeeds</li> <li>class ChangeTwist</li> <li>class ChangeWrench</li> <li>class CommunicationInterfaceConfiguration</li> <li>class ConfigurationChangeNotification</li> <li>class ConfigurationChangeNotificationList</li> <li>class ConstrainedJointAngle</li> <li>class ConstrainedJointAngles</li> <li>class ConstrainedOrientation</li> <li>class ConstrainedPose</li> <li>class ConstrainedPosition</li> <li>class ControlModeInformation</li> <li>class ControlModeNotification</li> <li>class ControlModeNotificationList</li> <li>class ControllerConfiguration</li> <li>class ControllerConfigurationList</li> <li>class ControllerConfigurationMode</li> <li>class ControllerElementHandle</li> <li>class ControllerElementState</li> <li>class ControllerEvent</li> <li>class ControllerHandle</li> <li>class ControllerList</li> <li>class ControllerNotification</li> <li>class ControllerNotificationList</li> <li>class ControllerState</li> <li>class Delay</li> <li>class EmergencyStop</li> <li>class FactoryNotification</li> <li>class Faults</li> <li>class Finger</li> <li>class FirmwareBundleVersions</li> <li>class FirmwareComponentVersion</li> <li>class FullIPv4Configuration</li> <li>class FullUserProfile</li> <li>class GpioCommand</li> <li>class GpioConfiguration</li> <li>class GpioConfigurationList</li> <li>class GpioEvent</li> <li>class GpioPinConfiguration</li> <li>class Gripper</li> <li>class GripperCommand</li> <li>class GripperRequest</li> <li>class IKData</li> <li>class IPv4Configuration</li> <li>class IPv4Information</li> <li>class JointAngle</li> <li>class JointAngles</li> <li>class JointLimitation</li> <li>class JointSpeed</li> <li>class JointSpeeds</li> <li>class JointTorque</li> <li>class JointTorques</li> <li>class JointTrajectoryConstraint</li> <li>class JointsLimitationsList</li> <li>class KinematicTrajectoryConstraints</li> <li>class Map</li> <li>class MapElement</li> <li>class MapEvent</li> <li>class MapGroup</li> <li>class MapGroupHandle</li> <li>class MapGroupList</li> <li>class MapHandle</li> <li>class MapList</li> <li>class Mapping</li> <li>class MappingHandle</li> <li>class MappingInfoNotification</li> <li>class MappingInfoNotificationList</li> <li>class MappingList</li> <li>class NetworkHandle</li> <li>class NetworkNotification</li> <li>class NetworkNotificationList</li> <li>class OperatingModeInformation</li> <li>class OperatingModeNotification</li> <li>class OperatingModeNotificationList</li> <li>class Orientation</li> <li>class PasswordChange</li> <li>class Point</li> <li>class Pose</li> <li>class Position</li> <li>class PreComputedJointTrajectory</li> <li>class PreComputedJointTrajectoryElement</li> <li>class ProtectionZone</li> <li>class ProtectionZoneHandle</li> <li>class ProtectionZoneInformation</li> <li>class ProtectionZoneList</li> <li>class ProtectionZoneNotification</li> <li>class ProtectionZoneNotificationList</li> <li>class Query</li> <li>class RFConfiguration</li> <li>class RequestedActionType</li> <li>class RobotEventNotification</li> <li>class RobotEventNotificationList</li> <li>class RotationMatrix</li> <li>class RotationMatrixRow</li> <li>class SafetyEvent</li> <li>class SafetyNotificationList</li> <li>class Sequence</li> <li>class SequenceHandle</li> <li>class SequenceInfoNotification</li> <li>class SequenceInfoNotificationList</li> <li>class SequenceInformation</li> <li>class SequenceList</li> <li>class SequenceTask</li> <li>class SequenceTaskConfiguration</li> <li>class SequenceTaskHandle</li> <li>class SequenceTasks</li> <li>class SequenceTasksConfiguration</li> <li>class SequenceTasksPair</li> <li>class SequenceTasksRange</li> <li>class ServoingModeInformation</li> <li>class ServoingModeNotification</li> <li>class ServoingModeNotificationList</li> <li>class Snapshot</li> <li>class Ssid</li> <li>class Stop</li> <li>class SwitchControlMapping</li> <li>class SystemTime</li> <li>class Timeout</li> <li>class TrajectoryErrorElement</li> <li>class TrajectoryErrorReport</li> <li>class TrajectoryInfo</li> <li>class TransformationMatrix</li> <li>class TransformationRow</li> <li>class Twist</li> <li>class TwistCommand</li> <li>class TwistLimitation</li> <li>class UserList</li> <li>class UserNotification</li> <li>class UserNotificationList</li> <li>class UserProfile</li> <li>class UserProfileList</li> <li>class Waypoint</li> <li>class WaypointList</li> <li>class WaypointValidationReport</li> <li>class WifiConfiguration</li> <li>class WifiConfigurationList</li> <li>class WifiEnableState</li> <li>class WifiInformation</li> <li>class WifiInformationList</li> <li>class Wrench</li> <li>class WrenchCommand</li> <li>class WrenchLimitation</li> <li>class ZoneShape</li> <li>Enum ActionEvent</li> <li>Enum ActionType</li> <li>Enum AdmittanceMode</li> <li>Enum BackupEvent</li> <li>Enum BridgeStatus</li> <li>Enum BridgeType</li> <li>Enum CapSenseMode</li> <li>Enum ConfigurationNotificationEvent</li> <li>Enum ControlMode</li> <li>Enum ControllerBehavior</li> <li>Enum ControllerElementEventType</li> <li>Enum ControllerEventType</li> <li>Enum ControllerInputType</li> <li>Enum ControllerType</li> <li>Enum EventIdSequenceInfoNotification</li> <li>Enum FactoryEvent</li> <li>Enum Gen3GpioPinId</li> <li>Enum GpioAction</li> <li>Enum GpioBehavior</li> <li>Enum GpioPinPropertyFlags</li> <li>Enum GripperMode</li> <li>Enum JointNavigationDirection</li> <li>Enum JointTrajectoryConstraintType</li> <li>Enum LedState</li> <li>Enum LimitationType</li> <li>Enum NavigationDirection</li> <li>Enum NetworkEvent</li> <li>Enum NetworkType</li> <li>Enum OperatingMode</li> <li>Enum ProtectionZoneEvent</li> <li>Enum RobotEvent</li> <li>Enum SafetyIdentifier</li> <li>Enum ServiceVersion</li> <li>Enum ServoingMode</li> <li>Enum ShapeType</li> <li>Enum SignalQuality</li> <li>Enum SnapshotType</li> <li>Enum SoundType</li> <li>Enum TrajectoryContinuityMode</li> <li>Enum TrajectoryErrorIdentifier</li> <li>Enum TrajectoryErrorType</li> <li>Enum TrajectoryInfoType</li> <li>Enum UserEvent</li> <li>Enum WifiEncryptionType</li> <li>Enum WifiSecurityType</li> <li>Enum WrenchMode</li> <li>Enum WristDigitalInputIdentifier</li> <li>Enum Xbox360AnalogInputIdentifier</li> <li>Enum Xbox360DigitalInputIdentifier</li> </ul> </li> <li>BaseCyclic (Python)<ul> <li>class ActuatorCommand</li> <li>class ActuatorCustomData</li> <li>class ActuatorFeedback</li> <li>class BaseFeedback</li> <li>class Command</li> <li>class CustomData</li> <li>class Feedback</li> <li>Enum ServiceVersion</li> </ul> </li> <li>Common (Python)<ul> <li>class Connection</li> <li>class CountryCode</li> <li>class DeviceHandle</li> <li>class Empty</li> <li>class NotificationHandle</li> <li>class NotificationOptions</li> <li>class SafetyHandle</li> <li>class SafetyNotification</li> <li>class Timestamp</li> <li>class UARTConfiguration</li> <li>class UARTDeviceIdentification</li> <li>class UserProfileHandle</li> <li>Enum ArmState</li> <li>Enum CartesianReferenceFrame</li> <li>Enum CountryCodeIdentifier</li> <li>Enum DeviceTypes</li> <li>Enum NotificationType</li> <li>Enum Permission</li> <li>Enum SafetyStatusValue</li> <li>Enum UARTParity</li> <li>Enum UARTSpeed</li> <li>Enum UARTStopBits</li> <li>Enum UARTWordLength</li> <li>Enum Unit</li> </ul> </li> <li>ControlConfig (Python)<ul> <li>class AngularTwist</li> <li>class CartesianReferenceFrameInfo</li> <li>class CartesianTransform</li> <li>class ControlConfigurationNotification</li> <li>class ControlModeInformation</li> <li>class ControlModeNotification</li> <li>class DesiredSpeeds</li> <li>class GravityVector</li> <li>class JointAccelerationSoftLimits</li> <li>class JointSpeedSoftLimits</li> <li>class JointSpeeds</li> <li>class KinematicLimits</li> <li>class KinematicLimitsList</li> <li>class LinearTwist</li> <li>class PayloadInformation</li> <li>class Position</li> <li>class ToolConfiguration</li> <li>class TwistAngularSoftLimit</li> <li>class TwistLinearSoftLimit</li> <li>Enum ControlConfigurationEvent</li> <li>Enum ControlMode</li> <li>Enum ServiceVersion</li> </ul> </li> <li>DeviceConfig (Python)<ul> <li>class BootloaderVersion</li> <li>class Calibration</li> <li>class CalibrationElement</li> <li>class CalibrationParameter</li> <li>class CalibrationResult</li> <li>class CapSenseConfig</li> <li>class CapSenseRegister</li> <li>class DeviceType</li> <li>class FirmwareVersion</li> <li>class IPv4Settings</li> <li>class MACAddress</li> <li>class ModelNumber</li> <li>class PartNumber</li> <li>class PartNumberRevision</li> <li>class PowerOnSelfTestResult</li> <li>class RebootRqst</li> <li>class RunMode</li> <li>class SafetyConfiguration</li> <li>class SafetyConfigurationList</li> <li>class SafetyEnable</li> <li>class SafetyInformation</li> <li>class SafetyInformationList</li> <li>class SafetyStatus</li> <li>class SafetyThreshold</li> <li>class SerialNumber</li> <li>Enum CalibrationItem</li> <li>Enum CalibrationStatus</li> <li>Enum CapSenseMode</li> <li>Enum RunModes</li> <li>Enum SafetyLimitType</li> <li>Enum ServiceVersion</li> </ul> </li> <li>DeviceManager (Python)<ul> <li>class DeviceHandles</li> <li>Enum ServiceVersion</li> </ul> </li> <li>GripperConfig (Python)<ul> <li>Enum RobotiqGripperStatusFlags</li> <li>Enum SafetyIdentifier</li> </ul> </li> <li>GripperCyclic (Python)<ul> <li>class Command</li> <li>class CustomData</li> <li>class CustomDataUnit</li> <li>class Feedback</li> <li>class MessageId</li> <li>class MotorCommand</li> <li>class MotorFeedback</li> <li>Enum ServiceVersion</li> </ul> </li> <li>InterconnectConfig (Python)<ul> <li>class EthernetConfiguration</li> <li>class EthernetDeviceIdentification</li> <li>class GPIOConfiguration</li> <li>class GPIOIdentification</li> <li>class GPIOState</li> <li>class I2CConfiguration</li> <li>class I2CData</li> <li>class I2CDeviceIdentification</li> <li>class I2CReadParameter</li> <li>class I2CReadRegisterParameter</li> <li>class I2CWriteParameter</li> <li>class I2CWriteRegisterParameter</li> <li>Enum EthernetDevice</li> <li>Enum EthernetDuplex</li> <li>Enum EthernetSpeed</li> <li>Enum GPIOIdentifier</li> <li>Enum GPIOMode</li> <li>Enum GPIOPull</li> <li>Enum GPIOValue</li> <li>Enum I2CDevice</li> <li>Enum I2CDeviceAddressing</li> <li>Enum I2CMode</li> <li>Enum I2CRegisterAddressSize</li> <li>Enum SafetyIdentifier</li> <li>Enum ServiceVersion</li> <li>Enum UARTPortId</li> </ul> </li> <li>InterconnectCyclic (Python)<ul> <li>class Command</li> <li>class CustomData</li> <li>class Feedback</li> <li>class MessageId</li> <li>Enum ServiceVersion</li> </ul> </li> <li>ProductConfiguration (Python)<ul> <li>class CompleteProductConfiguration</li> <li>class ProductConfigurationEndEffectorType</li> <li>Enum ArmLaterality</li> <li>Enum BaseType</li> <li>Enum EndEffectorType</li> <li>Enum InterfaceModuleType</li> <li>Enum ModelId</li> <li>Enum VisionModuleType</li> <li>Enum WristType</li> </ul> </li> <li>Session (Python)<ul> <li>class ConnectionList</li> <li>class CreateSessionInfo</li> <li>Enum ServiceVersion</li> </ul> </li> <li>VisionConfig (Python)<ul> <li>class DistortionCoefficients</li> <li>class ExtrinsicParameters</li> <li>class FocusPoint</li> <li>class IntrinsicParameters</li> <li>class IntrinsicProfileIdentifier</li> <li>class ManualFocus</li> <li>class OptionIdentifier</li> <li>class OptionInformation</li> <li>class OptionValue</li> <li>class RotationMatrix</li> <li>class RotationMatrixRow</li> <li>class SensorFocusAction</li> <li>class SensorIdentifier</li> <li>class SensorSettings</li> <li>class TranslationVector</li> <li>class VisionNotification</li> <li>Enum BitRate</li> <li>Enum FocusAction</li> <li>Enum FrameRate</li> <li>Enum Option</li> <li>Enum Resolution</li> <li>Enum Sensor</li> <li>Enum ServiceVersion</li> <li>Enum VisionEvent</li> </ul> </li> </ul>"},{"location":"enums/ActuatorConfig/CoggingFeedforwardMode/","title":"Enum CoggingFeedforwardMode","text":""},{"location":"enums/ActuatorConfig/CoggingFeedforwardMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CoggingFeedforwardMode</p> Enumerator Value Description FEEDFORWARD_OFF 0 No cogging compensation FEEDFORWARD_ADAPTIVE 1 Cogging compensation with adaptive parameters FEEDFORWARD_CALIBRATED 2 Cogging compensation with calibrated parameters <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/CommandMode/","title":"Enum CommandMode","text":""},{"location":"enums/ActuatorConfig/CommandMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CommandMode</p> Enumerator Value Description CYCLIC 0 Cyclic data only ASYNC_CYCLIC_FLAGS 1 Not supported ASYNC 2 Config messages only CYCLIC_JITTERCOMPENSATED_POSITION 3 Smoothing using only position inputs CYCLIC_JITTERCOMPENSATED_VELOCITY 4 Smoothing using position and velocity inputs CYCLIC_JITTERCOMPENSATED_ACCELERATION 5 Smoothing using position, velocity and acceleration inputs (not supported) <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/ControlLoopSelection/","title":"Enum ControlLoopSelection","text":""},{"location":"enums/ActuatorConfig/ControlLoopSelection/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControlLoopSelection</p> Enumerator Value Description RESERVED 0 0x0 - Reserved (internal use only) JOINT_POSITION 1 0x1 - Joint position control (if available) MOTOR_POSITION 2 0x2 - Motor position control JOINT_VELOCITY 4 0x4 - Joint velocity control (if available) MOTOR_VELOCITY 8 0x8 - Motor velocity control JOINT_TORQUE 16 0x10 - Joint torque control MOTOR_CURRENT 32 0x20 - Motor current control JOINT_TORQUE_HIGH_VELOCITY 64 0x30 - High velocity joint torque control <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/ControlMode/","title":"Enum ControlMode","text":""},{"location":"enums/ActuatorConfig/ControlMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControlMode</p> Enumerator Value Description NONE 0 None POSITION 1 Position mode VELOCITY 2 Velocity mode TORQUE 3 Torque mode CURRENT 4 Current mode CUSTOM 5 Custom mode TORQUE_HIGH_VELOCITY 6 High velocity torque mode <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/CustomDataIndex/","title":"Enum CustomDataIndex","text":""},{"location":"enums/ActuatorConfig/CustomDataIndex/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CustomDataIndex</p> Enumerator Value Description NO_CUSTOM_DATA_SELECTED 0 No custom data selected UINT32_TEST_RAMP 1 Incremental value used for test and validation UINT32_MOTOR_ENCODER_RAW 2 Rotor optical encoder incremental value (raw) UINT32_JOINT_ENCODER_RAW 3 Joint optical encoder incremental value (raw) FLOAT_TEMPERATURE_PHASE_0 4 Motor phase 0 temperature (degrees Celsius) FLOAT_TEMPERATURE_PHASE_1 5 Motor phase 1 temperature (degrees Celsius) FLOAT_TEMPERATURE_PHASE_2 6 Motor phase 2 temperature (degrees Celsius) INT32_TORQUE_SENSOR_RAW_0 7 Individual torque sensor strain gauge 0 ADC value (raw) INT32_TORQUE_SENSOR_RAW_1 8 Individual torque sensor strain gauge 1 ADC value (raw) INT32_TORQUE_SENSOR_RAW_2 9 Individual torque sensor strain gauge 2 ADC value (raw) INT32_TORQUE_SENSOR_RAW_3 10 Individual torque sensor strain gauge 3 ADC value (raw) FLOAT_TORQUE_SENSOR_0 11 Individual torque sensor strain gauge 0 converted value (Newton-meters) FLOAT_TORQUE_SENSOR_1 12 Individual torque sensor strain gauge 1 converted value (Newton-meters) FLOAT_TORQUE_SENSOR_2 13 Individual torque sensor strain gauge 2 converted value (Newton-meters) FLOAT_TORQUE_SENSOR_3 14 Individual torque sensor strain gauge 3 converted value (Newton-meters) UINT32_MOTOR_ENCODER_RAW_LATCH_ON_INDEX_RISING 15 Rotor optical encoder incremental value at last index signal rising edge (raw) UINT32_JOINT_ENCODER_RAW_LATCH_ON_INDEX_RISING 16 Joint optical encoder incremental value at last index signal rising edge (raw) UINT32_ABSOLUTE_POSITION_SENSOR_RAW 17 Absolute position sensor integer value (raw) FLOAT_ABSOLUTE_POSITION_SENSOR 18 Absolute position sensor converted value (degrees) FLOAT_CONTROL_POSITION_JOINT_REQUESTED 19 Last axis position command received via Ethernet UINT32_JIG_FLAGS 20 Jig status flags (internal use) UINT32_TICK_MOTOR_CONTROL 21 Rotor optical encoder incremental value corrected for counter overflow (raw) UINT32_TICK_JOINT_CONTROL 22 Joint optical encoder incremental value corrected for counter overflow (raw) UINT32_INDEX_TICK_MOTOR_CONTROL 23 Rotor optical encoder incremental value corrected for counter overflow at last index signal rising edge (raw) UINT32_INDEX_TICK_JOINT_CONTROL 24 Joint optical encoder incremental value corrected for counter overflow at last index signal rising edge (raw) FLOAT_ACCELERATION_X 25 x-axis acceleration (meters per second squared) FLOAT_ACCELERATION_Y 26 y-axis acceleration (meters per second squared) FLOAT_ACCELERATION_Z 27 z-axis acceleration (meters per second squared) FLOAT_ANGULAR_RATE_X 28 x-axis angular velocity (degrees per second) FLOAT_ANGULAR_RATE_Y 29 y-axis angular velocity (degrees per second) FLOAT_ANGULAR_RATE_Z 30 z-axis angular velocity (degrees per second) FLOAT_POSITION_MOTOR_CMD 31 Axis position command sent to motor position control loop (degrees) FLOAT_VELOCITY_MOTOR_CMD 32 Axis velocity command sent to motor velocity control loop (degrees per second) FLOAT_POSITION_MOTOR 33 Actuator position measured by rotor optical encoder (degrees) FLOAT_VELOCITY_MOTOR 34 Actuator angular velocity measured by rotor optical encoder (degrees per second) UINT32_COMMUNICATIONS_JITTER 35 Jitter from the communication (microseconds) FLOAT_TORQUE_AVERAGE 36 Actuator torque (Newton-meters) FLOAT_CURRENT_MOTOR 37 Motor current (Amperes) FLOAT_VOLTAGE_DIGITAL 38 Main board voltage (Volts) FLOAT_TEMPERATURE_MOTOR_CELSIUS 39 Motor temperature (maximum of the three (3) phase temperatures) (degrees Celsius) FLOAT_TEMPERATURE_CORE_CELSIUS 40 Microcontroller temperature (degrees Celsius) UINT32_FAULT_A 41 Bank A faults (see ActuatorConfig.SafetyIdentifier) UINT32_FAULT_B 42 Bank B faults (see ActuatorConfig.SafetyIdentifier) UINT32_WARNING_A 43 Bank A warnings (see ActuatorConfig.SafetyIdentifier) UINT32_WARNING_B 44 Bank B warnings (see ActuatorConfig.SafetyIdentifier) FLOAT_POSITION_FROM_HALLS 45 Actuator position measured by motor hall sensors (degrees) FLOAT_PHASE_CURRENT_0 46 Motor phase 0 current (Amperes) FLOAT_PHASE_CURRENT_1 47 Motor phase 1 current (Amperes) FLOAT_PHASE_CURRENT_2 48 Motor phase 2 current (Amperes) FLOAT_PHASE_PWM_0 49 Pulse width modulation duty cycle applied to motor phase 0 (percentage) FLOAT_PHASE_PWM_1 50 Pulse width modulation duty cycle applied to motor phase 1 (percentage) FLOAT_PHASE_PWM_2 51 Pulse width modulation duty cycle applied to motor phase 2 (percentage) FLOAT_MOTOR_ELECTRICAL_ANGLE 52 Motor electrical angle (degrees) FLOAT_CURRENT_MOTOR_CMD 53 Motor current command sent to motor drive (Amperes) FLOAT_TORQUE_JOINT_CMD 54 Axis torque command sent to joint torque control loop (Newton-meters) FLOAT_POSITION_UNWRAPPED 55 Actuator position unwrapped (degrees) UINT32_HALL_SENSOR_0 56 Hall sensor 0 value (raw) UINT32_HALL_SENSOR_1 57 Hall sensor 1 value (raw) UINT32_HALL_SENSOR_2 58 Hall sensor 2 value (raw) INT32_HALL_SENSOR_SCALED_0 59 Hall sensor 0 scaled value (raw) INT32_HALL_SENSOR_SCALED_1 60 Hall sensor 1 scaled value (raw) INT32_HALL_SENSOR_SCALED_2 61 Hall sensor 2 scaled value (raw) FLOAT_COGGING_COEFFICIENT_A_0 62 Cogging torque cancellation coefficient A0 (Amperes) FLOAT_COGGING_COEFFICIENT_A_1 63 Cogging torque cancellation coefficient A1 (Amperes) FLOAT_COGGING_COEFFICIENT_A_2 64 Cogging torque cancellation coefficient A2 (Amperes) FLOAT_COGGING_COEFFICIENT_A_3 65 Cogging torque cancellation coefficient A3 (Amperes) FLOAT_COGGING_COEFFICIENT_A_4 66 Cogging torque cancellation coefficient A4 (Amperes) FLOAT_COGGING_COEFFICIENT_A_5 67 Cogging torque cancellation coefficient A5 (Amperes) FLOAT_COGGING_COEFFICIENT_A_6 68 Cogging torque cancellation coefficient A6 (Amperes) FLOAT_COGGING_COEFFICIENT_A_7 69 Cogging torque cancellation coefficient A7 (Amperes) FLOAT_COGGING_COEFFICIENT_A_8 70 Cogging torque cancellation coefficient A8 (Amperes) FLOAT_COGGING_COEFFICIENT_A_9 71 Cogging torque cancellation coefficient A9 (Amperes) FLOAT_COGGING_COEFFICIENT_A_10 72 Cogging torque cancellation coefficient A10 (Amperes) FLOAT_COGGING_COEFFICIENT_A_11 73 Cogging torque cancellation coefficient A11 (Amperes) FLOAT_COGGING_COEFFICIENT_A_12 74 Cogging torque cancellation coefficient A12 (Amperes) FLOAT_COGGING_COEFFICIENT_A_13 75 Cogging torque cancellation coefficient A13 (Amperes) FLOAT_COGGING_COEFFICIENT_A_14 76 Cogging torque cancellation coefficient A14 (Amperes) FLOAT_COGGING_COEFFICIENT_A_15 77 Cogging torque cancellation coefficient A15 (Amperes) FLOAT_COGGING_COEFFICIENT_B_0 78 Cogging torque cancellation coefficient B0 (Amperes) FLOAT_COGGING_COEFFICIENT_B_1 79 Cogging torque cancellation coefficient B1 (Amperes) FLOAT_COGGING_COEFFICIENT_B_2 80 Cogging torque cancellation coefficient B2 (Amperes) FLOAT_COGGING_COEFFICIENT_B_3 81 Cogging torque cancellation coefficient B3 (Amperes) FLOAT_COGGING_COEFFICIENT_B_4 82 Cogging torque cancellation coefficient B4 (Amperes) FLOAT_COGGING_COEFFICIENT_B_5 83 Cogging torque cancellation coefficient B5 (Amperes) FLOAT_COGGING_COEFFICIENT_B_6 84 Cogging torque cancellation coefficient B6 (Amperes) FLOAT_COGGING_COEFFICIENT_B_7 85 Cogging torque cancellation coefficient B7 (Amperes) FLOAT_COGGING_COEFFICIENT_B_8 86 Cogging torque cancellation coefficient B8 (Amperes) FLOAT_COGGING_COEFFICIENT_B_9 87 Cogging torque cancellation coefficient B9 (Amperes) FLOAT_COGGING_COEFFICIENT_B_10 88 Cogging torque cancellation coefficient B10 (Amperes) FLOAT_COGGING_COEFFICIENT_B_11 89 Cogging torque cancellation coefficient B11 (Amperes) FLOAT_COGGING_COEFFICIENT_B_12 90 Cogging torque cancellation coefficient B12 (Amperes) FLOAT_COGGING_COEFFICIENT_B_13 91 Cogging torque cancellation coefficient B13 (Amperes) FLOAT_COGGING_COEFFICIENT_B_14 92 Cogging torque cancellation coefficient B14 (Amperes) FLOAT_COGGING_COEFFICIENT_B_15 93 Cogging torque cancellation coefficient B15 (Amperes) FLOAT_CURRENT_COGGING_FEEDFORWARD 94 Commanded cogging cancellation feedforward current sent to motor drive (Amperes) <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/SafetyIdentifierBankA/","title":"Enum SafetyIdentifierBankA","text":""},{"location":"enums/ActuatorConfig/SafetyIdentifierBankA/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyIdentifierBankA</p> Enumerator Value Description UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER_BANK_A 0 0x0 - Unspecified actuator safety FOLLOWING_ERROR 1 0x1 - Following error MAXIMUM_VELOCITY 2 0x2 - Maximum velocity JOINT_LIMIT_HIGH 4 0x4 - Joint position limit high JOINT_LIMIT_LOW 8 0x8 - Joint position limit low STRAIN_GAUGE_MISMATCH 16 0x10 - Strain gauge mismatch MAXIMUM_TORQUE 32 0x20 - Maximum torque UNRELIABLE_ABSOLUTE_POSITION 64 0x40 - Unreliable absolute position MAGNETIC_POSITION 128 0x80 - Magnetic position HALL_POSITION 256 0x100 - Hall position HALL_SEQUENCE 512 0x200 - Hall sequence INPUT_ENCODER_HALL_MISMATCH 1024 0x400 - Input encoder Hall mismatch INPUT_ENCODER_INDEX_MISMATCH 2048 0x800 - Input encoder index mismatch INPUT_ENCODER_MAGNETIC_MISMATCH 4096 0x1000 - Input encoder magnetic mismatch MAXIMUM_MOTOR_CURRENT 8192 0x2000 - Maximum motor current MOTOR_CURRENT_MISMATCH 16384 0x4000 - Motor current mismatch MAXIMUM_VOLTAGE 32768 0x8000 - Maximum voltage MINIMUM_VOLTAGE 65536 0x10000 - Minimum voltage MAXIMUM_MOTOR_TEMPERATURE 131072 0x20000 - Maximum motor temperature MAXIMUM_CORE_TEMPERATURE 262144 0x40000 - Maximum core temperature NON_VOLATILE_MEMORY_CORRUPTED 524288 0x80000 - Non-volatile memory corrupted MOTOR_DRIVER_FAULT 1048576 0x100000 - Motor driver fault EMERGENCY_LINE_ASSERTED 2097152 0x200000 - Emergency line asserted COMMUNICATION_TICK_LOST 4194304 0x400000 - Communication tick lost WATCHDOG_TRIGGERED 8388608 0x800000 - Watchdog triggered UNRELIABLE_CAPACITIVE_SENSOR 16777216 0x1000000 - Capacitive sensor is unreliable UNEXPECTED_GEAR_RATIO 33554432 0x2000000 - Incorrect gear ratio for detected configuration HALL_MAGNETIC_MISMATCH 67108864 0x4000000 - Position mismatch between hall and magnetic sensors <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/SafetyLimitType/","title":"Enum SafetyLimitType","text":""},{"location":"enums/ActuatorConfig/SafetyLimitType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyLimitType</p> Enumerator Value Description MAXIMAL_LIMIT 0 Maximal limit MINIMAL_LIMIT 1 Minimal limit <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorConfig/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/ActuatorConfig/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"enums/ActuatorCyclic/CommandFlags/","title":"Enum CommandFlags","text":""},{"location":"enums/ActuatorCyclic/CommandFlags/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CommandFlags</p> Enumerator Value Description NO_COMMAND 0 0x0 Default value SERVO_ENABLE 1 0x1 Servoing mode is enabled BRAKE_DISABLE 2 0x2 Brake normally applied, 1 disables brake CLEAR_MAJOR_FAULT 4 0x4 Clear the major fault flag (See StatusFlags) CLEAR_MINOR_FAULT 8 0x8 Clear the minor fault flag (See StatusFlags) PROTECTIVE_STOP 16 0x10 Protective stop has been activated FORCE_BRAKE_RELEASE 32 0x20 Force a brake release IGNORE 64 0x40 ignore the other CommandFlag bits LOW_GAINS 128 0x80 Use a set of specific gain value used by the joint admittance mode LED_0 256 0x100 Activate LED 0 (interface module buttons 0) LED_1 512 0x200 Activate LED 1 (interface module buttons 1) <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"enums/ActuatorCyclic/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/ActuatorCyclic/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"enums/ActuatorCyclic/StatusFlags/","title":"Enum StatusFlags","text":""},{"location":"enums/ActuatorCyclic/StatusFlags/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration StatusFlags</p> Enumerator Value Description UNKNOWN_STATUS 0 0x0 Unknown status STABILIZED 16 0x10 Actuator is in a stable state MOTOR_INDEXED 32 0x20 Position sensor is indexed MOTOR_INDEXING 64 0x40 Position sensor is indexing JOINT_INDEXED 128 0x80 Reserved JOINT_INDEXING 256 0x100 Reserved HIGH_PRECISION 512 0x200 Reserved BRAKING 1024 0x400 The actuator is braking SERVOING 2048 0x800 The actuator is in servoing mode MAJOR_FAULT 4096 0x1000 A major fault has occurred MINOR_FAULT 8192 0x2000 A minor fault has occurred CALIBRATED_TORQUE 16384 0x4000 The torque sensor is calibrated CALIBRATED_MAG_SENSOR 32768 0x8000 The magnetic sensor is calibrated CALIBRATED_ZERO 65536 0x10000 The zero position calibration has been performed GPIO_0 131072 0x20000 Reserved GPIO_1 262144 0x40000 Reserved CS_QUASI_STATIC_CONTACT 524288 0x80000 Reserved CS_TRANSIENT_CONTACT 1048576 0x100000 Reserved VFD_HALL_SYNC 2097152 0x200000 Reserved VFD_INDEXED 4194304 0x400000 Reserved DRIVE_BOARD_READY 8388608 0x800000 Reserved CALIBRATED_CURRENT 16777216 0x1000000 Current sensor is calibrated CALIBRATED_MOTOR 33554432 0x2000000 Motor is calibrated SW0_ACTIVE 67108864 0x4000000 Status of interface module buttons 0 SW1_ACTIVE 134217728 0x8000000 Status of interface module buttons 1 <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"enums/Api/ErrorCodes/","title":"Enum ErrorCodes","text":""},{"location":"enums/Api/ErrorCodes/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ErrorCodes</p> Enumerator Value Description ERROR_NONE 0 No error ERROR_PROTOCOL_SERVER 1 Protocol server error ERROR_PROTOCOL_CLIENT 2 Protocol client error ERROR_DEVICE 3 Device error ERROR_INTERNAL 4 Internal error <p>Parent topic: Api (Python)</p>"},{"location":"enums/Api/SubErrorCodes/","title":"Enum SubErrorCodes","text":""},{"location":"enums/Api/SubErrorCodes/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SubErrorCodes</p> Enumerator Value Description SUB_ERROR_NONE 0 No sub error METHOD_FAILED 1 Method returned a failure status (generic error) UNIMPLEMENTED 2 Unimplemented method INVALID_PARAM 3 Invalid parameter UNSUPPORTED_SERVICE 4 Service not recognized UNSUPPORTED_METHOD 5 Method not recognized TOO_LARGE_ENCODED_FRAME_BUFFER 6 Encoded frame bigger than what transport permits FRAME_ENCODING_ERR 7 Unable to encode frame FRAME_DECODING_ERR 8 Unable to decode frame INCOMPATIBLE_HEADER_VERSION 9 Frame header version differs from what is expected and is considered incompatible UNSUPPORTED_FRAME_TYPE 10 Unrecognized frame type UNREGISTERED_NOTIFICATION_RECEIVED 11 Server receiving unregistered notification INVALID_SESSION 12 Session not recognized PAYLOAD_DECODING_ERR 13 Unable to decode payload UNREGISTERED_FRAME_RECEIVED 14 Client received a response for which it did not send an RPC call INVALID_PASSWORD 15 Password does not match specified user USER_NOT_FOUND 16 Unrecognized user ENTITY_NOT_FOUND 17 Cannot find entity ROBOT_MOVEMENT_IN_PROGRESS 18 Robot refuses new control command because robot movement in progress ROBOT_NOT_MOVING 19 Robot refuses stop command because robot is not moving NO_MORE_STORAGE_SPACE 20 Unable to execute because no more storage ROBOT_NOT_READY 21 Robot initialization is not complete ROBOT_IN_FAULT 22 Robot in fault ROBOT_IN_MAINTENANCE 23 Robot in maintenance ROBOT_IN_UPDATE_MODE 24 Robot in update ROBOT_IN_EMERGENCY_STOP 25 Robot in emergency stop state SINGLE_LEVEL_SERVOING 26 Robot is in single-level servoing mode LOW_LEVEL_SERVOING 27 Robot is in low-level servoing mode MAPPING_GROUP_NON_ROOT 28 Trying to add a non-root MapGroup to Mapping MAPPING_INVALID_GROUP 29 Trying to add an invalid or non-existent MapGroup to Mapping MAPPING_INVALID_MAP 30 Trying to add an invalid or non-existent Map to Mapping MAP_GROUP_INVALID_MAP 31 Trying to add an invalid or non-existent Map to MapGroup MAP_GROUP_INVALID_PARENT 32 Trying to add a MapGroup under an invalid parent MAP_GROUP_INVALID_CHILD 33 Trying to add an invalid or non-existent to MapGroup MAP_GROUP_INVALID_MOVE 34 Trying to change a MapGroup's parent: move not supported MAP_IN_USE 35 Deleting a Map used in a Mapping or MapGroup WIFI_CONNECT_ERROR 36 Unable to connect to specified Wifi network UNSUPPORTED_NETWORK_TYPE 37 Unsupported network type TOO_LARGE_ENCODED_PAYLOAD_BUFFER 38 Encoded payload bigger than what transport permits UPDATE_PERMISSION_DENIED 39 Attempting update command on non-updatable entity DELETE_PERMISSION_DENIED 40 Attempting delete command on non-deletable entity DATABASE_ERROR 41 Internal DB error UNSUPPORTED_OPTION 42 Option not supported UNSUPPORTED_RESOLUTION 43 Resolution not supported UNSUPPORTED_FRAME_RATE 44 Frame rate not supported UNSUPPORTED_BIT_RATE 45 Bit rate not supported UNSUPPORTED_ACTION 46 Action not supported (generic, when an action is not supported for a particular item) UNSUPPORTED_FOCUS_ACTION 47 Focus action not supported VALUE_IS_ABOVE_MAXIMUM 48 Specified value is above the supported maximum VALUE_IS_BELOW_MINIMUM 49 Specified value is below the supported minimum DEVICE_DISCONNECTED 50 Device is not connected DEVICE_NOT_READY 51 Device is not ready INVALID_DEVICE 52 Device id is invalid during bridging SAFETY_THRESHOLD_REACHED 53 Safety threshold is reached therefore safety is on INVALID_USER_SESSION_ACCESS 54 Service or function access not allowed: out of session or level access CONTROL_MANUAL_STOP 55 Manually stopped sequence or action CONTROL_OUTSIDE_WORKSPACE 56 Commanded Cartesian position is outside of robot workspace CONTROL_ACTUATOR_COUNT_MISMATCH 57 Number of constraint sent does not correspond to number of actuator (ex: joint speed) CONTROL_INVALID_DURATION 58 Duration constraint is too short. The robot would need out of limit speeds/accelerations to reach this duration. CONTROL_INVALID_SPEED 59 Speed constraint is negative CONTROL_LARGE_SPEED 60 Speed constraint is too high (exceed speed limit of leads to high acceleration) CONTROL_INVALID_ACCELERATION 61 Speed constraint is too high or duration constraint too short and leads to high acceleration CONTROL_INVALID_TIME_STEP 62 Refresh rate is smaller than the duration of the trajectory CONTROL_LARGE_SIZE 63 Duration of the trajectory is more than 100s. The length of the trajectory is limited to 100000 points to avoid saturating the base memory. CONTROL_WRONG_MODE 64 Control mode is not a trajectory mode CONTROL_JOINT_POSITION_LIMIT 65 Commanded configuration contains at least one actuator which is out of its physical limits CONTROL_NO_FILE_IN_MEMORY 66 Trajectory is not computed and try to be started CONTROL_INDEX_OUT_OF_TRAJECTORY 67 Attempting to read a point of the trajectory with an index higher than the number of point in trajectory point list. CONTROL_ALREADY_RUNNING 68 Trajectory is already running CONTROL_WRONG_STARTING_POINT 69 Robot is not on the first point of the trajectory when we try to start the trajectory. This can happen if there is a motion between the moment when trajectory is computed and when it is started. CONTROL_CARTESIAN_CANNOT_START 70 Cannot start CONTROL_UNDEFINED_CONSTRAINT 71 Kontrol library is not initialized CONTROL_UNINITIALIZED 72 Contraint sent is not defined CONTROL_NO_ACTION 73 Action does not exist CONTROL_UNDEFINED 74 Undefined error WRONG_SERVOING_MODE 75 Robot is in not in the right servoing mode CONTROL_WRONG_STARTING_SPEED 76 Robot is not at the right speed when starting a new trajectory. USERNAME_LENGTH_EXCEEDED 100 User profile username length exceeds maximum allowed length FIRSTNAME_LENGTH_EXCEEDED 101 User profile first name length exceeds maximum allowed length LASTNAME_LENGTH_EXCEEDED 102 User profile last name length exceeds maximum allowed length PASSWORD_LENGTH_EXCEEDED 103 User profile password length exceeds maximum allowed length USERNAME_ALREADY_EXISTS 104 User profile username already in use by another profile USERNAME_EMPTY 105 User profile empty username not allowed PASSWORD_NOT_CHANGED 106 Change password both passwords are the same MAXIMUM_USER_PROFILES_USED 107 Maximum number of user profiles in use ROUTER_UNVAILABLE 108 The client router is currently unavailable. This can happen if an API method is called after the router has been deactivated via the method SetActivationStatus. ADDRESS_NOT_IN_VALID_RANGE 120 IP Address not valid against netmask ADDRESS_NOT_CONFIGURABLE 121 IP Address not configurable on specified interface SESSION_NOT_IN_CONTROL 130 Trying to perform command from a non-controlling session in single-level mode METHOD_TIMEOUT 131 Timeout occured during method execution UNSUPPORTED_ROBOT_CONFIGURATION 132 Product Configuration setter method failed because changing this parameter is unsupported on your robot model NVRAM_READ_FAIL 133 Failed to read in NVRAM. NVRAM_WRITE_FAIL 134 Failed to write in NVRAM. NETWORK_NO_ADDRESS_ASSIGNED 135 The specified interface has no assigned IP READ_PERMISSION_DENIED 136 Attempting read command on unreadable entity CONTROLLER_INVALID_MAPPING 137 Attempting to assign an unsuited mapping to controller ACTION_IN_USE 138 Attempting to delete an Action used by another entity SEND_FAILED 139 An error occured when trying to send the message (Transport error) CONTROL_WAYPOINT_TRAJECTORY_ABORTED 140 Waypoint trajectory sequence aborted by kontrol library CONTROL_PERMISSION_DENIED 141 Permission to execute a routine from the kontrol interface denied <p>Parent topic: Api (Python)</p>"},{"location":"enums/Base/ActionEvent/","title":"Enum ActionEvent","text":""},{"location":"enums/Base/ActionEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ActionEvent</p> Enumerator Value Description UNSPECIFIED_ACTION_EVENT 0 Unspecified action event ACTION_END 1 Action execution end reached ACTION_ABORT 2 Action execution aborted ACTION_PAUSE 3 Action execution paused ACTION_START 4 Action execution started ACTION_PREPROCESS_START 5 Action pre-process started ACTION_PREPROCESS_ABORT 6 Action pre-process aborted ACTION_PREPROCESS_END 7 Action pre-process ended ACTION_POSTPROCESS_START 8 Action post-process started ACTION_POSTPROCESS_ABORT 9 Action post-process aborted ACTION_POSTPROCESS_END 10 Action post-process ended ACTION_FEEDBACK 11 Action feedback received <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ActionType/","title":"Enum ActionType","text":""},{"location":"enums/Base/ActionType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ActionType</p> Enumerator Value Description UNSPECIFIED_ACTION 0 Unspecified action type SEND_TWIST_COMMAND 1 Control the robot in Cartesian velocity SEND_WRENCH_COMMAND 2 Control the robot in force SEND_JOINT_SPEEDS 4 Control each joint speed REACH_POSE 6 Reach a pose REACH_JOINT_ANGLES 7 Reach a series of joint angles TOGGLE_ADMITTANCE_MODE 13 Enable or disable the admittance mode SNAPSHOT 14 Take a snapshot of current robot position SWITCH_CONTROL_MAPPING 16 Switch the active controller map NAVIGATE_JOINTS 17 Select the next actuator to control from control mapping NAVIGATE_MAPPINGS 18 Select a different map CHANGE_TWIST 22 Change the twist CHANGE_JOINT_SPEEDS 23 Change the joint speeds individually CHANGE_WRENCH 25 Change the Cartesian force APPLY_EMERGENCY_STOP 28 Apply robot emergency stop CLEAR_FAULTS 29 Clear faults. Robot will be able to move if there is no more fault (see BaseCyclic.BaseFeedback.[fault_bank_a TIME_DELAY 31 Apply a delay EXECUTE_ACTION 32 Execute an existing action SEND_GRIPPER_COMMAND 33 Send a gripper command SEND_GPIO_COMMAND 34 Send a gpio command (not implemented yet) STOP_ACTION 35 Stop robot movement PLAY_PRE_COMPUTED_TRAJECTORY 39 Play a pre-computed trajectory EXECUTE_SEQUENCE 40 Execute an existing sequence EXECUTE_WAYPOINT_LIST 41 Execute a trajectory defined by a series of waypoints <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/AdmittanceMode/","title":"Enum AdmittanceMode","text":""},{"location":"enums/Base/AdmittanceMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration AdmittanceMode</p> Enumerator Value Description UNSPECIFIED_ADMITTANCE_MODE 0 Unspecified admittance mode CARTESIAN 1 Cartesian admittance mode JOINT 2 Joint admittance mode NULL_SPACE 3 Null space admittance mode DISABLED 4 No admittance <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/BackupEvent/","title":"Enum BackupEvent","text":""},{"location":"enums/Base/BackupEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration BackupEvent</p> Enumerator Value Description UNSPECIFIED_BACKUP_EVENT 0 Unspecified backup event BACKUP_RESTORED 1 Configuration backup restored BACKUP_UPLOADED 2 Configuration backup uploaded on robot <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/BridgeStatus/","title":"Enum BridgeStatus","text":""},{"location":"enums/Base/BridgeStatus/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration BridgeStatus</p> Enumerator Value Description BRIDGE_STATUS_OK 0 No error encountered. BRIDGE_STATUS_OUTP_UNAVAILABLE 1 Requested output port unavailable. BRIDGE_STATUS_UNKNOWN_DEVID 2 Given device identifier is unknown (no device associated with it). BRIDGE_STATUS_UNKNOWN_BRIDGE_TYPE 3 Unknown bridge type used. BRIDGE_STATUS_NOT_FOUND 4 Requested bridge not found. BRIDGE_STATUS_NOT_INITIALIZED 5 Bridge manager not initialized. BRIDGE_STATUS_UNKNOWN 6 Unknown error. <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/BridgeType/","title":"Enum BridgeType","text":""},{"location":"enums/Base/BridgeType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration BridgeType</p> Enumerator Value Description BRIDGE_TYPE_UNSPECIFIED 0 Unspecified Type (custom bridge) BRIDGE_TYPE_UART 1 Bridge to uart bridge TCP port. BRIDGE_TYPE_TELNET 2 Bridge to telnet port <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/CapSenseMode/","title":"Enum CapSenseMode","text":""},{"location":"enums/Base/CapSenseMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CapSenseMode</p> Enumerator Value Description RESERVED 0 Reserved, do not use INACTIVE 1 Cap sensor is inactive ACTIVE_AUTO_THRESHOLD 2 Cap sensor is active in automatic threshold mode ACTIVE_NOISE_ATT 4 Cap sensor is active with noise mitigation enabled ACTIVE_NORMAL 5 Cap sensor is active in normal mode CONFIGURATION 6 Configuration mode <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ConfigurationNotificationEvent/","title":"Enum ConfigurationNotificationEvent","text":""},{"location":"enums/Base/ConfigurationNotificationEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ConfigurationNotificationEvent</p> Enumerator Value Description UNSPECIFIED_CONFIGURATION_EVENT 0 Unspecified configuration event CONFIGURATION_UPDATED 1 Configuration deleted CONFIGURATION_DELETED 2 Configuration updated CONFIGURATION_DELETED_ALL 3 All configurations deleted CONFIGURATION_CREATED 4 Configuration created <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControlMode/","title":"Enum ControlMode","text":""},{"location":"enums/Base/ControlMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControlMode</p> Enumerator Value Description UNSPECIFIED_CONTROL_MODE 0 Unspecified control mode ANGULAR_JOYSTICK 1 Angular joystick mode CARTESIAN_JOYSTICK 2 Cartesian joystick mode ANGULAR_TRAJECTORY 4 Angular trajectory mode CARTESIAN_TRAJECTORY 5 Cartesian trajectory mode CARTESIAN_ADMITTANCE 6 Cartesian admittance mode JOINT_ADMITTANCE 7 Joint admittance mode NULL_SPACE_ADMITTANCE 8 Null space mode FORCE_CONTROL 10 Force control mode FORCE_CONTROL_MOTION_RESTRICTED 11 Force control motion restricted mode IDLE 13 Idle <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControllerBehavior/","title":"Enum ControllerBehavior","text":""},{"location":"enums/Base/ControllerBehavior/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControllerBehavior</p> Enumerator Value Description UNSPECIFIED_CONTROLLER_BEHAVIOR 0 Unspecified controller behavior CONTROLLER_BUTTON_DOWN 1 Pushing button down CONTROLLER_BUTTON_UP 2 Releasing button CONTROLLER_AXIS_POSITIVE 3 Positive axis movement CONTROLLER_AXIS_NEGATIVE 4 Negative axis movement CONTROLLER_BUTTON_CLICK 5 Button down and up within X msec <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControllerElementEventType/","title":"Enum ControllerElementEventType","text":""},{"location":"enums/Base/ControllerElementEventType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControllerElementEventType</p> Enumerator Value Description UNSPECIFIED_CONTROLLER_ELEMENT_EVENT 0 Unspecified controller element event AXIS_MOVED 1 Controller axis moved BUTTON_DOWN 2 Controller button pressed BUTTON_UP 3 Controller button released BUTTON_CLICK 4 Controller button clicked <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControllerEventType/","title":"Enum ControllerEventType","text":""},{"location":"enums/Base/ControllerEventType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControllerEventType</p> Enumerator Value Description UNSPECIFIED_CONTROLLER_EVENT 0 Unspecified controller event CONTROLLER_DISCONNECTED 1 Controller is disconnected CONTROLLER_CONNECTED 2 Controller is connected <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControllerInputType/","title":"Enum ControllerInputType","text":""},{"location":"enums/Base/ControllerInputType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControllerInputType</p> Enumerator Value Description UNSPECIFIED_CONTROLLER_INPUT_TYPE 0 Unspecified controller input type ANALOG 1 Analog controller input type DIGITAL 2 Digital controller input type <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ControllerType/","title":"Enum ControllerType","text":""},{"location":"enums/Base/ControllerType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControllerType</p> Enumerator Value Description UNSPECIFIED_CONTROLLER_TYPE 0 Unspecified controller device type XBOX_CONTROLLER 1 Xbox gamepad WRIST_CONTROLLER 2 Wrist buttons BASIC_JOYSTICK_CONTROLLER 3 Simplified joystick connected to Kinova robot base BASE_GPIO_CONTROLLER 4 GPIO Controller GPIO_JOYSTICK 5 TEMP, will be deleted <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/EventIdSequenceInfoNotification/","title":"Enum EventIdSequenceInfoNotification","text":""},{"location":"enums/Base/EventIdSequenceInfoNotification/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration EventIdSequenceInfoNotification</p> Enumerator Value Description UNSPECIFIED_SEQUENCE_EVENT 0 Unspecified sequence event SEQUENCE_COMPLETED 1 Sequence completed successfully SEQUENCE_ABORTED 2 Sequence aborted SEQUENCE_PAUSED 3 Sequence paused SEQUENCE_TASK_STARTED 4 Sequence task started SEQUENCE_TASK_COMPLETED 5 Sequence task completed SEQUENCE_STARTED 6 Sequence started <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/FactoryEvent/","title":"Enum FactoryEvent","text":""},{"location":"enums/Base/FactoryEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration FactoryEvent</p> Enumerator Value Description UNSPECIFIED_FACTORY_EVENT 0 Unspecified factory event FACTORY_DEFAULT_RESTORED 1 Factory defaults restored on robot NETWORK_FACTORY_DEFAULT_RESTORED 2 Network factory defaults restored on robot (not implemented yet) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/Gen3GpioPinId/","title":"Enum Gen3GpioPinId","text":""},{"location":"enums/Base/Gen3GpioPinId/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Gen3GpioPinId</p> Enumerator Value Description UNSPECIFIED_PIN 0 Unspecified PIN ID GPIO_PIN_B 1 GPIO PIN B GPIO_PIN_C 2 GPIO PIN C GPIO_PIN_D 3 GPIO PIN D GPIO_PIN_E 4 GPIO PIN E GPIO_PIN_G 5 GPIO PIN G GPIO_PIN_H 6 GPIO PIN H GPIO_PIN_I 7 GPIO PIN I GPIO_PIN_K 8 GPIO PIN K GPIO_PIN_N 9 GPIO PIN N GPIO_PIN_O 10 GPIO PIN O GPIO_PIN_S 11 GPIO PIN S GPIO_PIN_T 12 GPIO PIN T <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/GpioAction/","title":"Enum GpioAction","text":""},{"location":"enums/Base/GpioAction/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GpioAction</p> Enumerator Value Description UNSPECIFIED_GPIO_ACTION 0 Unspecified gpio action GPIOACTION_SET 1 Set GPIO output GPIOACTION_CLEAR 2 Clear GPIO output GPIOACTION_PULSE_HIGH 3 Pulse high GPIO output with specified period GPIOACTION_PULSE_LOW 4 Pulse low GPIO output with specified period <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/GpioBehavior/","title":"Enum GpioBehavior","text":""},{"location":"enums/Base/GpioBehavior/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GpioBehavior</p> Enumerator Value Description UNSPECIFIED_GPIO_BEHAVIOR 0 Unspecified GPIO behavior GPIO_FALLING 1 Falling edge GPIO_RISING 2 Rising edge GPIO_PULSE_LOW 3 Sequence of HIGH - LOW - HIGH GPIO_PULSE_HIGH 4 Sequence of LOW - HIGH - LOW GPIO_ANALOG_CHANGE 5 Analog input value change <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/GpioPinPropertyFlags/","title":"Enum GpioPinPropertyFlags","text":""},{"location":"enums/Base/GpioPinPropertyFlags/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GpioPinPropertyFlags</p> Enumerator Value Description GPIOPROPERTY_UNKNOWN 0 GPIOPROPERTY_INPUT 1 0x1 : Pin can be used as digital input GPIOPROPERTY_OUTPUT 2 0x2 : Pin can be used as digital output GPIOPROPERTY_ANALOG 4 0x4 : Pin can be used as analog input <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/GripperMode/","title":"Enum GripperMode","text":""},{"location":"enums/Base/GripperMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GripperMode</p> Enumerator Value Description UNSPECIFIED_GRIPPER_MODE 0 Unspecified gripper mode GRIPPER_FORCE 1 Force control (in Newton) (not implemented yet) GRIPPER_SPEED 2 Speed control (in meters per second) GRIPPER_POSITION 3 Position control (in meters) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/JointNavigationDirection/","title":"Enum JointNavigationDirection","text":""},{"location":"enums/Base/JointNavigationDirection/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration JointNavigationDirection</p> Enumerator Value Description UNSPECIFIED_JOINT_NAVIGATION_DIRECTION 0 Unspecified joint navigation direction JOINT_NEXT 1 Go to next joint JOINT_PREVIOUS 2 Go to previous joint <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/JointTrajectoryConstraintType/","title":"Enum JointTrajectoryConstraintType","text":""},{"location":"enums/Base/JointTrajectoryConstraintType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration JointTrajectoryConstraintType</p> Enumerator Value Description UNSPECIFIED_JOINT_CONSTRAINT 0 Unspecified joint constraint JOINT_CONSTRAINT_DURATION 1 Duration constraint (in second) JOINT_CONSTRAINT_SPEED 2 Speed constraint (in meters per second) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/LedState/","title":"Enum LedState","text":""},{"location":"enums/Base/LedState/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration LedState</p> Enumerator Value Description UNSPECIFIED_LED_STATE 0 Unspecified LED state LED_OFF 1 LED is off LED_PULSE 2 LED is in pulse state LED_ON 3 LED is one <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/LimitationType/","title":"Enum LimitationType","text":""},{"location":"enums/Base/LimitationType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration LimitationType</p> Enumerator Value Description UNSPECIFIED_LIMITATION 0 Unspecified limitation FORCE_LIMITATION 1 Force limitation (not implemented yet) ACCELERATION_LIMITATION 2 Acceleration limitation (not implemented yet) VELOCITY_LIMITATION 3 Velocity limitation TORQUE_LIMITATION 4 Torque limitation <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/NavigationDirection/","title":"Enum NavigationDirection","text":""},{"location":"enums/Base/NavigationDirection/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration NavigationDirection</p> Enumerator Value Description UNSPECIFIED_NAVIGATION_DIRECTION 0 Unspecified navigation direction NEXT 1 Go to next map UP 2 Go to parent map group (not implemented yet) DOWN 3 Go to children map group (not implemented yet) PREVIOUS 4 Go to previous map <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/NetworkEvent/","title":"Enum NetworkEvent","text":""},{"location":"enums/Base/NetworkEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration NetworkEvent</p> Enumerator Value Description UNSPECIFIED_NETWORK_EVENT 0 Unspecified network event WIFI_CONNECTED 1 Wi-Fi connected WIFI_DISCONNECTED 2 Wi-Fi Disconnected WIFI_SCAN_STARTED 3 Wi-Fi scan was initiated WIFI_SCAN_RESULTS 4 Wi-Fi scan results are available WIFI_SCAN_FAILED 5 Wi-Fi scan failed WIFI_NOT_FOUND 6 Wi-Fi selected network not found WIFI_ASSOC_REJECTED 7 Wi-Fi AP rejected association WIFI_AUTH_WRONG_KEY 8 Wi-Fi wrong PSK supplied WIFI_AUTH_CONN_FAILED 9 Wi-Fi connection failure during auth WIFI_AUTH_FAILED 10 Wi-Fi authentication failure WIFI_ENABLED 11 Wi-Fi has been enabled WIFI_DISABLED 12 Wi-Fi has been disabled BLUETOOTH_ENABLED 13 Bluetooth has been enabled BLUETOOTH_DISABLED 14 Bluetooth has been disabled <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/NetworkType/","title":"Enum NetworkType","text":""},{"location":"enums/Base/NetworkType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration NetworkType</p> Enumerator Value Description UNSPECIFIED_NETWORK_TYPE 0 Unspecified network type WIFI 1 Wi-Fi network WIRED_ETHERNET 2 Wired Ethernet network WIRED_MICROUSB 3 Wired Ethernet over USB network (RNDIS) WIRED_USB 4 This enum value is deprecated and will be removed in a future release. <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/OperatingMode/","title":"Enum OperatingMode","text":""},{"location":"enums/Base/OperatingMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration OperatingMode</p> Enumerator Value Description UNSPECIFIED_OPERATING_MODE 0 Unspecified operating mode MAINTENANCE_MODE 1 Robot in maintenance mode UPDATE_MODE 2 Robot waiting for upgrade package UPDATE_COMPLETED_MODE 3 Robot update successfully completed UPDATE_FAILED_MODE 4 Robot update failed SHUTTING_DOWN_MODE 5 Robot about to shutdown RUN_MODE 6 Robot properly running (or normal operation mode) UPDATING_DEVICE_MODE 7 Robot updating device <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ProtectionZoneEvent/","title":"Enum ProtectionZoneEvent","text":""},{"location":"enums/Base/ProtectionZoneEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ProtectionZoneEvent</p> Enumerator Value Description UNSPECIFIED_PROTECTION_ZONE_EVENT 0 Unspecified protection zone event REACHED 1 Protection zone limit is reached ENTERED 2 Protection zone limit is entered EXITED 3 Protection zone limit is exited <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/RobotEvent/","title":"Enum RobotEvent","text":""},{"location":"enums/Base/RobotEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration RobotEvent</p> Enumerator Value Description UNSPECIFIED_ROBOT_EVENT 0 Unspecified robot event ARM_CONNECTED 1 Robot arm is connected ARM_DISCONNECTED 2 Robot arm is disconnected TOOL_CONNECTED 5 Tool is connected to the interface module (not implemented yet) TOOL_DISCONNECTED 6 Tool is disconnected from the interface module (not implemented yet) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/SafetyIdentifier/","title":"Enum SafetyIdentifier","text":""},{"location":"enums/Base/SafetyIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyIdentifier</p> Enumerator Value Description UNSPECIFIED_BASE_SAFETY_IDENTIFIER 0 0x0 - Unspecified base safety FIRMWARE_UPDATE_FAILURE 1 0x1 - Firmware update failure EXTERNAL_COMMUNICATION_ERROR 2 0x2 - External communication error (not implemented yet) MAXIMUM_AMBIENT_TEMPERATURE 4 0x4 - Maximum ambient temperature reached MAXIMUM_CORE_TEMPERATURE 8 0x8 - Maximum core temperature reached JOINT_FAULT 16 0x10 - Joint fault CYCLIC_DATA_JITTER 32 0x20 - Cyclic data jitter (not implemented yet) REACHED_MAXIMUM_EVENT_LOGS 64 0x40 - Reached Maximum number of event log entries (not implemented yet) NO_KINEMATICS_SUPPORT 128 0x80 - No kinematics support (not implemented yet) ABOVE_MAXIMUM_DOF 256 0x100 - Above maximum DoF NETWORK_ERROR 512 0x200 - Network error (not implemented yet) UNABLE_TO_REACH_POSE 1024 0x400 - Unable to reach pose JOINT_DETECTION_ERROR 2048 0x800 - Joint detection error NETWORK_INITIALIZATION_ERROR 4096 0x1000 - Network initialization error MAXIMUM_CURRENT 8192 0x2000 - Maximum current reached MAXIMUM_VOLTAGE 16384 0x4000 - Maximum voltage reached MINIMUM_VOLTAGE 32768 0x8000 - Minimum voltage reached MAXIMUM_END_EFFECTOR_TRANSLATION_VELOCITY 65536 0x10000 - Maximum tool translation velocity reached (not implemented yet) MAXIMUM_END_EFFECTOR_ORIENTATION_VELOCITY 131072 0x20000 - Maximum tool orientation velocity reached (not implemented yet) MAXIMUM_END_EFFECTOR_TRANSLATION_ACCELERATION 262144 0x40000 - Maximum tool translation acceleration reached (not implemented yet) MAXIMUM_END_EFFECTOR_ORIENTATION_ACCELERATION 524288 0x80000 - Maximum tool orientation acceleration reached (not implemented yet) MAXIMUM_END_EFFECTOR_TRANSLATION_FORCE 1048576 0x100000 - Maximum tool translation force reached (not implemented yet) MAXIMUM_END_EFFECTOR_ORIENTATION_FORCE 2097152 0x200000 - Maximum tool orientation force reached (not implemented yet) MAXIMUM_END_EFFECTOR_PAYLOAD 4194304 0x400000 - Maximum tool payload reached (not implemented yet) EMERGENCY_STOP_ACTIVATED 8388608 0x800000 - Emergency stop activated EMERGENCY_LINE_ACTIVATED 16777216 0x1000000 - Emergency line activated INRUSH_CURRENT_LIMITER_FAULT 33554432 0x2000000 - In rush current limiter fault NVRAM_CORRUPTED 67108864 0x4000000 - NVRAM corrupted (not implemented yet) INCOMPATIBLE_FIRMWARE_VERSION 134217728 0x8000000 - Incompatible firmware version POWERON_SELF_TEST_FAILURE 268435456 0x10000000 - Power on seflt test failure DISCRETE_INPUT_STUCK_ACTIVE 536870912 0x20000000 - Discrete Input stuck active ARM_INTO_ILLEGAL_POSITION 1073741824 0x40000000 - Arm is in an illegal position (sigularity) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/Base/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ServoingMode/","title":"Enum ServoingMode","text":""},{"location":"enums/Base/ServoingMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServoingMode</p> Enumerator Value Description UNSPECIFIED_SERVOING_MODE 0 Unspecified servoing mode SINGLE_LEVEL_SERVOING 2 Single-level servoing LOW_LEVEL_SERVOING 3 Low-level servoing BYPASS_SERVOING 4 Bypass mode <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/ShapeType/","title":"Enum ShapeType","text":""},{"location":"enums/Base/ShapeType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ShapeType</p> Enumerator Value Description UNSPECIFIED_SHAPE 0 Unspecified shape type CYLINDER 1 Cylinder shape type SPHERE 2 Sphere shape type RECTANGULAR_PRISM 3 Rectangular prism shape type <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/SignalQuality/","title":"Enum SignalQuality","text":""},{"location":"enums/Base/SignalQuality/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SignalQuality</p> Enumerator Value Description UNSPECIFIED_SIGNAL_QUALITY 0 Unspecified signal quality POOR 1 Poor signal quality FAIR 2 Fair signal quality GOOD 3 Good signal quality EXCELLENT 4 Excellent signal quality NONE 5 No signal <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/SnapshotType/","title":"Enum SnapshotType","text":""},{"location":"enums/Base/SnapshotType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SnapshotType</p> Enumerator Value Description UNSPECIFIED_SNAPSHOT 0 Unspecified snapshot type CARTESIAN_POSITION_SNAPSHOT 1 Snapshot of the current Cartesian robot position JOINT_POSITION_SNAPSHOT 2 Snapshot of the current joint robot position GRIPPER_SNAPSHOT 3 Snapshot of the current gripper position COMBINED_SNAPSHOT 4 Snapshot of the current robot and gripper positions <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/SoundType/","title":"Enum SoundType","text":""},{"location":"enums/Base/SoundType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SoundType</p> Enumerator Value Description UNSPECIFIED_SOUND_TYPE 0 Unspecified sound types BIP_SERIES 1 Bip series sound type SINGLE_BIP 2 Single bin sound type <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/TrajectoryContinuityMode/","title":"Enum TrajectoryContinuityMode","text":""},{"location":"enums/Base/TrajectoryContinuityMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration TrajectoryContinuityMode</p> Enumerator Value Description TRAJECTORY_CONTINUITY_MODE_UNSPECIFIED 0 Unspecified continuity TRAJECTORY_CONTINUITY_MODE_POSITION 1 Position continuity only TRAJECTORY_CONTINUITY_MODE_SPEED 2 Position and speed continuity TRAJECTORY_CONTINUITY_MODE_ACCELERATION 3 Position, speed and acceleration continuity <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/TrajectoryErrorIdentifier/","title":"Enum TrajectoryErrorIdentifier","text":""},{"location":"enums/Base/TrajectoryErrorIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration TrajectoryErrorIdentifier</p> Enumerator Value Description TRAJECTORY_ERROR_IDENTIFIER_UNSPECIFIED 0 Unspecified error identifier. This enum is deprecated. TRAJECTORY_ERROR_IDENTIFIER_UNAPPLICABLE 1 No identifier required for this error. This enum is deprecated. TRAJECTORY_ERROR_IDENTIFIER_TIME 2 Time validation failed. This enum is deprecated. TRAJECTORY_ERROR_IDENTIFIER_POSITION 3 Position validation failed. This enum is deprecated. TRAJECTORY_ERROR_IDENTIFIER_VELOCITY 4 Velocity validation failed. This enum is deprecated. TRAJECTORY_ERROR_IDENTIFIER_ACCELERATION 5 Acceleration validation failed. This enum is deprecated. <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/TrajectoryErrorType/","title":"Enum TrajectoryErrorType","text":""},{"location":"enums/Base/TrajectoryErrorType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration TrajectoryErrorType</p> Enumerator Value Description TRAJECTORY_ERROR_TYPE_UNSPECIFIED 0 Unspecified error type TRAJECTORY_ERROR_TYPE_OUTSIDE_WORKSPACE 1 The desired pose is outside robot workspace TRAJECTORY_ERROR_TYPE_ACTUATOR_COUNT_MISMATCH 2 The provided number of joint values does not match robot's number of actuators TRAJECTORY_ERROR_TYPE_INVALID_DURATION 3 The duration exceeds a limit or is invalid TRAJECTORY_ERROR_TYPE_JOINT_NO_MOTION 4 The robot's actuators are already at the targeted configuration TRAJECTORY_ERROR_TYPE_ZERO_DISTANCE 4 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_JOINT_SPEED 5 The joint speed exceeds a limit, initial speed does not match current robot speed or is invalid TRAJECTORY_ERROR_TYPE_INVALID_SPEED 5 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_LARGE_SPEED 6 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_JOINT_ACCELERATION 7 The joint acceleration exceeds a limit or is invalid TRAJECTORY_ERROR_TYPE_INVALID_ACCELERATION 7 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_TIME_STEP 8 The time step does not match robot time step or is invalid TRAJECTORY_ERROR_TYPE_INVALID_TRAJECTORY_SIZE 9 The trajectory size is outside the limits or is invalid TRAJECTORY_ERROR_TYPE_LARGE_SIZE 9 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_WRONG_MODE 10 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_JOINT_POSITION 11 The joint position exceeds a limit, initial joint position does not match current robot joint position or is invalid TRAJECTORY_ERROR_TYPE_JOINT_POSITION_LIMIT 11 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_FILE_ERROR 12 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_NO_FILE_IN_MEMORY 13 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INDEX_OUT_OF_TRAJ 14 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_TRAJECTORY_ALREADY_RUNNING 15 The new trajectory cannot start because another trajectory is being played TRAJECTORY_ERROR_TYPE_ALREADY_RUNNING 15 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_WRONG_STARTING_POINT 16 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_CARTESIAN_CANNOT_START 17 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_WRONG_STARTING_SPEED 18 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_POSITION 19 This enum value is deprecated and will be removed in a future release. TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_POSITION 20 The cartesian position exceeds a limit, initial pose does not match current robot pose or is invalid TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ORIENTATION 21 The cartesian orientation exceeds a limit, initial orientation does not match current robot orientation or is invalid TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_LINEAR_VELOCITY 22 The cartesian linear velocity exceeds a limit or is invalid TRAJECTORY_ERROR_TYPE_INVALID_CARTESIAN_ANGULAR_VELOCITY 23 The cartesian angular velocity exceeds a limit or is invalid TRAJECTORY_ERROR_TYPE_INVALID_JOINT_TORQUE 24 The joint torque exceeds a limit or is invalid TRAJECTORY_ERROR_TYPE_MULTIPLE_WAYPOINT_TYPE_LIST 25 The waypoints in a trajectory must be all of the same type (cartesian or angular) TRAJECTORY_ERROR_TYPE_INITIAL_WAYPOINT_NO_STOP 26 The first waypoint must not have blending (currently unused) TRAJECTORY_ERROR_TYPE_FINAL_WAYPOINT_NO_STOP 27 The last waypoint must not have blending TRAJECTORY_ERROR_TYPE_INVALID_BLENDING_RADIUS 28 The blending radius must be positive and not overlap other blendings or waypoint or is invalid TRAJECTORY_ERROR_TYPE_INVALID_REFERENCE_FRAME 29 The reference frame is invalid or not supported TRAJECTORY_ERROR_TYPE_NUMERICAL_ERROR_IMPOSSIBLE_TRAJECTORY 30 The conditions (points, velocities) of the trajectory lead to numerical errors that make the computation impossible <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/TrajectoryInfoType/","title":"Enum TrajectoryInfoType","text":""},{"location":"enums/Base/TrajectoryInfoType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration TrajectoryInfoType</p> Enumerator Value Description UNSPECIFIED_TRAJECTORY_INFORMATION 0 No information provided JOINT_ACCELERATION_LIMIT_REACHED 1 Joint acceleration limit reached JOINT_SPEED_LIMIT_REACHED 2 Joint speed limit reached JOINT_POSITION_LIMIT_REACHED 3 Joint position limit reached JOINT_TORQUE_LIMIT_REACHED 4 Joint torque limit reached SINGULARITY_REGION 5 The arm is inside a singularity region INVERSE_KINEMATIC_FAILED 6 The inverse kinematic calculation has failed CARTESIAN_ACCELERATION_LIMIT_REACHED 7 Cartesian acceleration limit reached CARTESIAN_SPEED_LIMIT_REACHED 8 Cartesian speed limit reached CARTESIAN_POSITION_LIMIT_REACHED 9 Cartesian position limit reached CARTESIAN_WRENCH_LIMIT_REACHED 10 Cartesian torque limit reached ENTERING_PROTECTION_ZONE 11 The arm is entering a protection zone WAYPOINT_REACHED 12 Waypoint reached TRAJECTORY_OK 13 There is more trajectory notification <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/UserEvent/","title":"Enum UserEvent","text":""},{"location":"enums/Base/UserEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UserEvent</p> Enumerator Value Description UNSPECIFIED_USER_EVENT 0 Unspecified user event LOGGED_OUT 1 User logged out LOGGED_IN 2 User logged in <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/WifiEncryptionType/","title":"Enum WifiEncryptionType","text":""},{"location":"enums/Base/WifiEncryptionType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration WifiEncryptionType</p> Enumerator Value Description UNSPECIFIED_ENCRYPTION 0 Unspecified Wi-Fi encryption type AES_ENCRYPTION 1 AES encryption TKIP_ENCRYPTION 2 TKIP encryption WEP_ENCRYPTION 4 WEP encryption <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/WifiSecurityType/","title":"Enum WifiSecurityType","text":""},{"location":"enums/Base/WifiSecurityType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration WifiSecurityType</p> Enumerator Value Description UNSPECIFIED_AUTHENTICATION 0 Unspecified Wi-Fi security type WEP 1 WEP authentication required WPA2_PERSONAL 2 WPA2 Personal authentication required WPA_PERSONAL 4 WPA Personal authentication required NO_AUTHENTICATION 8 No authentication required <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/WrenchMode/","title":"Enum WrenchMode","text":""},{"location":"enums/Base/WrenchMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration WrenchMode</p> Enumerator Value Description UNSPECIFIED_WRENCH_MODE 0 Unspecified wrench mode WRENCH_RESTRICTED 1 Wrench restricted mode (tool motion is authorized only in the direction of the wrench command) WRENCH_NORMAL 2 Wrench normal mode (tool motion is authorized in any direction) <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/WristDigitalInputIdentifier/","title":"Enum WristDigitalInputIdentifier","text":""},{"location":"enums/Base/WristDigitalInputIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration WristDigitalInputIdentifier</p> Enumerator Value Description UNSPECIFIED_WRIST_DIGITAL 0 Unspecified digital input WRIST_BUTTON_1 1 Button 1 input WRIST_BUTTON_2 2 Button 2 input WRIST_BUTTON_BOTH 3 Button 1 + Button 2 combo <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/Xbox360AnalogInputIdentifier/","title":"Enum Xbox360AnalogInputIdentifier","text":""},{"location":"enums/Base/Xbox360AnalogInputIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Xbox360AnalogInputIdentifier</p> Enumerator Value Description UNSPECIFIED_XBOX360_ANALOG 0 Unspecified analog input XBOX360_THUMB_LEFT_X 1 Thumb left X input XBOX360_THUMB_LEFT_Y 2 Thumb left Y input XBOX360_THUMB_RIGHT_X 3 Thumb right X input XBOX360_THUMB_RIGHT_Y 4 Thumb right Y input XBOX360_TRIGGER_LEFT 5 Trigger left input XBOX360_TRIGGER_RIGHT 6 Trigger right input <p>Parent topic: Base (Python)</p>"},{"location":"enums/Base/Xbox360DigitalInputIdentifier/","title":"Enum Xbox360DigitalInputIdentifier","text":""},{"location":"enums/Base/Xbox360DigitalInputIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Xbox360DigitalInputIdentifier</p> Enumerator Value Description UNSPECIFIED_XBOX360_DIGITAL 0 Unspecified digital input XBOX360_PAD_UP 1 Pad up input XBOX360_PAD_DOWN 2 Pad down input XBOX360_PAD_LEFT 3 Pad left input XBOX360_PAD_RIGHT 4 Pad right input XBOX360_FILE_BUTTON_START 5 File button start input XBOX360_DOCUMENT_BUTTON_BACK 6 Document button back input XBOX360_LEFT_THUMB_BUTTON 7 Left thumb button input XBOX360_RIGHT_THUMB_BUTTON 8 Right thumb button input XBOX360_LEFT_SHOULDER 9 Left shoulder input XBOX360_RIGHT_SHOULDER 10 Right shoulder input XBOX360_BUTTON_A 13 Button A input XBOX360_BUTTON_B 14 Button B input XBOX360_BUTTON_X 15 Button X input XBOX360_BUTTON_Y 16 Button Y input <p>Parent topic: Base (Python)</p>"},{"location":"enums/BaseCyclic/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/BaseCyclic/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"enums/Common/ArmState/","title":"Enum ArmState","text":""},{"location":"enums/Common/ArmState/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ArmState</p> Enumerator Value Description ARMSTATE_UNSPECIFIED 0 Unspecified arm state ARMSTATE_BASE_INITIALIZATION 1 Cannot be reported as the Base initialization must be completed before allowing user connection ARMSTATE_IDLE 2 Base initialization succeeded ARMSTATE_INITIALIZATION 3 Arm is being initialized ARMSTATE_IN_FAULT 4 Arm is in fault ARMSTATE_MAINTENANCE 5 Arm is in maintenance ARMSTATE_SERVOING_LOW_LEVEL 6 Arm is in low-level servoing mode ARMSTATE_SERVOING_READY 7 Arm is ready to be controlled ARMSTATE_SERVOING_PLAYING_SEQUENCE 8 Arm is currently being controlled via a sequence ARMSTATE_SERVOING_MANUALLY_CONTROLLED 9 Arm is currently being controlled manually ARMSTATE_RESERVED 255 For debugging, this state must never be reported outside the base. this means that a state is not mapped correctly <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/CartesianReferenceFrame/","title":"Enum CartesianReferenceFrame","text":""},{"location":"enums/Common/CartesianReferenceFrame/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CartesianReferenceFrame</p> Enumerator Value Description CARTESIAN_REFERENCE_FRAME_UNSPECIFIED 0 Unspecified Cartesian reference frame CARTESIAN_REFERENCE_FRAME_MIXED 1 Mixed reference frame where translation reference = base and orientation reference = tool CARTESIAN_REFERENCE_FRAME_TOOL 2 Tool reference frame where translation reference = tool and orientation reference = tool CARTESIAN_REFERENCE_FRAME_BASE 3 Base reference frame where the translation reference = base and orientation reference = base <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/CountryCodeIdentifier/","title":"Enum CountryCodeIdentifier","text":""},{"location":"enums/Common/CountryCodeIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CountryCodeIdentifier</p> Enumerator Value Description UNSPECIFIED_COUNTRY_CODE 0 UNITED_ARAB_EMIRATES_AE 1 ANTIGUA_AND_BARBUDA_AG 2 ANGUILLA_AI 3 ALBANIA_AL 4 AMERICAN_SAMOA_AS 5 AUSTRIA_AT 6 AUSTRALIA_AU 7 ARUBA_AW 8 AZERBAIJAN_AZ 9 BOSNIA_AND_HERZEGOVINA_BA 10 BANGLADESH_BD 11 BELGIUM_BE 12 BULGARIA_BG 13 BAHRAIN_BH 14 BERMUDA_BM 15 BRUNEI_DARUSSALAM_BN 16 BRAZIL_BR 17 BAHAMAS_BS 18 BELARUS_BY 19 SWITZERLAND_CH 20 CANADA_CA 21 CHINA_CN 22 COLOMBIA_CO 23 COSTA_RICA_CR 24 CYPRUS_CY 25 CZECH_REPUBLIC_CZ 26 GERMANY_DE 27 DENMARK_DK 28 ECUADOR_EC 29 ESTONIA_EE 30 EGYPT_EG 31 SPAIN_ES 32 ETHIOPIA_ET 33 FINLAND_FI 34 FRANCE_FR 35 UNITED_KINGDOM_GB 36 GRENADA_GD 37 FRENCH_GUIANA_GF 38 GUADELOUPE_GP 39 GREECE_GR 40 GUATEMALA_GT 41 GUAM_GU 42 HONG_KONG_HK 43 CROATIA_HR 44 HUNGARY_HU 45 INDIA_IN 46 INDONESIA_ID 47 IRELAND_IE 48 ISRAEL_IL 49 ICELAND_IS 50 ITALY_IT 51 JORDAN_JO 52 JAPAN_JP 53 CAMBODIA_KH 54 REPUBLIC_OF_KOREA_KR 55 KUWAIT_KW 56 CAYMAN_ISLANDS_KY 57 LAO_PDR_LA 58 LEBANON_LB 59 LIECHTENSTEIN_LI 60 SRI_LANKA_LK 61 LESOTHO_LS 62 LITHUANIA_LT 63 LUXEMBOURG_LU 64 LATVIA_LV 65 MOROCCO_MA 66 MONACO_MC 67 MOLDOVA_MD 68 MONTENEGRO_ME 69 REPUBLIC_OF_MACEDONIA_MK 70 MONGOLIA_MN 71 MARTINIQUE_MQ 72 MAURITANIA_MR 73 MALTA_MT 74 MAURITIUS_MU 75 MALDIVES_MV 76 MALAWI_MW 77 MEXICO_MX 78 MALAYSIA_MY 79 NICARAGUA_NI 80 NETHERLANDS_NL 81 NORWAY_NO 82 NEW_ZEALAND_NZ 83 OMAN_OM 84 PANAMA_PA 85 PERU_PE 86 PHILIPPINES_PH 87 POLAND_PL 88 PUERTO_RICO_PR 89 PORTUGAL_PT 90 PARAGUAY_PY 91 REUNION_RE 92 ROMANIA_RO 93 SERBIA_RS 94 RUSSIAN_FEDERATION_RU 95 SWEDEN_SE 96 SINGAPORE_SI 97 SLOVAKIA_SK 98 EL_SALVADOR_SV 99 THAILAND_TH 100 TUNISIA_TN 101 TURKEY_TR 102 TRINIDAD_AND_TOBAGO_TT 103 TAIWAN_PROVINCE_OF_CHINA_TW 104 UKRAINE_UA 105 UNITED_STATES_US 106 HOLY_SEE_VATICAN_CITY_STATE_VA 107 BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE 108 BRITISH_VIRGIN_ISLANDS_VG 109 VIETNAM_VN 110 MAYOTTE_YT 111 SOUTH_AFRICA_ZA 112 <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/DeviceTypes/","title":"Enum DeviceTypes","text":""},{"location":"enums/Common/DeviceTypes/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration DeviceTypes</p> Enumerator Value Description UNSPECIFIED_DEVICE_TYPE 0 Unspecified device type BASE 1 Base module VISION 2 Vision module BIG_ACTUATOR 3 Big actuator module SMALL_ACTUATOR 4 Small actuator module INTERCONNECT 5 Interface module GRIPPER 6 Gripper module MEDIUM_ACTUATOR 7 Medium actuator module XBIG_ACTUATOR 8 XBig actuator module <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/NotificationType/","title":"Enum NotificationType","text":""},{"location":"enums/Common/NotificationType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration NotificationType</p> Enumerator Value Description NOTIFICATION_TYPE_UNSPECIFIED 0 Unspecified notification NOTIFICATION_TYPE_THRESHOLD 1 Threshold notification. Refers to a notification sent beyond a specific threshold (not implemented yet) NOTIFICATION_TYPE_FIX_RATE 2 Fix rate notification. Refers to a notification sent at a predetermined fix rate (not implemented yet) NOTIFICATION_TYPE_EVENT 3 Event type notification. Refers to a notification sent in response to an event <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/Permission/","title":"Enum Permission","text":""},{"location":"enums/Common/Permission/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Permission</p> Enumerator Value Description NO_PERMISSION 0 No permission READ_PERMISSION 1 Read permission. Refers to an entity that can be read UPDATE_PERMISSION 2 Update permission. Refers to an entity that can be modified DELETE_PERMISSION 4 Delete permission. Refers to an entity that can be deleted <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/SafetyStatusValue/","title":"Enum SafetyStatusValue","text":""},{"location":"enums/Common/SafetyStatusValue/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyStatusValue</p> Enumerator Value Description SAFETY_STATUS_UNSPECIFIED 0 Unspecified safety status SAFETY_STATUS_WARNING 1 Warning safety reached SAFETY_STATUS_ERROR 2 Error safety reached SAFETY_STATUS_NORMAL 3 Safety is off <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/UARTParity/","title":"Enum UARTParity","text":""},{"location":"enums/Common/UARTParity/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UARTParity</p> Enumerator Value Description UART_PARITY_UNSPECIFIED 0 Unspecified UART parity UART_PARITY_NONE 1 No parity UART_PARITY_ODD 2 Odd parity UART_PARITY_EVEN 3 Even parity <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/UARTSpeed/","title":"Enum UARTSpeed","text":""},{"location":"enums/Common/UARTSpeed/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UARTSpeed</p> Enumerator Value Description UART_SPEED_UNSPECIFIED 0 Unspecified UART speed UART_SPEED_4800 1 4800 bps UART_SPEED_9600 2 9600 bps UART_SPEED_19200 3 19200 bps UART_SPEED_38400 4 38400 bps UART_SPEED_57600 5 57600 bps UART_SPEED_115200 6 115200 bps UART_SPEED_230400 7 230400 bps UART_SPEED_460800 8 460800 bps UART_SPEED_921600 9 921600 bps UART_SPEED_1382400 10 1382400 bps UART_SPEED_1612800 11 1612800 bps UART_SPEED_1843200 12 1843200 bps UART_SPEED_2073600 13 2073600 bps UART_SPEED_2188800 14 2188800 bps UART_SPEED_2246400 15 2246400 bps <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/UARTStopBits/","title":"Enum UARTStopBits","text":""},{"location":"enums/Common/UARTStopBits/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UARTStopBits</p> Enumerator Value Description UART_STOP_BITS_UNSPECIFIED 0 Unspecified UART stop bits UART_STOP_BITS_0_5 1 0.5 stop bit UART_STOP_BITS_1 2 1 stop bit UART_STOP_BITS_1_5 3 1.5 stop bits UART_STOP_BITS_2 4 2 stop bits <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/UARTWordLength/","title":"Enum UARTWordLength","text":""},{"location":"enums/Common/UARTWordLength/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UARTWordLength</p> Enumerator Value Description UART_WORD_LENGTH_UNSPECIFIED 0 Unspecified UART word length UART_WORD_LENGTH_7 1 7 bits UART_WORD_LENGTH_8 2 8 bits UART_WORD_LENGTH_9 3 9 bits <p>Parent topic: Common (Python)</p>"},{"location":"enums/Common/Unit/","title":"Enum Unit","text":""},{"location":"enums/Common/Unit/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Unit</p> Enumerator Value Description UNSPECIFIED_UNIT 0 Unspecified unit CELSIUS 1 Degree Celsius AMPERE 2 Ampere VOLT 3 Volt METER_PER_SECOND 4 Meter per second DEGREE_PER_SECOND 5 Degree per second METER_PER_SECOND_2 6 Meter per second squared DEGREE_PER_SECOND_2 7 Degree per second squared NEWTON 8 Newton NEWTON_METER 9 Newton * meter KILOGRAM 10 Kilogram DEGREE 11 Degree TICK 12 Tick DEGREE_PER_MILLISECOND 13 Degre per millisecond <p>Parent topic: Common (Python)</p>"},{"location":"enums/ControlConfig/ControlConfigurationEvent/","title":"Enum ControlConfigurationEvent","text":""},{"location":"enums/ControlConfig/ControlConfigurationEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControlConfigurationEvent</p> Enumerator Value Description UNSPECIFIED_CONTROL_CONFIGURATION_EVENT 0 Unspecified control configuration event ANGLE_UNIT_CHANGED 1 Angle unit changed event GRAVITY_VECTOR_CHANGED 2 Gravity vector changed event JOINT_ADMITTANCE_CONFIGURATION_CHANGED 4 Joint admittance configuration changed event NULL_ADMITTANCE_CONFIGURATION_CHANGED 5 Null admittance configuration changed event CARTESIAN_ADMITTANCE_CONFIGURATION_CHANGED 6 Cartesian admittance configuration changed event JOINT_TORQUE_HYBRID_CONFIGURATION_CHANGED 7 Joint torque hybrid configuraiton changed event WRENCH_COMMAND_NORMAL_CONFIGURATION_CHANGED 8 Wrench commmand normal configuration changed event WRENCH_COMMAND_RESTRICTED_CONFIGURATION_CHANGED 9 Wrench command restricted configuration changed event CONTROL_CONFIGURATION_FACTORY_RESTORED 10 Control configuration factory restored event TOOL_CONFIGURATION_CHANGED 11 Tool configuration event PAYLOAD_CONFIGURATION_CHANGED 12 Payload configuration event CARTESIAN_REFERENCE_CHANGED 13 Cartesian reference event CHANGE_CONTROL_MODE_FAILED 14 Control mode change fail event JOINT_SPEED_SOFT_LIMITS_CHANGED 16 Joint speed software limits changed event TWIST_LINEAR_SOFT_LIMIT_CHANGED 17 Linear speed software limit changed event TWIST_ANGULAR_SOFT_LIMIT_CHANGED 18 Angular speed software limit changed event JOINT_ACCELERATION_SOFT_LIMITS_CHANGED 19 Joint acceleration software limits changed event DESIRED_TWIST_LINEAR_SPEED_CHANGED 20 Desired joystick twist linear speed changed event DESIRED_TWIST_ANGULAR_SPEED_CHANGED 21 Desired joystick twist angular speed changed event DESIRED_JOINT_SPEED_CHANGED 22 Desired joystick joint speed changed event <p>Parent topic: ControlConfig (Python)</p>"},{"location":"enums/ControlConfig/ControlMode/","title":"Enum ControlMode","text":""},{"location":"enums/ControlConfig/ControlMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ControlMode</p> Enumerator Value Description UNSPECIFIED_CONTROL_MODE 0 Unspecified control mode ANGULAR_JOYSTICK 1 Angular joystick mode CARTESIAN_JOYSTICK 2 Cartesian joystick mode ANGULAR_TRAJECTORY 4 Angular trajectory mode CARTESIAN_TRAJECTORY 5 Cartesian trajectory mode CARTESIAN_ADMITTANCE 6 Cartesian admittance mode JOINT_ADMITTANCE 7 Joint admittance mode NULL_SPACE_ADMITTANCE 8 Null space mode FORCE_CONTROL 10 Force control mode FORCE_CONTROL_MOTION_RESTRICTED 11 Force control motion restricted mode CARTESIAN_WAYPOINT_TRAJECTORY 12 Cartesian waypoint trajectory mode IDLE 13 Idle <p>Parent topic: ControlConfig (Python)</p>"},{"location":"enums/ControlConfig/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/ControlConfig/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: ControlConfig (Python)</p>"},{"location":"enums/DeviceConfig/CalibrationItem/","title":"Enum CalibrationItem","text":""},{"location":"enums/DeviceConfig/CalibrationItem/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CalibrationItem</p> Enumerator Value Description UNSPECIFIED_CALIBRATION_ITEM 0 Unspecified calibration item COGGING 1 Cogging calibration MAGNETIC 2 Magnetic sensors calibration MOTOR 3 Motor calibration POSITION_RANGE 4 Position range calibration <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceConfig/CalibrationStatus/","title":"Enum CalibrationStatus","text":""},{"location":"enums/DeviceConfig/CalibrationStatus/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CalibrationStatus</p> Enumerator Value Description UNSPECIFIED_CALIBRATION_STATUS 0 Unspecified calibration status NOT_CALIBRATED 1 Calibration is not done IN_PROGRESS 2 Calibration is in progress CALIBRATED 3 Calibration was successfully completed IN_FAULT 4 Calibration failed <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceConfig/CapSenseMode/","title":"Enum CapSenseMode","text":""},{"location":"enums/DeviceConfig/CapSenseMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration CapSenseMode</p> Enumerator Value Description RESERVED 0 Reserved, do not use. INACTIVE 1 Cap sensor is inactive. ACTIVE_AUTO_THRESHOLD 2 Cap sensor is active in automatic threshold mode. ACTIVE_NOISE_ATT 4 Cap sensor is active with noise mitigation enabled. ACTIVE_NORMAL 5 Cap sensor is active in normal mode. CONFIGURATION 6 Configuration mode. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceConfig/RunModes/","title":"Enum RunModes","text":""},{"location":"enums/DeviceConfig/RunModes/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration RunModes</p> Enumerator Value Description RUN_MODE 0 CALIBRATION_MODE 1 calibration mode CONFIGURATION_MODE 2 configuration mode DEBUG_MODE 3 debug mode TUNING_MODE 4 tuning mode <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceConfig/SafetyLimitType/","title":"Enum SafetyLimitType","text":""},{"location":"enums/DeviceConfig/SafetyLimitType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyLimitType</p> Enumerator Value Description UNSPECIFIED_SAFETY_LIMIT_TYPE 0 MINIMAL_LIMIT 1 Safety that will kick in below a certain Minimum threshold (e.g. Minimum temperature safety) MAXIMAL_LIMIT 2 Safety that will kick in above a certain Maximum threshold (e.g. Maximum voltage safety) EVENT_LIMIT 3 Safety that will kick in in reaction to a specific event (e.g. motor drive fault) <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceConfig/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/DeviceConfig/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"enums/DeviceManager/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/DeviceManager/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: DeviceManager (Python)</p>"},{"location":"enums/GripperConfig/RobotiqGripperStatusFlags/","title":"Enum RobotiqGripperStatusFlags","text":""},{"location":"enums/GripperConfig/RobotiqGripperStatusFlags/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration RobotiqGripperStatusFlags</p> Enumerator Value Description UNSPECIFIED_ROBOTIQ_STATUS 0 0x0 ROBOTIQ_STAT_INITIALIZED 1 0x01 ROBOTIQ_STAT_OBJECT_DETECTED 2 0x02 ROBOTIQ_STAT_POS_REACHED 4 0x04 ROBOTIQ_STAT_STOPPED 8 0x08 <p>Parent topic: GripperConfig (Python)</p>"},{"location":"enums/GripperConfig/SafetyIdentifier/","title":"Enum SafetyIdentifier","text":""},{"location":"enums/GripperConfig/SafetyIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyIdentifier</p> Enumerator Value Description UNSPECIFIED_ACTUATOR_SAFETY_IDENTIFIER 0 0x0 MAXIMUM_MOTOR_CURRENT 1 0x1 MAXIMUM_VOLTAGE 2 0x2 MINIMUM_VOLTAGE 4 0x4 MAXIMUM_MOTOR_TEMPERATURE 8 0x8 MAXIMUM_CORE_TEMPERATURE 16 0x10 NON_VOLATILE_MEMORY_CORRUPTED 32 0x20 EMERGENCY_LINE_ASSERTED 64 0x40 COMMUNICATION_TICK_LOST 128 0x80 WATCHDOG_TRIGGERED 256 0x100 <p>Parent topic: GripperConfig (Python)</p>"},{"location":"enums/GripperCyclic/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/GripperCyclic/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 CURRENT_VERSION 1 Current Version <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"enums/InterconnectConfig/EthernetDevice/","title":"Enum EthernetDevice","text":""},{"location":"enums/InterconnectConfig/EthernetDevice/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration EthernetDevice</p> Enumerator Value Description ETHERNET_DEVICE_UNSPECIFIED 0 Unspecified ethernet device ETHERNET_DEVICE_EXPANSION 1 Ethernet port located on the expansion connector <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/EthernetDuplex/","title":"Enum EthernetDuplex","text":""},{"location":"enums/InterconnectConfig/EthernetDuplex/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration EthernetDuplex</p> Enumerator Value Description ETHERNET_DUPLEX_UNSPECIFIED 0 Unspecified ethernet duplex ETHERNET_DUPLEX_HALF 1 Half duplex ETHERNET_DUPLEX_FULL 2 Full duplex <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/EthernetSpeed/","title":"Enum EthernetSpeed","text":""},{"location":"enums/InterconnectConfig/EthernetSpeed/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration EthernetSpeed</p> Enumerator Value Description ETHERNET_SPEED_UNSPECIFIED 0 Unspecified ethernet speed ETHERNET_SPEED_10M 1 10 Mbps ETHERNET_SPEED_100M 2 100 Mbps <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/GPIOIdentifier/","title":"Enum GPIOIdentifier","text":""},{"location":"enums/InterconnectConfig/GPIOIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GPIOIdentifier</p> Enumerator Value Description GPIO_IDENTIFIER_UNSPECIFIED 0 Unspecified GPIO identifier GPIO_IDENTIFIER_1 1 GPIO identifier 1 GPIO_IDENTIFIER_2 2 GPIO identifier 2 GPIO_IDENTIFIER_3 3 GPIO identifier 3 GPIO_IDENTIFIER_4 4 GPIO identifier 4 <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/GPIOMode/","title":"Enum GPIOMode","text":""},{"location":"enums/InterconnectConfig/GPIOMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GPIOMode</p> Enumerator Value Description GPIO_MODE_UNSPECIFIED 0 Unspecified GPIO mode GPIO_MODE_INPUT_FLOATING 1 Input floating GPIO_MODE_OUTPUT_PUSH_PULL 2 Output push-pull GPIO_MODE_OUTPUT_OPEN_DRAIN 3 Output open drain <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/GPIOPull/","title":"Enum GPIOPull","text":""},{"location":"enums/InterconnectConfig/GPIOPull/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GPIOPull</p> Enumerator Value Description GPIO_PULL_UNSPECIFIED 0 Unspecified GPIO pull GPIO_PULL_NONE 1 Pull none GPIO_PULL_UP 2 Pull up GPIO_PULL_DOWN 3 Pull down <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/GPIOValue/","title":"Enum GPIOValue","text":""},{"location":"enums/InterconnectConfig/GPIOValue/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration GPIOValue</p> Enumerator Value Description GPIO_VALUE_UNSPECIFIED 0 Unspecified GPIO value GPIO_VALUE_LOW 1 Low GPIO_VALUE_HIGH 2 High <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/I2CDevice/","title":"Enum I2CDevice","text":""},{"location":"enums/InterconnectConfig/I2CDevice/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration I2CDevice</p> Enumerator Value Description I2C_DEVICE_UNSPECIFIED 0 Unspecified I2C device I2C_DEVICE_EXPANSION 1 I2C device located on the expansion connector <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/I2CDeviceAddressing/","title":"Enum I2CDeviceAddressing","text":""},{"location":"enums/InterconnectConfig/I2CDeviceAddressing/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration I2CDeviceAddressing</p> Enumerator Value Description I2C_DEVICE_ADDRESSING_UNSPECIFIED 0 Unspecified device addressing I2C_DEVICE_ADDRESSING_7_BITS 1 7 bits device addressing I2C_DEVICE_ADDRESSING_10_BITS 2 10 bits device addressing <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/I2CMode/","title":"Enum I2CMode","text":""},{"location":"enums/InterconnectConfig/I2CMode/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration I2CMode</p> Enumerator Value Description I2C_MODE_UNSPECIFIED 0 Unspecified I2C mode I2C_MODE_STANDARD 1 Standard mode I2C_MODE_FAST 2 Fast mode I2C_MODE_FAST_PLUS 3 Fast plus mode <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/I2CRegisterAddressSize/","title":"Enum I2CRegisterAddressSize","text":""},{"location":"enums/InterconnectConfig/I2CRegisterAddressSize/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration I2CRegisterAddressSize</p> Enumerator Value Description I2C_REGISTER_ADDRESS_SIZE_UNSPECIFIED 0 Unspecified I2C register address size I2C_REGISTER_ADDRESS_SIZE_8_BITS 1 8 bits register address size I2C_REGISTER_ADDRESS_SIZE_16_BITS 2 16 bits register address size <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/SafetyIdentifier/","title":"Enum SafetyIdentifier","text":""},{"location":"enums/InterconnectConfig/SafetyIdentifier/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration SafetyIdentifier</p> Enumerator Value Description UNSPECIFIED_INTERCONNECT_SAFETY_IDENTIFIER 0 0x0 - Unspecified actuator safety MAXIMUM_MOTOR_CURRENT 1 0x1 - Maximum motor current MAXIMUM_VOLTAGE 2 0x2 - Maximum voltage MINIMUM_VOLTAGE 4 0x4 - Minimum voltage MAXIMUM_MOTOR_TEMPERATURE 8 0x8 - Maximum motor temperature MAXIMUM_CORE_TEMPERATURE 16 0x10 - Maximum core temperature NON_VOLATILE_MEMORY_CORRUPTED 32 0x20 - Non-volatile memory corrupted EMERGENCY_LINE_ASSERTED 64 0x40 - Emergency line asserted COMMUNICATION_TICK_LOST 128 0x80 - Communication tick lost WATCHDOG_TRIGGERED 256 0x100 - Watchdog triggered <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/InterconnectConfig/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectConfig/UARTPortId/","title":"Enum UARTPortId","text":""},{"location":"enums/InterconnectConfig/UARTPortId/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration UARTPortId</p> Enumerator Value Description UART_PORT_UNSPECIFIED 0 Unspecified UART port UART_PORT_EXPANSION 1 UART port located on the expansion connector <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"enums/InterconnectCyclic/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/InterconnectCyclic/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: InterconnectCyclic (Python)</p>"},{"location":"enums/ProductConfiguration/ArmLaterality/","title":"Enum ArmLaterality","text":""},{"location":"enums/ProductConfiguration/ArmLaterality/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ArmLaterality</p> Enumerator Value Description ARM_LATERALITY_UNSPECIFIED 0 Unspecified arm laterality ARM_LATERALITY_NOT_APPLICABLE 1 Not Applicable ARM_LATERALITY_LEFT 2 Left Laterality ARM_LATERALITY_RIGHT 3 Right Laterality <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/BaseType/","title":"Enum BaseType","text":""},{"location":"enums/ProductConfiguration/BaseType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration BaseType</p> Enumerator Value Description BASE_TYPE_UNSPECIFIED 0 Unspecified base type BASE_TYPE_L53_QUICK_CONNECT 1 L53 (Gen3) Quick Connect Base BASE_TYPE_L53_FIXED 2 L53 (Gen3) Fixed Base BASE_TYPE_L31_FIXED 3 L31 (PICO) Fixed Base BASE_TYPE_HDK_FIXED 4 HDK Fixed Base <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/EndEffectorType/","title":"Enum EndEffectorType","text":""},{"location":"enums/ProductConfiguration/EndEffectorType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration EndEffectorType</p> Enumerator Value Description END_EFFECTOR_TYPE_UNSPECIFIED 0 Unspecified end-effector type END_EFFECTOR_TYPE_NOT_INSTALLED 1 No gripper installed END_EFFECTOR_TYPE_L31_GRIPPER_2F 2 L31 (PICO) gripper, 2 fingers END_EFFECTOR_TYPE_ROBOTIQ_2F_85 3 Robotiq 2F-85 gripper, 2 fingers END_EFFECTOR_TYPE_ROBOTIQ_2F_140 4 Robotiq 2F-140 gripper, 2 fingers <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/InterfaceModuleType/","title":"Enum InterfaceModuleType","text":""},{"location":"enums/ProductConfiguration/InterfaceModuleType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration InterfaceModuleType</p> Enumerator Value Description INTERFACE_MODULE_TYPE_UNSPECIFIED 0 Unspecified interface module type INTERFACE_MODULE_TYPE_NOT_INSTALLED 1 Not Applicable / Not Installed INTERFACE_MODULE_TYPE_L53 2 L53 (Gen3) Interface Module INTERFACE_MODULE_TYPE_L31 3 L31 (PICO) Interface Module <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/ModelId/","title":"Enum ModelId","text":""},{"location":"enums/ProductConfiguration/ModelId/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ModelId</p> Enumerator Value Description MODEL_ID_UNSPECIFIED 0 Unspecified Model identification MODEL_ID_L53 1 Gen3 Ultra Lightweight Robot MODEL_ID_L31 2 PICO MODEL_ID_HDK 3 Hardware Development Kit <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/VisionModuleType/","title":"Enum VisionModuleType","text":""},{"location":"enums/ProductConfiguration/VisionModuleType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration VisionModuleType</p> Enumerator Value Description VISION_MODULE_TYPE_UNSPECIFIED 0 Unspecified vision module type VISION_MODULE_TYPE_NOT_INSTALLED 1 Not Applicable / Not Installed VISION_MODULE_TYPE_L53_2D3D 2 L53 (Gen3) Vision Module VISION_MODULE_TYPE_L53_2D 3 L53 (Gen3) Vision Module without 3D sensor VISION_MODULE_TYPE_EOD 4 EOD Vision Module <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/ProductConfiguration/WristType/","title":"Enum WristType","text":""},{"location":"enums/ProductConfiguration/WristType/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration WristType</p> Enumerator Value Description WRIST_TYPE_UNSPECIFIED 0 Unspecified wrist type WRIST_TYPE_NOT_APPLICABLE 1 Not Applicable WRIST_TYPE_SPHERICAL 2 Spherical Wrist WRIST_TYPE_CURVED 3 Curved Wrist <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"enums/Session/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/Session/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: Session (Python)</p>"},{"location":"enums/VisionConfig/BitRate/","title":"Enum BitRate","text":""},{"location":"enums/VisionConfig/BitRate/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration BitRate</p> Enumerator Value Description BITRATE_UNSPECIFIED 0 Unspecified bit rate (supported on depth sensor only) BITRATE_10_MBPS 1 10 Mbps maximum bit rate (supported on color sensor only) BITRATE_15_MBPS 2 15 Mbps maximum bit rate (supported on color sensor only) BITRATE_20_MBPS 3 20 Mbps maximum bit rate (supported on color sensor only) BITRATE_25_MBPS 4 25 Mbps maximum bit rate (supported on color sensor only) <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/FocusAction/","title":"Enum FocusAction","text":""},{"location":"enums/VisionConfig/FocusAction/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration FocusAction</p> Enumerator Value Description FOCUSACTION_UNSPECIFIED 0 Unspecified focus action FOCUSACTION_START_CONTINUOUS_FOCUS 1 Start continuous focus FOCUSACTION_PAUSE_CONTINUOUS_FOCUS 2 Pause continuous focus FOCUSACTION_FOCUS_NOW 3 Focus now (single-shot) FOCUSACTION_DISABLE_FOCUS 4 Disable focus FOCUSACTION_SET_FOCUS_POINT 5 Set a focus point FOCUSACTION_SET_MANUAL_FOCUS 6 Set the manual focus distance <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/FrameRate/","title":"Enum FrameRate","text":""},{"location":"enums/VisionConfig/FrameRate/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration FrameRate</p> Enumerator Value Description FRAMERATE_UNSPECIFIED 0 Unspecified frame rate FRAMERATE_6_FPS 1 6 frames per second (supported on depth sensor only) FRAMERATE_15_FPS 2 15 frames per second FRAMERATE_30_FPS 3 30 frame per second <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/Option/","title":"Enum Option","text":""},{"location":"enums/VisionConfig/Option/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Option</p> Enumerator Value Description OPTION_UNSPECIFIED 0 Unspecifed Option OPTION_BACKLIGHT_COMPENSATION 1 Enable / disable color backlight compensation (unsupported) OPTION_BRIGHTNESS 2 Color image brightness (supported on color sensor only: -4.0 to 4.0, step 1.0) OPTION_CONTRAST 3 Color image contrast (supported on color sensor only: -4.0 to 4.0, step 1.0) OPTION_EXPOSURE 4 Controls exposure time of color camera. Setting any value will disable auto exposure (supported on depth sensor only: 20.0 to 166000.0, step 20.0) OPTION_GAIN 5 Color image gain (supported on depth sensor only: 16.0 to 248.0, step 1.0) OPTION_GAMMA 6 Color image gamma setting (unsupported) OPTION_HUE 7 Color image hue (unsupported) OPTION_SATURATION 8 Color image saturation setting (supported on color sensor only: -4.0 to 4.0, step 1.0) OPTION_SHARPNESS 9 Color image sharpness setting (unsupported) OPTION_WHITE_BALANCE 10 Controls white balance of color image. Setting any value will disable auto white balance (unsupported) OPTION_ENABLE_AUTO_EXPOSURE 11 Enable / disable color image auto-exposure (supported on depth sensor only: 0.0 to 1.0, step 1.0) OPTION_ENABLE_AUTO_WHITE_BALANCE 12 Enable / disable color image auto-white-balance (unsupported) OPTION_VISUAL_PRESET 13 Provide access to several recommend sets of option presets for the depth camera (supported on depth sensor only: 0.0 to 5.0, step 1.0) OPTION_LASER_POWER 14 Power of the projector, with 0 meaning projector off (unsupported) OPTION_ACCURACY 15 Sets the number of patterns projected per frame. The higher the accuracy value the more patterns projected (unsupported) OPTION_MOTION_RANGE 16 Motion vs. Range trade-off, with lower values allowing for better motion sensitivity and higher values allowing for better depth range (unsupported) OPTION_FILTER_OPTION 17 Sets the filter to apply to each depth frame. Each one of the filter is optimized per the application requirements (unsupported) OPTION_CONFIDENCE_THRESHOLD 18 The confidence level threshold used by the Depth algorithm pipe to set whether a pixel will get a valid range or will be marked with invalid range (unsupported) OPTION_EMITTER_ENABLED 19 Laser Emitter enabled (unsupported) OPTION_FRAMES_QUEUE_SIZE 20 Number of frames the user is allowed to keep per stream. Trying to hold-on to more frames will cause frame-drops (supported on depth sensor only: 0.0 to 32.0, step 1.0) OPTION_TOTAL_FRAME_DROPS 21 Total number of detected frame drops from all streams (unsupported) OPTION_AUTO_EXPOSURE_MODE 22 Auto-Exposure modes: Static, Anti-Flicker and Hybrid (unsupported) OPTION_POWER_LINE_FREQUENCY 23 Power Line Frequency control for anti-flickering Off/50Hz/60Hz/Auto (unsupported) OPTION_ASIC_TEMPERATURE 24 Current Asic Temperature (supported on depth sensor only: Read Only -40.0 to 125.0) OPTION_ERROR_POLLING_ENABLED 25 Disable error handling (supported on depth sensor only: 0.0 to 1.0, step 1.0) OPTION_PROJECTOR_TEMPERATURE 26 Current Projector Temperature (unsupported) OPTION_OUTPUT_TRIGGER_ENABLED 27 Enable / disable trigger to be outputed from the camera to any external device on every depth frame (supported on depth sensor only: 0.0 to 1.0, step 1.0) OPTION_MOTION_MODULE_TEMPERATURE 28 Current Motion-Module Temperature (unsupported) OPTION_DEPTH_UNITS 29 Number of meters represented by a single depth unit (supported on depth sensor only: 0.0001 to 0.0100, step 0.000001) OPTION_ENABLE_MOTION_CORRECTION 30 Enable/Disable automatic correction of the motion data (unsupported) OPTION_AUTO_EXPOSURE_PRIORITY 31 Allows sensor to dynamically ajust the frame rate depending on lighting conditions (unsupported) OPTION_COLOR_SCHEME 32 Color scheme for data visualization (unsupported) OPTION_HISTOGRAM_EQUALIZATION_ENABLED 33 Perform histogram equalization post-processing on the depth data (unsupported) OPTION_MIN_DISTANCE 34 Minimal distance to the target (unsupported) OPTION_MAX_DISTANCE 35 Maximum distance to the target (unsupported) OPTION_TEXTURE_SOURCE 36 Texture mapping stream unique ID (unsupported) OPTION_FILTER_MAGNITUDE 37 The 2D-filter effect. The specific interpretation is given within the context of the filter (unsupported) OPTION_FILTER_SMOOTH_ALPHA 38 2D-filter parameter controls the weight/radius for smoothing (unsupported) OPTION_FILTER_SMOOTH_DELTA 39 2D-filter range/validity threshold (unsupported) OPTION_HOLES_FILL 40 Enhance depth data post-processing with holes filling where appropriate (unsupported) OPTION_STEREO_BASELINE 41 The distance in mm between the first and the second imagers in stereo-based depth cameras (supported on depth sensor only: 55.241055 to 55.241055, step 0.0) OPTION_AUTO_EXPOSURE_CONVERGE_STEP 42 Allows dynamically ajust the converge step value of the target exposure in Auto-Exposure algorithm (unsupported) <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/Resolution/","title":"Enum Resolution","text":""},{"location":"enums/VisionConfig/Resolution/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Resolution</p> Enumerator Value Description RESOLUTION_UNSPECIFIED 0 Unspecified resolution RESOLUTION_320x240 1 320 x 240 pixels (supported on color sensor only) RESOLUTION_424x240 2 424 x 240 pixels (supported on depth sensor only) RESOLUTION_480x270 3 480 x 270 pixels (supported on depth sensor only) RESOLUTION_640x480 4 640 x 480 pixels (supported on color sensor only) RESOLUTION_1280x720 5 1280 x 720 pixels (HD) (supported on color sensor only) RESOLUTION_1920x1080 6 1920 x 1080 pixels (full HD) (supported on color sensor only) <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/Sensor/","title":"Enum Sensor","text":""},{"location":"enums/VisionConfig/Sensor/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration Sensor</p> Enumerator Value Description SENSOR_UNSPECIFIED 0 Unspecified Sensor SENSOR_COLOR 1 Select the Vision module color sensor SENSOR_DEPTH 2 Select the Vision module depth sensor <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/ServiceVersion/","title":"Enum ServiceVersion","text":""},{"location":"enums/VisionConfig/ServiceVersion/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration ServiceVersion</p> Enumerator Value Description RESERVED_0 0 Reserved CURRENT_VERSION 1 Current version <p>Parent topic: VisionConfig (Python)</p>"},{"location":"enums/VisionConfig/VisionEvent/","title":"Enum VisionEvent","text":""},{"location":"enums/VisionConfig/VisionEvent/#overview-purpose","title":"Overview / Purpose","text":"<p>Enumeration VisionEvent</p> Enumerator Value Description UNSPECIFIED_VISION_EVENT 0 Unspecified vision event SENSOR_SETTINGS_CHANGED 1 Sensor setting changed event OPTION_VALUE_CHANGED 2 Option value changed event <p>Parent topic: VisionConfig (Python)</p>"},{"location":"examples/python/","title":"Python","text":"Python examples Table of Contents <ul> <li>Setup (Python environment)</li> <li>Required Python version and module</li> <li>Install Kortex Python API and required dependencies</li> <li>How to use the examples</li> <li>Python API documentation</li> <li>Reference<ul> <li>useful links</li> </ul> </li> <li>Back to root topic: readme.md</li> </ul>"},{"location":"examples/python/#setup-python-environment","title":"Setup (Python environment)","text":""},{"location":"examples/python/#required-python-version-and-module","title":"Required Python version and module","text":"<ul> <li>Python &gt;= 3.5</li> <li>pip</li> </ul> <p>Refer to the main README for Python installation details: parent readme</p> <p></p>"},{"location":"examples/python/#install-kortex-python-api-and-required-dependencies","title":"Install Kortex Python API and required dependencies","text":"<p>Install what is needed to run the examples via a downloaded whl file (Python wheel package).</p> <p>The whl file can be downloaded via the Kinova Artifactory: kortex_api </p> <p>On Linux:</p> <p><pre><code>python3 -m pip install &lt;whl relative fullpath name&gt;.whl\n</code></pre> Note: root privilege is usually required to install a new module under Linux.</p> <p>On Windows:</p> <pre><code>python -m pip install &lt;whl relative fullpath name&gt;.whl\n</code></pre> <p></p>"},{"location":"examples/python/#how-to-use-the-examples","title":"How to use the examples","text":"<p>We assume the robot is using its default IP address: <code>192.168.1.10</code></p> <p>Before starting, ensure that you run the test in a safe area with some examples that contain movement. Also, verify that your robot is correctly afixed to the working surface.</p> <p>Prerequisites: + The examples require a wired network connection to your computer + Configure a static IP address on your network interface (e.g. <code>192.168.1.11/24</code>)</p> <p>Now you're ready to run the examples. Each Python example has its own <code>__main__</code> instruction. You need only to <code>cd</code> into the example directory and invoke the Python file using the command:</p> <ul> <li>On Linux: <pre><code>python3 &lt;example-file&gt;.py\n</code></pre></li> <li>On Windows: <pre><code>python &lt;example-file&gt;.py\n</code></pre></li> </ul> <p></p>"},{"location":"examples/python/#python-api-documentation","title":"Python API documentation","text":"<p>Here's a link to the generated documentation Python API Services Documentation </p> <p></p>"},{"location":"examples/python/#reference","title":"Reference","text":""},{"location":"examples/python/#useful-links","title":"useful links","text":"Google Proto Buffer generated Python: https://developers.google.com/protocol-buffers/docs/reference/python-generated"},{"location":"examples/python/#back-to-root-topic-readmemd","title":"Back to root topic: readme.md","text":""},{"location":"linked_md/NotificationTopics/","title":"Subscribing to Notifications","text":"<p>In order to receive notifications on a topic, a program must subscribe to it using the following syntax:</p> <p>C++ <pre><code>service-&gt;OnNotification&lt;$TopicName$&gt;(callback, NotificationOptions)\n</code></pre></p> <p>Python <pre><code>service.OnNotification&lt;$TopicName$&gt;(callback, NotificationOptions)\n</code></pre></p> <p>Where: * <code>service</code> is the API service responsible for publishing * <code>&lt;$TopicName$&gt;</code> should be replaced by the appropriate topic name * <code>callback</code> is a user-defined callback function * <code>NotificationOptions</code> is an empty NotificationOptions object</p> <p>Below is a list of all the topics made available by each service.</p>"},{"location":"linked_md/NotificationTopics/#list-of-available-notification-topics","title":"List of available Notification Topics","text":"Service Topic name Description Example Base ConfigurationChangeTopic Publishes on any configuration change Action is modified Base MappingInfoTopic Publishes on Controler mapping change Set user-defined XBox controller mapping Base OperatingModeTopic Publishes on Operating mode change Robot operating mode switches to UPDATING_DEVICE_MODE Base SequenceInfoTopic Publishes on Sequence progress Sequence current action is COMPLETE Base ProtectionZoneTopic Publishes on interaction with Protection Zones Protection zone is entered Base UserTopic Publishes on User activity User Logged in Base ControllerTopic Publishes on Controller activity XBox controller axis 1 set to -1 Base ActionTopic Publishes on Action activity Action is started Base RobotEventTopic Publishes on Robot Event Tool was disconnected Base ServoingModeTopic Publishes on Servoing mode change Robot is set to LOW_LEVEL servoing Base FactoryTopic Publishes on Factory activity Factory reset is complete Base NetworkTopic Publishes on Network activity Connected to Wi-Fi network Base ArmStateTopic Publishes on Arm State activity Arm state changes to ARMSTATE_SERVOING_PLAYING_SEQUENCE ControlConfig ControlConfigurationTopic Publishes on Control Configuration change Gravity vector was changed ControlConfig ControlModeTopic Publishes on Control mode event Switch control mode to joystick DeviceConfig SafetyTopic Publishes on Safety-related activity Robot error was raised VisionConfig VisionTopic Publishes on vision configuration change Focus action complete"},{"location":"linked_md/cpp_api_mechanism/","title":"Cpp api mechanism","text":"C++ API mechanism Table of Contents <ul> <li>Overview</li> <li>Blocking method</li> <li>Callback<ul> <li>Example using lambda</li> <li>Example using C callback</li> </ul> </li> <li>Async function</li> </ul>"},{"location":"linked_md/cpp_api_mechanism/#overview","title":"Overview","text":"<p>The C++ Kortex API offers three mechanisms to call a method, one blocking, and two non-blocking: </p> <ol> <li>standard blocking method</li> <li>callback function version, and </li> <li>async method</li> </ol> <p></p>"},{"location":"linked_md/cpp_api_mechanism/#blocking-method","title":"Blocking method","text":"<p>The first mechanism offered by the Kortex API is to use a blocking method (blocking call). If a procedural approach suffices, this is the easiest option. The method is called and execution is blocked until the result is returned by the server side.</p> <pre><code>// Execution will be blocked until GetAllJointsSpeedHardLimitation has completed its execution.\nauto limitations = base-&gt;GetAllJointsSpeedHardLimitation();\n</code></pre> <p></p>"},{"location":"linked_md/cpp_api_mechanism/#callback","title":"Callback","text":"<p>You can also call a method and specify a callback function that will be called when the answer from the server side is received. The callback function is passed in as an additional argument to the method. Either an anonymous function (lambda) can be used as a callback function, or a named function.</p> <p>The name of the callback version method is that used in the blocking call version, but with '_callback' appended to the name, i.e. <code>MethodName_callback()</code>.</p> <p></p>"},{"location":"linked_md/cpp_api_mechanism/#example-using-lambda","title":"Example using lambda","text":"<pre><code>// Callback function used in Refresh_callback\nauto lambda_fct_callback = [](const Kinova::Api::Error &amp;err, const k_api::BaseCyclic::Feedback data)\n{\n// We are printing the data for example purpose\nstd::string serialized_data;\ngoogle::protobuf::util::MessageToJsonString(data, &amp;serialized_data);\nstd::cout &lt;&lt; serialized_data &lt;&lt; std::endl;\n};\n\nbase_cyclic-&gt;Refresh_callback(base_command, lambda_fct_callback, 0);\n</code></pre>"},{"location":"linked_md/cpp_api_mechanism/#example-using-c-callback","title":"Example using C callback","text":"<pre><code>namespace k_api = Kinova::Api;\n\nvoid print_limitations(const k_api::Base::JointsLimitationsList&amp; limitations)\n{\nstd::cout &lt;&lt; \"============================================\" &lt;&lt; std::endl;\nfor(auto limitation : limitations.joints_limitations())\n{\nstd::cout &lt;&lt; \"Joint: \" &lt;&lt; limitation.joint_identifier() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Type of limitation: \" &lt;&lt; k_api::Base::LimitationType_Name(limitation.type()) &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Value: \" &lt;&lt; limitation.value() &lt;&lt; std::endl &lt;&lt; std::endl;\n}\nstd::cout &lt;&lt; \"============================================\" &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\n// Callback function used in Refresh_callback\nvoid function_callback(const k_api::Error&amp; err, const k_api::Base::JointsLimitationsList&amp; limitations)\n{\nstd::cout &lt;&lt; \"Callback function results: \" &lt;&lt; std::endl &lt;&lt; std::endl;\nprint_limitations(limitations);\n}\n\nvoid example_function_call()\n{\nbase-&gt;GetAllJointsSpeedHardLimitation_callback(function_callback);\n}\n</code></pre>"},{"location":"linked_md/cpp_api_mechanism/#async-method","title":"Async method","text":"<p>The last mechanism offered by the Kortex API is an async function that uses the future/promise process. The user calls the async version of the method and then waits until the promise is completed and the future object is returned. </p> <p>The name of the async version method is that used in the blocking call version, but with '_async' appended to the name, i.e. <code>MethodName_async()</code>.</p> <p>The async method is preferred when the user wants to call many functions in a short window of time. For example, if for some reason you want to talk directly to many actuators without using the robot's base synchronization process, using the async method could be a solution.</p> <pre><code>namespace k_api = Kinova::Api;\n\nvoid print_limitations(const k_api::Base::JointsLimitationsList&amp; limitations)\n{\nstd::cout &lt;&lt; \"============================================\" &lt;&lt; std::endl;\nfor(auto limitation : limitations.joints_limitations())\n{\nstd::cout &lt;&lt; \"Joint: \" &lt;&lt; limitation.joint_identifier() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Type of limitation: \" &lt;&lt; k_api::Base::LimitationType_Name(limitation.type()) &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Value: \" &lt;&lt; limitation.value() &lt;&lt; std::endl &lt;&lt; std::endl;\n}\nstd::cout &lt;&lt; \"============================================\" &lt;&lt; std::endl &lt;&lt; std::endl;\n}\n\nvoid example_future_function_call(k_api::Base::BaseClient* base)\n{\n// The function returns a future object, and not a workable object.\nstd::future&lt;k_api::Base::JointsLimitationsList&gt; limitations_future_async = base-&gt;GetAllJointsSpeedHardLimitation_async();\n\n// Waiting for the promise to be completed by the API.\nauto timeout_ms = std::chrono::milliseconds(10000);\nstd::future_status status = limitations_future_async.wait_for(timeout_ms);\nif(status != std::future_status::ready)\n{\nthrow std::runtime_error(\"Timeout detected while waiting for function\\n\");\n}\n\n// Retrieve the workable object from the future object.\nauto limitations_async = limitations_future_async.get();\nstd::cout &lt;&lt; \"Future function results: \" &lt;&lt; std::endl &lt;&lt; std::endl;\nprint_limitations(limitations_async);\n}\n</code></pre>"},{"location":"linked_md/cpp_device_routing/","title":"Cpp device routing","text":"Device routing Table of Contents <ul> <li>Overview</li> <li>Device Manager service<ul> <li>Service description</li> <li>Good to know</li> <li>Example</li> </ul> </li> <li>Device Config service<ul> <li>Service description</li> <li>Example</li> </ul> </li> <li>Other Services<ul> <li>Example</li> </ul> </li> </ul>"},{"location":"linked_md/cpp_device_routing/#overview","title":"Overview","text":"<p>Device routing is a mechanism that allows users to send commands to specific devices using the connection with the base.  This is done by specifying a device_identifier when sending a command through a service. This service doesn't need to be implemented by the base.</p> <p>In other words, you can send a command to a sub device with a service known only by the sub device (e.g.: <code>ActuatorConfigClient</code>) as long as the device_identifier is specified as an additional command parameter.</p> <p>The Device Manager service is used to obtain the device_identifier.</p> <p></p>"},{"location":"linked_md/cpp_device_routing/#device-manager-service","title":"Device Manager service","text":""},{"location":"linked_md/cpp_device_routing/#service-description","title":"Service description","text":"<p>The Device Manager service contains a method <code>ReadAllDevices()</code> which returns a device handle list containing handles for all current devices in the robot.</p> <p></p>"},{"location":"linked_md/cpp_device_routing/#good-to-know","title":"Good to know","text":"<ul> <li>The device handle list returned by <code>ReadAllDevices()</code> is not in any particular order with respect to the location of devices in the robot.</li> <li>Device handles also have a device_type field and an order field.</li> </ul>"},{"location":"linked_md/cpp_device_routing/#example","title":"Example","text":"<pre><code>namespace k_api = Kinova::Api;\n\n/* API initialisation */\nauto device_manager = new k_api::DeviceManager::DeviceManagerClient(router);\nauto allDevicesInfo = device_manager-&gt;ReadAllDevices();\n</code></pre>"},{"location":"linked_md/cpp_device_routing/#device-config-service","title":"Device Config service","text":""},{"location":"linked_md/cpp_device_routing/#service-description_1","title":"Service description","text":"<p>The Device Config service provides information about the device being interrogated, including: - device type - firmware and bootloader version - part and serial numbers - MAC address and  - hardware revision</p> <p></p>"},{"location":"linked_md/cpp_device_routing/#example_1","title":"Example","text":"<pre><code>namespace k_api = Kinova::Api;\n\n/* API initialisation */\nauto device_manager = new k_api::DeviceManager::DeviceManagerClient(router);\nauto device_config = new k_api::DeviceConfig::DeviceConfigClient(router);\n\n// Get all device routing information (from DeviceManagerClient service)\nauto allDevicesInfo = device_manager-&gt;ReadAllDevices();\n\nk_api::RouterClientSendOptions options;\noptions.timeout_ms = 4000;  // (milliseconds)\n\n// Use device routing information to route to every device (base, actuator, interconnect, etc.) in the arm base system and request general device information\nfor (auto device : allDevicesInfo.device_handle())\n{\n\nstd::cout &lt;&lt; \"-----------------------------\\n\";\nstd::cout &lt;&lt; \"-- \" &lt;&lt; k_api::Common::DeviceTypes_Name(device.device_type()) &lt;&lt; \": id = \" &lt;&lt; device.device_identifier() &lt;&lt; \" --\\n\";\n\nstd::string str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetDeviceType(device.device_identifier(), options), &amp;str);\nstd::cout &lt;&lt; str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetFirmwareVersion(device.device_identifier(), options), &amp;str);\nstd::cout &lt;&lt; str; google::protobuf::TextFormat::PrintToString(device_config-&gt;GetBootloaderVersion(device.device_identifier(), options), &amp;str); std::cout &lt;&lt; str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetModelNumber(device.device_identifier(), options), &amp;str);\nstd::cout &lt;&lt; str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetPartNumber(device.device_identifier(), options), &amp;str);     std::cout &lt;&lt; str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetPartNumberRevision(device.device_identifier(), options), &amp;str);\nstd::cout &lt;&lt; str;\ngoogle::protobuf::TextFormat::PrintToString(device_config-&gt;GetSerialNumber(device.device_identifier(), options), &amp;str);   std::cout &lt;&lt; str;\nstd::cout &lt;&lt; std::endl;\n}\n</code></pre>"},{"location":"linked_md/cpp_device_routing/#other-services","title":"Other Services","text":"<p>The device_identifier can be used by other services to directly interrogate a device.</p> <p></p>"},{"location":"linked_md/cpp_device_routing/#example_2","title":"Example","text":"<pre><code>namespace k_api = Kinova::Api;\n\n/* API initialisation */\nauto device_manager = new k_api::DeviceManager::DeviceManagerClient(router);\nauto vision_config = new k_api::VisionConfig::VisionConfigClient(router);\n\nauto allDevicesInfo = device_manager-&gt;ReadAllDevices();\n\n// uses device routing information to route to every device (base, actuator, interconnect, etc.)\nfor (auto dev : allDevicesInfo.device_handle())\n{   if (dev.device_type() == k_api::Common::DeviceTypes::VISION)\n{\nstd::cout &lt;&lt; \"-- Using Vision Config Service to get intrinsic parameters --\" &lt;&lt; std::endl;\nk_api::VisionConfig::SensorIdentifier sensor_id;\nsensor_id.set_sensor(k_api::VisionConfig::SENSOR_COLOR);\n\n// We can now use the Vision service with the base connection by specifing the device_identifier\nauto intrinsic_value = vision_config-&gt;GetIntrinsicParameters(sensor_id, dev.device_identifier());\n\nstd::cout &lt;&lt; \"Width: \" &lt;&lt; intrinsic_value.width() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Height: \" &lt;&lt; intrinsic_value.height() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Principal point x: \" &lt;&lt; intrinsic_value.principal_point_x() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Principal point y: \" &lt;&lt; intrinsic_value.principal_point_y() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Focal length x: \" &lt;&lt; intrinsic_value.focal_length_x() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Focal length y: \" &lt;&lt; intrinsic_value.focal_length_y() &lt;&lt; std::endl;\n\nbreak;\n}\n}\n</code></pre>"},{"location":"linked_md/cpp_error_management/","title":"Cpp error management","text":"Error management Table of Contents <ul> <li>Overview</li> <li>Blocking method<ul> <li>Example</li> <li>KDetailedException</li> <li>KError</li> </ul> </li> <li>Callback<ul> <li>Example using lambda</li> <li>Example using C callback</li> </ul> </li> <li>Async method<ul> <li>Async example</li> </ul> </li> <li>Special case<ul> <li>RouterClient</li> </ul> </li> </ul>"},{"location":"linked_md/cpp_error_management/#overview","title":"Overview","text":"<p>There are three mechanisms available to manage errors triggered by the C++ Kortex API:  - standard <code>Exception</code> - accessing the <code>Error</code> object returned by the callback function, and  - catching the exception thrown by a <code>std::future</code>. </p> <p>When you use the Kortex API, the mechanism to be used depends on the type of called method:</p> <ul> <li>With the blocking method, use standard <code>Exception</code>.</li> <li>With the callback version of a method, use the <code>Error</code> object provided in the callback header.</li> <li>With the async version of a method, use the <code>Exception</code> thrown by the future.</li> </ul> <p>Note that there is a special case explained at the end of this section.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#blocking-method","title":"Blocking method","text":"<p>Exceptions are only used if a blocking or async function is used. The code is surrounded with a try/catch statement pair and to catch any exceptions. The Kortex API offers its own exception object: <code>Kinova::Api::KDetailedException</code>.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#example","title":"Example","text":"<pre><code>try\n{\n// Your code...\n}\ncatch(k_api::KDetailedException&amp; ex)\n{\n// You can print the error informations and error codes\nauto error_info = ex.getErrorInfo().getError();\nstd::cout &lt;&lt; \"KDetailedoption detected what:  \" &lt;&lt; ex.what() &lt;&lt; std::endl;\n\nstd::cout &lt;&lt; \"KError error_code: \" &lt;&lt; error_info.error_code() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"KError sub_code: \" &lt;&lt; error_info.error_sub_code() &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"KError sub_string: \" &lt;&lt; error_info.error_sub_string() &lt;&lt; std::endl;\n\n// Error codes by themselves are not very verbose if you don't see their corresponding enum value\n// You can use google::protobuf helpers to get the string enum element for every error code and sub-code \nstd::cout &lt;&lt; \"Error code string equivalent: \" &lt;&lt; k_api::ErrorCodes_Name(k_api::ErrorCodes(error_info.error_code())) &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"Error sub-code string equivalent: \" &lt;&lt; k_api::SubErrorCodes_Name(k_api::SubErrorCodes     (error_info.error_sub_code())) &lt;&lt; std::endl;\n}\n</code></pre> <p>Here are the details of the object <code>Kinova::Api::KDetailedException</code> thrown by the Kortex API.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#kdetailedexception","title":"KDetailedException","text":"<pre><code>class KDetailedException : public KBasicException\n{\npublic:\nKDetailedException(const KError&amp; error);\nKDetailedException(const KDetailedException &amp;other);\n\nvirtual const char* what() const throw() override;\nvirtual std::string toString() override;\n\nKError&amp;      getErrorInfo() { return m_error; }\n\nprivate:\nvoid init(const HeaderInfo&amp; header, const Error&amp; error);\n\nKError       m_error;\nstd::string  m_errorStr;\n};\n</code></pre> <p>Here are the details of the object <code>KError</code> nested in the exception.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#kerror","title":"KError","text":"<pre><code>class KError\n{\npublic:\nKError(Kinova::Api::ErrorCodes errorCode, Kinova::Api::SubErrorCodes errorSubCode, std::string errorDescription);\nKError(const HeaderInfo&amp; header, Kinova::Api::ErrorCodes errorCode, Kinova::Api::SubErrorCodes errorSubCode, std::string errorDescription);\nKError(const Error&amp; error);\nKError(const HeaderInfo&amp; header, const Error&amp; error);\n\nstatic Error fillError(Kinova::Api::ErrorCodes errorCode, Kinova::Api::SubErrorCodes errorSubCode, std::string errorDescription);\n\nstd::string toString() const;\n\nbool            isThereHeaderInfo();\nHeaderInfo      getHeader();\nError           getError();\n\nKError&amp; operator =(const KError&amp; other) = default;\n\nprivate:\nbool            m_isThereHeaderInfo;\nHeaderInfo      m_header;\nError           m_error;\n};\n</code></pre> <p>The <code>KError</code> object holds an error code and a sub error code to identify the fault.</p> <p>Here is a link to documentation explaining all of the error and sub error codes:</p> <ul> <li>Error code</li> <li>Sub error code</li> </ul> <p></p>"},{"location":"linked_md/cpp_error_management/#callback","title":"Callback","text":"<p>If the callback version is used, a <code>std::function</code> is given as a parameter to act as a callback. The header of this <code>std::function</code> includes an Error object containing the error returned by the execution. Since it is a <code>std::function</code>, you can either use a lambda expression or a standard C callback.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#example-using-lambda","title":"Example using lambda","text":"<pre><code>// callback function used in Refresh_callback\nauto lambda_fct_callback = [](const Kinova::Api::Error &amp;err, const k_api::BaseCyclic::Feedback data)\n{\n// We are printing the data for example purposes\n// avoid this for a real-time loop \n\nstd::string serialized_data;\ngoogle::protobuf::util::MessageToJsonString(data, &amp;serialized_data);\nstd::cout &lt;&lt; serialized_data &lt;&lt; std::endl;\n};\n\nbase_cyclic-&gt;Refresh_callback(BaseCommand, lambda_fct_callback, 0);\n</code></pre>"},{"location":"linked_md/cpp_error_management/#example-using-c-callback","title":"Example using C callback","text":"<pre><code>// callback function used in Refresh_callback\nvoid fct_callback(const k_api::Error &amp;err, const k_api::BaseCyclic::Feedback data)\n{\nstd::cout &lt;&lt; \"Callback function results: \" &lt;&lt; std::endl;\n//react to the fault...\n}\n\nvoid example_function_call()\n{\nbase_cyclic-&gt;Refresh_callback(BaseCommand, fct_callback, 0);\n}\n</code></pre>"},{"location":"linked_md/cpp_error_management/#async-method","title":"Async method","text":"<p>If an async function is used, exceptions must be used to catch any error triggered by the Kortex API. The exception is thrown during the execution of the <code>get()</code> function.</p> <p></p>"},{"location":"linked_md/cpp_error_management/#async-example","title":"Async example","text":"<pre><code>// The function returns a future object, and not a workable object.\nstd::future&lt;k_api::Base::JointsLimitationsList&gt; limitations_future_async = base-&gt;GetAllJointsSpeedHardLimitation_async();\n\n// Waiting for the promise to be completed by the API.\nauto timeout_ms = std::chrono::milliseconds(10000);\nstd::future_status status = limitations_future_async.wait_for(timeout_ms);\n\nif(status != std::future_status::ready)\n{\nthrow std::runtime_error(\"Timeout detected while waiting for function\\n\");\n}\n\n// Retrieve the workable object from the future object.\ntry\n{\nauto limitations_async = limitations_future_async.get();\n}\ncatch(k_api::KDetailedException&amp; ex)\n{\n// Respond to the fault\n}\n</code></pre>"},{"location":"linked_md/cpp_error_management/#special-case","title":"Special case","text":"<p>This section describes a case that doesn't follow the standard error management rules documented earlier in this document.</p>"},{"location":"linked_md/cpp_error_management/#routerclient","title":"RouterClient","text":"<p>When a RouterClient object is instantiated a callback can be specified for execution when an error occurs. <pre><code>RouterClient* router = new RouterClient(pTransport, [](KError err){ cout &lt;&lt; \"callback error\" &lt;&lt; err.toString(); });\n</code></pre></p>"},{"location":"linked_md/cpp_servoing_modes/","title":"Cpp servoing modes","text":"Servoing Mode Table of Contents <ul> <li>Overview</li> <li>Setting servoing mode<ul> <li>High level servoing mode</li> <li>Low level servoing mode</li> </ul> </li> </ul>"},{"location":"linked_md/cpp_servoing_modes/#overview","title":"Overview","text":"<p>There are multiple servoing modes on the robot. A servoing mode allows commands to be transmitted to the robot devices during operation. Depending on the servoing mode chosen, the details for API control will be different.</p> <p></p>"},{"location":"linked_md/cpp_servoing_modes/#setting-servoing-mode","title":"Setting servoing mode","text":"<p>The RPC to set the servoing mode is in the Base service</p> <pre><code>// API initialisation\nk_api::Base::BaseClient* base = new k_api::Base::BaseClient(pRouter);\n\n// Sets the base in low level servoing\nauto servoingMode = k_api::Base::ServoingModeInformation();\nservoingMode.set_servoing_mode(k_api::Base::ServoingMode::LOW_LEVEL_SERVOING); //Enum type\nbase-&gt;SetServoingMode(servoingMode);\n</code></pre> <p></p>"},{"location":"linked_md/cpp_servoing_modes/#high-level-servoing-mode","title":"High level servoing mode","text":"<p>High-level servoing is the default servoing mode for the robot on bootup.</p> <p>In high-level servoing, users connect to the base through the API, sending command inputs. The base routes commands to the actuators, and manages a 1 kHz control loop.</p> <p>High-level servoing is the recommended servoing mode for non-advanced users, because you have access to Cartesian movement and don't have to manage a 1kHz control loop to send commands to the robot. </p> <p></p>"},{"location":"linked_md/cpp_servoing_modes/#low-level-servoing-mode","title":"Low level servoing mode","text":"<p>In low-level servoing, the API client connects to the base and sends commands through the base for routing. Take note that this mode does not support Cartesian commands.</p> <p>The base ensures device routing and internal communications with the actuators at 1 kHz, but the high-level functionalities for the base control loop (Cartesian movement, robot kinematics, trajectory management, etc.) are no longer available.</p> <p>Low-level servoing allows clients to control each actuator individually by sending small position increments at a 1 kHz frequency (bypassing the kinematic control library).</p> <p>You can have a look at the actuator low-level cyclic example for a code example.</p>"},{"location":"linked_md/cpp_transport_router_session_notif/","title":"Cpp transport router session notif","text":"TransportClient, RouterClient, SessionManager and NotificationHandler Table of Contents <ul> <li>Overview</li> <li>TransportClient classes</li> <li>RouterClient class</li> <li>SessionManager</li> <li>NotificationHandler</li> </ul>"},{"location":"linked_md/cpp_transport_router_session_notif/#overview","title":"Overview","text":"<p>This section covers communication with the robot base, in both directions. Connections with the robot base are enabled by: - Transport classes - Router class - Session Manager</p> <p>Once the connection is established, commands can be sent to the robot base and corresponding responses received. </p> <p>To receive unsolicited messages from the robot base, the notification handler must be implemented.</p> <p></p>"},{"location":"linked_md/cpp_transport_router_session_notif/#transportclient-classes","title":"TransportClient classes","text":"<p><code>TransportClient</code> classes are used to instantiate an object which identifies the robot base being connected to, by specifying an IP address and port number.</p> <p>Kinova provides two pre-defined <code>TransportClient</code> object types:</p> <ul> <li><code>TransportClientTcp</code> - using TCP as a transport protocol</li> <li><code>TransportClientUdp</code> - using UDP as a transport protocol</li> </ul> <p><code>TransportClientTcp</code> is used for high-level robot control, configuration, and any other purposes not requiring sending commands at high frequency.</p> <p><code>TransportClientUdp</code> can only be used for low-level cyclic communication at 1kHz with the robot via the <code>Kinova::Api::BaseCyclic</code> service. </p> <pre><code>namespace k_api = Kinova::Api;\n\nk_api::TransportClientTcp* transport = new k_api::TransportClientTcp();\ntransport-&gt;connect(IP_ADDRESS, PORT);\n</code></pre> <p><code>TransportClientUdp</code> and <code>TransportClientTcp</code> are both sub-classes of an interface provided called <code>ITransportClient</code>. This interface allows you to implement your own transport. Here is the list of functions in the interface:</p> <pre><code>// connect to a specified robot base\nvirtual bool connect(std::string host, uint32_t port) = 0;\n// disconnect from the base\nvirtual void disconnect() = 0;\n// send a message\nvirtual void send(const char* txBuffer, uint32_t txSize) = 0;\n// handler for received messages\nvirtual void onMessage(std::function&lt;void (const char*, uint32_t)&gt; callback) = 0;\n// obtain a transmission buffer for holding content of outgoing messages\nvirtual char* getTxBuffer() = 0;\n// obtain maximum size of transmission buffer\nvirtual size_t getMaxTxBufferSize() = 0;\n</code></pre> <p></p>"},{"location":"linked_md/cpp_transport_router_session_notif/#routerclient-class","title":"RouterClient class","text":"<p>The <code>RouterClient</code> class is used to instantiate an object which sends the command to the robot base specified by a <code>TransportClient</code> object. A <code>RouterClient</code> object needs a <code>TransportClient</code> object to work. </p> <p>The purpose of the router is to transmit to the robot base all commands sent through the services. It will also manage all messages sent and received by that service. A router needs to be specified each time a new service is declared.</p> <p>To handle cases where there is a connection problem with the robot base, a callback method needs to be provided.</p> <pre><code>namespace k_api = Kinova::Api;\n\nk_api::TransportClientTcp* transport = new k_api::TransportClientTcp();\n\nk_api::RouterClient* router = new k_api::RouterClient(transport, [](k_api::KError err){ std::cout &lt;&lt; \"_________ callback error _________\" &lt;&lt; err.toString(); });\n\ntransport-&gt;connect(IP_ADDRESS, PORT);\n</code></pre> <p></p>"},{"location":"linked_md/cpp_transport_router_session_notif/#sessionmanager","title":"SessionManager","text":"<p>The <code>SessionManager</code> object will manage the connection to the robot base for a specified user. If no <code>SessionManager</code> is declared on an active connection, the robot base will not answer commands. A <code>SessionManager</code> object requires a <code>RouterClient</code> object. The <code>SessionManager</code> will also manage the connection to ensure that it is still alive if sent commands take too long to execute.</p> <pre><code>namespace k_api = Kinova::Api;\n\nk_api::TransportClientTcp* transport = new k_api::TransportClientTcp();\n\nk_api::RouterClient* router = new k_api::RouterClient(transport, [](k_api::KError err){ std::cout &lt;&lt; \"_________ callback error _________\" &lt;&lt; err.toString(); });\n\ntransport-&gt;connect(IP_ADDRESS, PORT);\n\nauto createSessionInfo = k_api::Session::CreateSessionInfo();\ncreateSessionInfo.set_username(\"admin\");\ncreateSessionInfo.set_password(\"admin\");\ncreateSessionInfo.set_session_inactivity_timeout(60000);   // (milliseconds)\ncreateSessionInfo.set_connection_inactivity_timeout(2000); // (milliseconds)\n\nk_api::SessionManager* session_manager = new k_api::SessionManager(router);\nsession_manager-&gt;CreateSession(createSessionInfo);\n</code></pre> <p></p>"},{"location":"linked_md/cpp_transport_router_session_notif/#notificationhandler","title":"NotificationHandler","text":"<p>The robot base provides notifications on different topics as requested by a client application that has a session open with the robot. The robot base uses a Publish/Subscribe design pattern. Rather than polling periodically for updates, the client application subscribes to a list of topics. Whenever a change happens related to that topic, whether caused by the same client session or not, the publisher sends a notification to all subscribers.</p> <pre><code>/*\nIn this example, when a user is created `notification_callback` will be called because we register it as a\nhandler for `ConfigurationChange` topic notifications.\n*/\nauto notification_callback = [](k_api::Base::ConfigurationChangeNotification data)\n{\nstd::string jsonString = \"\";\ngoogle::protobuf::util::MessageToJsonString(data, &amp;jsonString);\nstd::cout &lt;&lt; \"********************************\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"**  Callback function called  **\" &lt;&lt; std::endl;\nstd::cout &lt;&lt; jsonString &lt;&lt; std::endl;\nstd::cout &lt;&lt; \"********************************\" &lt;&lt; std::endl;\n};\n\n// Subscribe to ConfigurationChange notifications\nauto notifHandle = base-&gt;OnNotificationConfigurationChangeTopic(notification_callback, k_api::Common::NotificationOptions());\n</code></pre>"},{"location":"linked_md/modbus_icd/","title":"Modbus icd","text":""},{"location":"linked_md/modbus_icd/#icd","title":"ICD","text":"<p>All the data is formatted according to this: - byte order: Big endian - word order: Little endian</p>"},{"location":"linked_md/modbus_icd/#discrete-inputs-read-only","title":"Discrete inputs (read only)","text":"<p>The following section lists a series of addresses to read ON/OFF statuses from robot</p> <p>Applicable Modbus function code:</p> <ul> <li>Function Code 02 (Read Discrete Inputs)</li> </ul>"},{"location":"linked_md/modbus_icd/#robot-state","title":"Robot state","text":"Type Unit Address Description Supported platform bool N/A 0 Unspecified arm state. ALL bool N/A 1 Cannot be reported as the Base initialisation must be completed before allowing user connection. ALL bool N/A 2 Base initialisation succeeded. ALL bool N/A 3 Arm is being initialised. ALL bool N/A 4 Arm is in fault. ALL bool N/A 5 Arm is in maintenance. ALL bool N/A 6 Arm is in low-level servoing mode. ALL bool N/A 7 Arm is ready to be controlled. ALL bool N/A 8 Arm is currently being controlled via a sequence. ALL bool N/A 9 Arm is currently being controlled manually. ALL"},{"location":"linked_md/modbus_icd/#robot-fault-flags","title":"Robot fault flags","text":"Type Unit Address Description Supported platform bool N/A 32 Firmware update failure. ALL bool N/A 34 Maximum ambient temperature reached. ALL bool N/A 35 Maximum core temperature reached. ALL bool N/A 36 Joint fault. ALL bool N/A 40 Above maximum DOF. ALL bool N/A 42 Unable to reach pose. ALL bool N/A 43 Joint detection error. ALL bool N/A 44 Network initialisation error. ALL bool N/A 45 Maximum current reached. ALL bool N/A 46 Maximum voltage reached. ALL bool N/A 47 Minimum voltage reached. ALL bool N/A 55 Emergency stop activated. ALL bool N/A 56 Emergency line activated. ALL bool N/A 57 In rush current limiter fault. ALL bool N/A 58 NVRAM corrupted (not implemented yet). ALL bool N/A 59 Incompatible firmware version. ALL bool N/A 60 Power on self test failure. ALL bool N/A 61 Discrete Input stuck active. ALL bool N/A 62 Arm is in an illegal position (singularity). ALL"},{"location":"linked_md/modbus_icd/#robot-warning-flags","title":"Robot warning flags","text":"Type Unit Address Description Supported platform bool N/A 64 Firmware update failure. ALL bool N/A 66 Maximum ambient temperature reached. ALL bool N/A 67 Maximum core temperature reached. ALL bool N/A 68 Joint fault. ALL bool N/A 72 Above maximum DOF. ALL bool N/A 74 Unable to reach pose. ALL bool N/A 75 Joint detection error. ALL bool N/A 76 Network initialisation error. ALL bool N/A 77 Maximum current reached. ALL bool N/A 78 Maximum voltage reached. ALL bool N/A 79 Minimum voltage reached. ALL bool N/A 87 Emergency stop activated ALL bool N/A 88 Emergency line activated ALL bool N/A 89 In rush current limiter fault ALL bool N/A 91 Incompatible firmware version ALL bool N/A 92 Power on self test failure ALL bool N/A 93 Discrete Input stuck active ALL bool N/A 94 Arm is in an illegal position (singularity) ALL"},{"location":"linked_md/modbus_icd/#coils-read-write","title":"Coils (read / write)","text":"<p>The following section lists a series of addresses to drive ON/OFF output on robot</p> <p>Applicable Modbus function codes:</p> <ul> <li>Function Code 01 (Read Coils)</li> <li>Function Code 05 (Write Single Coil)</li> <li>Function Code 15 (Write Multiple Coils)</li> </ul> Category Unit Address Description Supported platform Control N/A 0 Quick stop ALL Control N/A 1 Abort / manual stop ALL Control N/A 2 Fault reset ALL"},{"location":"linked_md/modbus_icd/#input-registers-read-only","title":"Input registers (read only)","text":"<p>The following section list a series of addresses to read 16-bit number from robot .</p> <p>Applicable Modbus function code:</p> <ul> <li>Function Code 04 (Read Input Registers)</li> </ul>"},{"location":"linked_md/modbus_icd/#robot","title":"Robot","text":"Category Type Unit Address Description Supported platform Robot state uint16 (bitmask) N/A 0 0: Unspecified arm state1: Cannot be reported as the Base initialization must be completed before allowing user connectionBase initialisation succeeded. 2: Base initialization succeededArm is being initialised.3: Arm is being initializedArm is in fault.4: Arm is in faultArm is in maintenance.5: Arm is in maintenanceArm is in low-level servoing mode.6: Arm is in low-level servoing modeArm is ready to be controlled.7: Arm is ready to be controlled.8: Arm is currently being controlled via a sequenceArm.9: Arm is currently being controlled manually. ALL Fault flags uint32 (bitmask) N/A 2 - 3 0: Firmware update failure 2: Maximum ambient temperature reached 3: Maximum core temperature reached 4: Joint fault 8: Above maximum DOF 10: Unable to reach pose 11: Joint detection error 12: Network initialisation error 13: Maximum current reached 14: Maximum voltage reached 15: Minimum voltage reached 23: Emergency stop activated 24: Emergency line activated 25: In rush current limiter fault 27: Incompatible firmware version 28: Power on self test failure 29: Discrete Input stuck active 30: Arm is in an illegal position (singularity) ALL Warning flags uint32 (bitmask) N/A 4 - 5 Same as Fault flags ALL Arm current float A 6 - 7 Arm current ALL Arm Voltage float V 8 - 9 Arm voltage ALL Arm CPU Temperature float \u00b0C 10 - 11 Arm CPU Temperature ALL Arm Ambient Temperature float \u00b0c 12 - 13 Arm Ambient Temperature ALL"},{"location":"linked_md/modbus_icd/#joints-data","title":"Joints data","text":"Type Unit Address Description Supported platform float \u00b0 34 - 35 Joint 1 position ALL float \u00b0 36 - 37 Joint 2 position ALL float \u00b0 38 - 39 Joint 3 position ALL float \u00b0 40 - 41 Joint 4 position ALL float \u00b0 42 - 43 Joint 5 position ALL float \u00b0 44 - 45 Joint 6 position ALL float \u00b0 46 - 47 Joint 7 position ALL float \u00b0 / s 48 - 49 Joint 1 velocity ALL float \u00b0 / s 50 - 51 Joint 2 velocity ALL float \u00b0 / s 52 - 53 Joint 3 velocity ALL float \u00b0 / s 54 - 55 Joint 4 velocity ALL float \u00b0 / s 56 - 57 Joint 5 velocity ALL float \u00b0 / s 58 - 59 Joint 6 velocity ALL float \u00b0 / s 60 - 61 Joint 7 velocity ALL float Nm 62 - 63 Joint 1 torque ALL float Nm 64 - 65 Joint 2 torque ALL float Nm 66 - 67 Joint 3 torque ALL float Nm 68 - 69 Joint 4 torque ALL float Nm 70 - 71 Joint 5 torque ALL float Nm 72 - 73 Joint 6 torque ALL float Nm 74 - 75 Joint 7 torque ALL float A 76 - 77 Joint 1 current ALL float A 78 - 79 Joint 2 current ALL float A 80 - 81 Joint 3 current ALL float A 82 - 83 Joint 4 current ALL float A 84 - 85 Joint 5 current ALL float A 86 - 87 Joint 6 current ALL float A 88 - 89 Joint 7 current ALL float \u00b0C 90 - 91 Joint 1 motor temp ALL float \u00b0C 92 - 93 Joint 2 motor temp ALL float \u00b0C 94 - 95 Joint 3 motor temp ALL float \u00b0C 96 - 97 Joint 4 motor temp ALL float \u00b0C 98 - 99 Joint 5 motor temp ALL float \u00b0C 100 - 101 Joint 6 motor temp ALL float \u00b0C 102 - 103 Joint 7 motor temp ALL"},{"location":"linked_md/modbus_icd/#tool-center-point","title":"Tool center point","text":"Type Unit Address Description Supported platform float m 104 - 105 TCP Position X ALL float m 106 - 107 TCP Position Y ALL float m 108 - 109 TCP Position Z ALL float \u00b0 110 - 111 TCP Orientation Theta X ALL float \u00b0 112 - 113 TCP Orientation Theta Y ALL float \u00b0 114 - 115 TCP Orientation Theta Z ALL float m/s 116 - 117 TCP Velocity X ALL float m/s 118 - 119 TCP Velocity Y ALL float m/s 120 - 121 TCP Velocity Z ALL float \u00b0/s 122 - 123 TCP Angular Velocity Theta X ALL float \u00b0/s 124 - 125 TCP Angular Velocity Theta Y ALL float \u00b0/s 126 - 127 TCP Angular Velocity Theta Z ALL float N 128 - 129 TCP Force X ALL float N 130 - 131 TCP Force Y ALL float N 132 - 133 TCP Force Z ALL float Nm 134 - 135 TCP Torque X ALL float Nm 136 - 137 TCP Torque Y ALL float Nm 138 - 139 TCP Torque Z ALL"},{"location":"linked_md/modbus_icd/#holding-registers","title":"Holding registers","text":"<p>The following section lists available addresses to use. Every address holds a 16 bits register.</p> <p>Applicable Modbus function codes:</p> <ul> <li>Function Code 03 (Read Holding Registers)</li> <li>Function Code 06 (Write Single Register)</li> <li>Function Code 16 (Write Multiple Registers)</li> </ul>"},{"location":"linked_md/modbus_icd/#control-read-only","title":"Control (read only)","text":"Type Address Description Supported platform uint16 0 0: Quick stop1: Abort / manual stop2: Fault reset ALL"},{"location":"linked_md/modbus_icd/#action-sequence-read-only","title":"Action / Sequence (read only)","text":"Type Address Description Supported platform Bitmask (16 bits) 100 Status of executed Action or Sequence.0: Started1: Completed2: Paused3: Aborted ALL uint16 101 Active Action/Sequence ID. ALL uint16 102 Active move type.0: Action1: Sequence2: Cartesian trajectory3: Twist ALL"},{"location":"linked_md/modbus_icd/#speed-limit-read-only","title":"Speed limit (read only)","text":"Type Unit Address Description Supported platform float m/s 104 - 105 Current Linear Cartesian Speed Limit ALL float \u00b0/s 106 - 107 Current Angular Cartesian Speed Limit ALL"},{"location":"linked_md/modbus_icd/#control-read-write","title":"Control (read / write)","text":"Type Unit Address Description Supported platform Bitmask (16 bits) N/A 200 Status of executed Action or Sequence.0: No action1: Action start2: Action stop ALL uint16 N/A 201 Active Action/Sequence ID. ALL uint16 N/A 202 Active move type.0: Action1: Sequence2: Cartesian trajectory3: Twist ALL uint16 N/A 203 Cartesian reference frame.1: Mixed2: Tool3: Base ALL float m or m/s 204 - 205 Linear X position or velocityOnly used with Cartesian and Twist Move types ALL float m or m/s 206 - 207 Linear Y position or velocityOnly used with Cartesian and Twist Move types ALL float m or m/s 208 - 209 Linear Z position or velocityOnly used with Cartesian and Twist Move types ALL float m or \u00b0/s 210 - 211 Theta X Orientation or Angular X velocityOnly used with Cartesian and Twist Move types ALL float m or \u00b0/s 212 - 213 Theta Y Orientation or Angular Y velocityOnly used with Cartesian and Twist Move types ALL float m or \u00b0/s 214 - 215 Theta Z Orientation or Angular Z velocityOnly used with Cartesian and Twist Move types ALL float m/s 216 - 217 Desired Linear Cartesian Speed Limit ALL float \u00b0/s 218 - 219 Desired Angular Cartesian Speed Limit ALL"},{"location":"linked_md/python_api_mechanism/","title":"Python api mechanism","text":"Python API mechanism Table Of Contents <ul> <li>Overview</li> <li>Blocking-method</li> </ul>"},{"location":"linked_md/python_api_mechanism/#overview","title":"Overview","text":"<p>The Python Kortex API offers one mechanism to call a method: a standard blocking method.</p> <p></p>"},{"location":"linked_md/python_api_mechanism/#blocking-method","title":"Blocking method","text":"<p>The blocking method (blocking call) is relatively straightforward. The function is called, and the process waits until an answer is received from the server side.</p> <pre><code># RouterClientSendOptions is optional and needs to be passed with the keyword\n# options\nrouter_options = RouterClientSendOptions()\nrouter_options.timeout_ms = 5000 # 5 seconds\n\n# The same function call without the options=router_options is valid and will do the same\n# using the router default value\nall_speed_hard_limits = base.GetAllJointsSpeedHardLimitation()\n\nfor speed_limit in all_speed_hard_limits.joints_limitations:\n    print(\"============================================\")\n    print(\"Joint: {0}\".format(speed_limit.joint_identifier))\n    print(\"Type of limitation: {0}\".format(Base_pb2.LimitationType.Name(speed_limit.type)))\n    print(\"Value: {0}\".format(speed_limit.value))\n    print(\"============================================\")\n</code></pre>"},{"location":"linked_md/python_device_routing/","title":"Python device routing","text":"Device routing Table of Contents <ul> <li>Overview</li> <li>Device Manager service<ul> <li>Service description</li> <li>Good to know</li> <li>Example</li> </ul> </li> <li>Device Config service<ul> <li>Service description</li> <li>Good to know</li> <li>Example</li> </ul> </li> <li>Other Services<ul> <li>Example</li> </ul> </li> </ul>"},{"location":"linked_md/python_device_routing/#overview","title":"Overview","text":"<p>Device routing is a mechanism that allows you to send commands to a specific device using the connection with the base.  This is done by specifying the device_identifier when sending a command through a service. The service doesn't need to be implemented by the base.</p> <p>In other words, a command can be sent to a sub device, using a service known ony by the sub device (e.g.: <code>ActuatorConfigClient</code>) as long as the device_identifier is specified in the command parameters.</p> <p>To obtain the device_identifier you need to use the Device Manager service.</p> <p></p>"},{"location":"linked_md/python_device_routing/#device-manager-service","title":"Device Manager service","text":""},{"location":"linked_md/python_device_routing/#service-description","title":"Service description","text":"<p>The sole purpose of the Device Manager service is to return a device handle list containing handles for all devices present using the method <code>ReadAllDevices()</code>.</p> <p></p>"},{"location":"linked_md/python_device_routing/#good-to-know","title":"Good to know","text":"<ul> <li>The device handle list returned by <code>ReadAllDevices()</code> is not in any specific device order</li> <li>Device handles also have the fields <code>device_type</code> and <code>order</code> </li> </ul>"},{"location":"linked_md/python_device_routing/#example","title":"Example","text":"<pre><code># API initialisation\ndevice_manager = DeviceManagerClient(router)\nsubDevicesInfo = device_manager.ReadAllDevices()\n</code></pre>"},{"location":"linked_md/python_device_routing/#device-config-service","title":"Device Config service","text":""},{"location":"linked_md/python_device_routing/#service-description_1","title":"Service description","text":"<p>The <code>DeviceConfig</code> service provides information about the interrogated device:  - device type - firmware and bootloader version - model, part, and serial number - MAC address and  - hardware revision</p> <p></p>"},{"location":"linked_md/python_device_routing/#example_1","title":"Example","text":"<pre><code># Api initialisation\ndevice_manager = DeviceManagerClient(router)\ndevice_config = DeviceConfigClient(router)\n\n# Get all device routing information (from DeviceManagerClient service)\nall_devices_info = device_manager.ReadAllDevices()\n\noptions = RouterClientSendOptions()\noptions.timeout_ms = 4000\n\n# Use device routing information to route to every devices (base, actuator, interconnect, etc.) in the arm/base system and request their general device information\nfor dev in all_devices_info.device_handle:\n    device_info = {}\n    device_info.update( json_format.MessageToDict( device_config.GetDeviceType           (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetFirmwareVersion      (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetBootloaderVersion    (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetModelNumber          (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetPartNumber           (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetPartNumberRevision   (dev.device_identifier, options) ) )\n    device_info.update( json_format.MessageToDict( device_config.GetSerialNumber         (dev.device_identifier, options) ) )\n\n    # Get hexadecimal representation of MAC address\n    macAddress_hexstr = \"\"\n    for b in device_config.GetMACAddress(dev.device_identifier, options).mac_address:\n            macAddress_hexstr += \"%02X:\" % b\n    macAddress_hexstr = macAddress_hexstr[:-1] # remove last ':'\n    device_info.update( { \"macAddress\": macAddress_hexstr } )\n    print(\"-----------------------------\")\n\n    print(\"-- {}: id = {} --\".format(Common_pb2._DEVICETYPES.values_by_number[dev.device_type].name, dev.device_identifier))\n    for key, value in device_info.items():\n            print(str(\"%20s\") % key + \": \" + str(value))\n</code></pre>"},{"location":"linked_md/python_device_routing/#other-services","title":"Other Services","text":"<p>The device_identifier can be used with other services to directly interrogate a device.</p> <p></p>"},{"location":"linked_md/python_device_routing/#example_2","title":"Example","text":"<pre><code># API initialisation\ndevice_manager = DeviceManagerClient(router)\nvision_config = VisionConfigClient(router)\n\n# Getting all device routing information (from DeviceManagerClient service)\nallDevicesInfo = device_manager.ReadAllDevices()\n\nvision_handles = [hd for hd in allDevicesInfo.device_handle if hd.device_type == DeviceConfig_pb2.VISION ]\n\nif len(vision_handles) == 0:\n    print(\"Error: there is no vision device registered in the devices info\")\nelif len(vision_handles) &gt; 1:\n    print(\"Error: there are more than one vision device register in the devices infos\")\nelse:\n    handle = vision_handles[0]\n\nsensor_id = VisionConfig_pb2.SensorIdentifier()\nsensor_id.sensor = VisionConfig_pb2.SENSOR_COLOR\n\nintrinsic_value = vision_config.GetIntrinsicParameters(sensor_id, handle.device_identifier)\n\nprint(\"Width: {0}\".format(intrinsic_value.width))\nprint(\"Height: {0}\".format(intrinsic_value.height))\nprint(\"Principal point x: {0}\".format(intrinsic_value.principal_point_x))\nprint(\"Principal point y: {0}\".format(intrinsic_value.principal_point_y))\nprint(\"Focal length x: {0}\".format(intrinsic_value.focal_length_x))\nprint(\"Focal length y: {0}\".format(intrinsic_value.focal_length_y))\n</code></pre>"},{"location":"linked_md/python_error_management/","title":"Python error management","text":"Error management Table of Contents <ul> <li>Overview         - Example</li> <li>Special case         - RouterClient</li> </ul>"},{"location":"linked_md/python_error_management/#overview","title":"Overview","text":"<p>The Python Kortex API currently has only one mechanism to manage errors: surrounding the code block with a try/except statement pair and reacting to the exception.</p> <p>Note that there are special cases explained at the end of this document.</p> <p></p>"},{"location":"linked_md/python_error_management/#example","title":"Example","text":"<p><pre><code>try:\n    base_service.CreateUserProfile(Base_pb2.FullUserProfile())\n\nexcept KClientException as ex:\n    # Get error and sub error codes\n    error_code = ex.get_error_code()\n    sub_error_code = ex.get_error_sub_code()\n    print(\"Error_code:{0} , Sub_error_code:{1} \".format(error_code, sub_error_code))\n    print(\"Caught expected error: {0}\".format(ex))\n\nexcept KServerException as server_ex:\n    # Do something...\n\nexcept Exception:\n    # Do something...\n</code></pre> A <code>KClientException</code> is thrown when an error occurs on the API client side, just as a <code>KServerException</code> is thrown when the error occurs on the API server side.</p> <p>A <code>KClientException</code> includes error code and sub error code information describing the exception. Here is a link to documentation explaining all of the error and sub error codes:</p> <ul> <li>Error code</li> <li>Sub error code</li> </ul> <p></p>"},{"location":"linked_md/python_error_management/#special-case","title":"Special case","text":"<p>This section describes a case that doesn't follow the standard error management rules documented earlier in this document.</p> <p></p>"},{"location":"linked_md/python_error_management/#routerclient","title":"RouterClient","text":"<p>When a <code>RouterClient</code> object is instantiated a callback function (or lambda expression) can be specified. This function will be called if an exception is thrown during the process. <pre><code>router = RouterClient(transport, lambda kException: print(\"Error detected: {}\".format(kException)))\n</code></pre></p>"},{"location":"linked_md/python_quick_start/","title":"Python quick start","text":"<ul> <li>Python setup<ul> <li>Installation of Python &amp; Python modules<ul> <li>Required installations</li> <li>Optional Python modules</li> </ul> </li> </ul> </li> <li>Python overview</li> <li>Back to root topic: readme.md</li> </ul>"},{"location":"linked_md/python_quick_start/#python-setup","title":"Python setup","text":""},{"location":"linked_md/python_quick_start/#installation-of-python-python-modules","title":"Installation of Python &amp; Python modules","text":""},{"location":"linked_md/python_quick_start/#required-installations","title":"Required installations","text":"<ul> <li>python &gt;= 3.5</li> <li>pip</li> </ul> Linux (Ubuntu) Install Python 3.5.2 <pre><code>sudo apt-get install python3.5  \nsudo apt-get install python3-pip  \npython3.5 -m pip install --upgrade pip --user\n</code></pre> Windows Download Python 3.x (based on 3.5.2)  - [python-3.5.2](https://www.python.org/downloads/release/python-352/)   - alternatively, click this link to download the file directly: [https://www.python.org/ftp/python/3.5.2/python-3.5.2.exe](https://www.python.org/ftp/python/3.5.2/python-3.5.2.exe)     Installation using the wizard     - be sure to install pip and to add Python to the environnement variables    - you should also consider installing the Python test suite"},{"location":"linked_md/python_quick_start/#optional-python-modules","title":"Optional Python modules","text":"<ul> <li><code>pipenv</code>: packages manager</li> <li><code>pytest</code>: Python test framework</li> <li><code>pytest-cov</code>: pytest coverage tool report</li> <li><code>pylint</code>: Python lint (static analyser for editor)</li> </ul>"},{"location":"linked_md/python_quick_start/#python-overview","title":"Python overview","text":"Linux (Ubuntu) <pre><code># to display the actual version of Python used\npython -V\n\n# if there are several versions installed you need to specify the version  \npython3 -V\npython3.5 -V\n\n# use Python pip module to install and manage Python modules\npython3.5 -m pip --help\n\n# use Python to run a specific Python script\npython3.5 &lt;script&gt;\n</code></pre> Windows <pre><code># to get the actual version of Python used by Windows\npython -V\n\n# to use another version call Python with full path instead of the shortcut alias (see following example)\nC:\\User\\user_name\\AppData\\Local\\Programs\\Python\\python35-32.exe\n\n# Python pip module\npython -m pip --help\n\n# use Python to run a specific Python script\npython &lt;script&gt;\n</code></pre> _________________________  ## Back to root topic: **[readme.md](../readme.md)**"},{"location":"linked_md/python_servoing_modes/","title":"Python servoing modes","text":"Servoing Mode Table Of Contents <ul> <li>Overview</li> <li>Setting servoing mode<ul> <li>High level servoing mode</li> <li>Low level servoing mode</li> </ul> </li> </ul>"},{"location":"linked_md/python_servoing_modes/#overview","title":"Overview","text":"<p>There are multiple servoing modes on the robot. A servoing mode is a mode through which commands are transmitted to robot devices during operation. Depending on the servoing mode chosen, the details involved in controlling via the API will be different.</p> <p> </p>"},{"location":"linked_md/python_servoing_modes/#setting-servoing-mode","title":"Setting servoing mode","text":"<p>The RPC to set the servoing mode is in the base service</p> <pre><code># API initialisation\nbase = BaseClient(router)\n\n# Set the base in low level servoing\nservoing_mode_information = Base_pb2.ServoingModeInformation()\nservoing_mode_information.servoing_mode = Base_pb2.LOW_LEVEL_SERVOING\nbase.SetServoingMode(servoing_mode_information)\n</code></pre> <p></p>"},{"location":"linked_md/python_servoing_modes/#high-level-servoing-mode","title":"High-level servoing mode","text":"<p>High-level servoing is the default servoing mode for the robot on bootup.</p> <p>In high-level servoing, users connect to the base through the API, sending command inputs. The base routes commands to the actuators, and manages a 1 kHz control loop.</p> <p>High-level servoing is the recommended servoing mode for non-advanced users, because you have access to Cartesian movement and don't have to manage a 1kHz control loop to send commands to the robot. </p> <p> </p>"},{"location":"linked_md/python_servoing_modes/#low-level-servoing-mode","title":"Low-level servoing mode","text":"<p>In low-level servoing, the API client connects to the base and sends commands to the base for routing. Note that this mode does not support Cartesian commands.</p> <p>The base ensures device routing and internal communications with the actuators at 1 kHz, but the high-level functionality for the base control loop (cartesian movement, robot kinematics, trajectory management, etc.) are no longer available.</p> <p>Low-level servoing allows clients to control each actuator individually by sending small position increments at a 1 kHz frequency (bypassing the kinematic control library).</p> <p>Note This servoing mode is not meant to be run under Python. C++ is a much more suitable language for low-level control.  Python is an interpreted language. By extension, low-level control using Python will be much more sensitive to jitter and will not guarantee a 1 kHz refresh rate.</p>"},{"location":"linked_md/python_transport_router_session_notif/","title":"Python transport router session notif","text":"Transport, RouterCient, SessionManager and NotificationHandler Table of Contents <ul> <li>Overview</li> <li>Transport</li> <li>RouterClient</li> <li>SessionManager</li> <li>NotificationHandler</li> </ul>"},{"location":"linked_md/python_transport_router_session_notif/#overview","title":"Overview","text":"<p>This document covers how to communicate with the robot base, in both directions.</p> <p>Connections with the robot base are covered by the <code>Transport</code> class, <code>Router</code> class and <code>Session Manager</code> class. Once the connection is established, commands can be sent to the robot base and corresponding responses received. </p> <p>To receive unsolicited messages from the robot base, the notification handler must be implemented.</p> <p></p>"},{"location":"linked_md/python_transport_router_session_notif/#transport","title":"Transport","text":"<p>A <code>Transport</code> class is used to instantiate an object which identifies the robot base being connected to, by specifying a communications protocol, an IP address and a port number.</p> <p>Kinova provides two pre-defined <code>Transport</code> object types:</p> <ul> <li><code>TCPTransport</code> - using TCP as a transport protocol</li> <li><code>UDPTransport</code> - using UDP as a transport protocol</li> </ul> <p><code>TCPTransport</code> is used for high-level robot control, configuration, and any other purposes not requiring sending commands at high frequency.</p> <p><code>UDPTransport</code> can only be used for low-level cyclic communication at 1kHz with the robot via the <code>Kinova::Api::BaseCyclic</code> service. </p> <p>Note: In the Python API, low-level control is available, but for performance reasons is not recommended. Only TCP should be used as a transport protocol in Python with a <code>TCPTransport</code> object.</p> <p><code>TCPTransport</code> and <code>UDPTransport</code> are subclasses of an abstract base class <code>ITransportClient</code>. Implementing a sub-class of this class allows you to implement your own transport. Here is the list of functions in the interface:</p> <pre><code># Connect to specified robot base. Host is a string for the \n# base IP address and port is an int for the port to use\n@abstractmethod\ndef connect(self, host, port):\n    pass\n\n# Disconnect from robot base\n@abstractmethod\ndef disconnect(self):\n    pass\n\n # Send a message. txBuffer is a string holding the contents \n # of the message, and txSize is an int for the length of the # message\n@abstractmethod\ndef send(self, txBuffer, txSize):\n    pass\n\n#  Handler for received message. Callback is a function object\n# taking a string and int as inputs.\n@abstractmethod\ndef registerOnFrameCallback(self, callback):\n    pass\n</code></pre> <p></p>"},{"location":"linked_md/python_transport_router_session_notif/#routerclient","title":"RouterClient","text":"<p>The <code>RouterClient</code> class is used to instantiate an object which sends the command to the robot base specified by the <code>Transport</code> object. A <code>RouterClient</code> object needs a <code>Transport</code> object to work. The purpose of the router is to transmit to the robot base all commands sent through the services.</p> <p>It will also manage all messages sent and received by that service. A router needs to be specified each time a new service is declared.</p> <p>To handle cases where there is a connection problem with the robot base, a callback method needs to be provided.</p> <pre><code>errorCallback = lambda kException: print(\"_________ callback error _________ {}\".format(kException))\ntransport = TCPTransport()\nrouter = RouterClient(transport, errorCallback)\ntransport.connect(DEVICE_IP, DEVICE_PORT)\n</code></pre> <p></p>"},{"location":"linked_md/python_transport_router_session_notif/#sessionmanager","title":"SessionManager","text":"<p>The <code>SessionManager</code> object will manage the connection to the robot base. If no <code>SessionManager</code> is declared on an active connection, the robot base will not answer commands. A <code>SessionManager</code> requires a <code>RouterClient</code> object. The <code>SessionManager</code> will also manage the connection to ensure that it is still alive if sent commands take too long to execute.</p> <pre><code>errorCallback = lambda kException: print(\"_________ callback error _________ {}\".format(kException))\ntransport = TCPTransport()\nrouter = RouterClient(transport, errorCallback)\ntransport.connect(DEVICE_IP, DEVICE_PORT)\n\nsession_info = Session_pb2.CreateSessionInfo()\nsession_info.username = 'admin'\nsession_info.password = 'admin'\nsession_info.session_inactivity_timeout = 60000   # (milliseconds)\nsession_info.connection_inactivity_timeout = 2000 # (milliseconds)\n\nsession_manager = SessionManager(router)\nsession_manager.CreateSession(session_info)\n</code></pre> <p></p>"},{"location":"linked_md/python_transport_router_session_notif/#notificationhandler","title":"NotificationHandler","text":"<p>The robot base provides notifications on different topics as requested by a client application that has a session open with the robot.</p> <p>The robot base uses a Publish/Subscribe design pattern. Rather than polling periodically for updates, the client application subscribes to a list of topics. Whenever a change happens related to that topic, whether caused by the same client session or not, the publisher sends a notification to all subscribers.</p> <pre><code># In this example, when a user is created `notification_callback` will be called because we register it as a\n# handler for `ConfigurationChange` topic notifications.\ndef notification_callback(data):\n    print(\"********************************\")\n    print(\"**  Callback function called  **\")\n    print(json_format.MessageToJson(data))\n    print(\"********************************\")\n\n# Subscribe to ConfigurationChange notifications\nnotif_handle = base.OnNotificationConfigurationChangeTopic(notification_callback, Base_pb2.NotificationOptions())\n</code></pre>"},{"location":"messages/ActuatorConfig/AxisOffsets/","title":"class AxisOffsets","text":"<p>Member values </p> Member name Data type Description Usage absolute_offset float Absolute offset value (degrees) You can manipulate the field absolute_offset as if it were a regular field. To clear the value of absolute_offset and reset it to the default value for its type, you call the ClearField() method of the Message interface. relative_offset float Relative offset value (degrees) You can manipulate the field relative_offset as if it were a regular field. To clear the value of relative_offset and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/AxisPosition/","title":"class AxisPosition","text":"<p>Member values </p> Member name Data type Description Usage position float Axis position (degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/CoggingFeedforwardModeInformation/","title":"class CoggingFeedforwardModeInformation","text":"<p>Member values </p> Member name Data type Description Usage cogging_feedforward_mode int Cogging feedforward mode You can manipulate the field cogging_feedforward_mode as if it were a regular field. To clear the value of cogging_feedforward_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/CommandModeInformation/","title":"class CommandModeInformation","text":"<p>Member values </p> Member name Data type Description Usage command_mode int Command mode You can manipulate the field command_mode as if it were a regular field. To clear the value of command_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/ControlLoop/","title":"class ControlLoop","text":"<p>Member values </p> Member name Data type Description Usage control_loop int Use ControlLoopSelection enum values to form bitmask You can manipulate the field control_loop as if it were a regular field. To clear the value of control_loop and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/ControlLoopParameters/","title":"class ControlLoopParameters","text":"<p>Member values </p> Member name Data type Description Usage loop_selection int ControlLoopSelection enum You can manipulate the field loop_selection as if it were a regular field. To clear the value of loop_selection and reset it to the default value for its type, you call the ClearField() method of the Message interface. error_saturation float Error saturation value You can manipulate the field error_saturation as if it were a regular field. To clear the value of error_saturation and reset it to the default value for its type, you call the ClearField() method of the Message interface. output_saturation float Output saturation value You can manipulate the field output_saturation as if it were a regular field. To clear the value of output_saturation and reset it to the default value for its type, you call the ClearField() method of the Message interface. kAz float KAz (index 0 to 4): denominator gains A1 to A5 You can manipulate the field kAz as if it were a regular field. To clear the value of kAz and reset it to the default value for its type, you call the ClearField() method of the Message interface. kBz float KBz (index 0 to 5): numerator gains B0 to B5 You can manipulate the field kBz as if it were a regular field. To clear the value of kBz and reset it to the default value for its type, you call the ClearField() method of the Message interface. error_dead_band float Error dead band value You can manipulate the field error_dead_band as if it were a regular field. To clear the value of error_dead_band and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/ControlModeInformation/","title":"class ControlModeInformation","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/CustomDataSelection/","title":"class CustomDataSelection","text":"<p>Member values </p> Member name Data type Description Usage channel int 16 channels maximum You can manipulate the field channel as if it were a regular field. To clear the value of channel and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/EncoderDerivativeParameters/","title":"class EncoderDerivativeParameters","text":"<p>Member values </p> Member name Data type Description Usage max_window_width int Maximum window width You can manipulate the field max_window_width as if it were a regular field. To clear the value of max_window_width and reset it to the default value for its type, you call the ClearField() method of the Message interface. min_angle float Minimum angle for derivative (degrees) You can manipulate the field min_angle as if it were a regular field. To clear the value of min_angle and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/FrequencyResponse/","title":"class FrequencyResponse","text":"<p>Member values </p> Member name Data type Description Usage loop_selection int ControlLoopSelection enum You can manipulate the field loop_selection as if it were a regular field. To clear the value of loop_selection and reset it to the default value for its type, you call the ClearField() method of the Message interface. min_frequency float Minimum frequency value You can manipulate the field min_frequency as if it were a regular field. To clear the value of min_frequency and reset it to the default value for its type, you call the ClearField() method of the Message interface. max_frequency float Maximum frequency value You can manipulate the field max_frequency as if it were a regular field. To clear the value of max_frequency and reset it to the default value for its type, you call the ClearField() method of the Message interface. amplitude float Amplitude value You can manipulate the field amplitude as if it were a regular field. To clear the value of amplitude and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration float Duration (in seconds) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/LoopSelection/","title":"class LoopSelection","text":"<p>Member values </p> Member name Data type Description Usage loop_selection int ControlLoopSelection enum You can manipulate the field loop_selection as if it were a regular field. To clear the value of loop_selection and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/PositionCommand/","title":"class PositionCommand","text":"<p>Member values </p> Member name Data type Description Usage position float Position value (degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Velocity value (degrees per second) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. acceleration float Acceleration value (degrees per second^squared) You can manipulate the field acceleration as if it were a regular field. To clear the value of acceleration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/RampResponse/","title":"class RampResponse","text":"<p>Member values </p> Member name Data type Description Usage loop_selection int ControlLoopSelection enum You can manipulate the field loop_selection as if it were a regular field. To clear the value of loop_selection and reset it to the default value for its type, you call the ClearField() method of the Message interface. slope float Slope value You can manipulate the field slope as if it were a regular field. To clear the value of slope and reset it to the default value for its type, you call the ClearField() method of the Message interface. ramp_delay float Ramp delay value You can manipulate the field ramp_delay as if it were a regular field. To clear the value of ramp_delay and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration float Duration (in seconds) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/Servoing/","title":"class Servoing","text":"<p>Member values </p> Member name Data type Description Usage enabled bool Servoing enabled You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/StepResponse/","title":"class StepResponse","text":"<p>Member values </p> Member name Data type Description Usage loop_selection int ControlLoopSelection enum You can manipulate the field loop_selection as if it were a regular field. To clear the value of loop_selection and reset it to the default value for its type, you call the ClearField() method of the Message interface. amplitude float Amplitude value You can manipulate the field amplitude as if it were a regular field. To clear the value of amplitude and reset it to the default value for its type, you call the ClearField() method of the Message interface. step_delay float Step delay value You can manipulate the field step_delay as if it were a regular field. To clear the value of step_delay and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration float Duration (in seconds) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/TorqueCalibration/","title":"class TorqueCalibration","text":"<p>Member values </p> Member name Data type Description Usage global_gain float Global gain value You can manipulate the field global_gain as if it were a regular field. To clear the value of global_gain and reset it to the default value for its type, you call the ClearField() method of the Message interface. global_offset float Global offset value You can manipulate the field global_offset as if it were a regular field. To clear the value of global_offset and reset it to the default value for its type, you call the ClearField() method of the Message interface. gain float Gain (index 0 to 3) You can manipulate the field gain as if it were a regular field. To clear the value of gain and reset it to the default value for its type, you call the ClearField() method of the Message interface. offset float Offset (index 0 to 3) You can manipulate the field offset as if it were a regular field. To clear the value of offset and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/TorqueOffset/","title":"class TorqueOffset","text":"<p>Member values </p> Member name Data type Description Usage torque_offset float Torque offset value You can manipulate the field torque_offset as if it were a regular field. To clear the value of torque_offset and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorConfig/VectorDriveParameters/","title":"class VectorDriveParameters","text":"<p>Member values </p> Member name Data type Description Usage kpq float Quadrature axis current proportional gain You can manipulate the field kpq as if it were a regular field. To clear the value of kpq and reset it to the default value for its type, you call the ClearField() method of the Message interface. kiq float Quadrature axis current integral gain You can manipulate the field kiq as if it were a regular field. To clear the value of kiq and reset it to the default value for its type, you call the ClearField() method of the Message interface. kpd float Direct axis current proportional gain You can manipulate the field kpd as if it were a regular field. To clear the value of kpd and reset it to the default value for its type, you call the ClearField() method of the Message interface. kid float Direct axis current integral gain You can manipulate the field kid as if it were a regular field. To clear the value of kid and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorConfig (Python)</p>"},{"location":"messages/ActuatorCyclic/Command/","title":"class Command","text":"<p>Member values </p> Member name Data type Description Usage command_id MessageId MessageId To set command_id, you simply assign a value directly to a field within command_id. You can also use the parent message's HasField() method to check if a message type field value has been set. flags int Command flags (see enum CommandFlags) You can manipulate the field flags as if it were a regular field. To clear the value of flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Desired position of the actuator (degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Desired velocity of the actuator (degrees per second) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque_joint float Desired torque of the actuator (Newton-meters) You can manipulate the field torque_joint as if it were a regular field. To clear the value of torque_joint and reset it to the default value for its type, you call the ClearField() method of the Message interface. current_motor float Desired current of the motor (Amperes) You can manipulate the field current_motor as if it were a regular field. To clear the value of current_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"messages/ActuatorCyclic/CustomData/","title":"class CustomData","text":"<p>Member values </p> Member name Data type Description Usage custom_data_id MessageId MessageId To set custom_data_id, you simply assign a value directly to a field within custom_data_id. You can also use the parent message's HasField() method to check if a message type field value has been set. custom_data_0 int Custom data word 0 You can manipulate the field custom_data_0 as if it were a regular field. To clear the value of custom_data_0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_1 int Custom data word 1 You can manipulate the field custom_data_1 as if it were a regular field. To clear the value of custom_data_1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_2 int Custom data word 2 You can manipulate the field custom_data_2 as if it were a regular field. To clear the value of custom_data_2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_3 int Custom data word 3 You can manipulate the field custom_data_3 as if it were a regular field. To clear the value of custom_data_3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_4 int Custom data word 4 You can manipulate the field custom_data_4 as if it were a regular field. To clear the value of custom_data_4 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_5 int Custom data word 5 You can manipulate the field custom_data_5 as if it were a regular field. To clear the value of custom_data_5 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_6 int Custom data word 6 You can manipulate the field custom_data_6 as if it were a regular field. To clear the value of custom_data_6 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_7 int Custom data word 7 You can manipulate the field custom_data_7 as if it were a regular field. To clear the value of custom_data_7 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_8 int Custom data word 8 You can manipulate the field custom_data_8 as if it were a regular field. To clear the value of custom_data_8 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_9 int Custom data word 9 You can manipulate the field custom_data_9 as if it were a regular field. To clear the value of custom_data_9 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_10 int Custom data word 10 You can manipulate the field custom_data_10 as if it were a regular field. To clear the value of custom_data_10 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_11 int Custom data word 11 You can manipulate the field custom_data_11 as if it were a regular field. To clear the value of custom_data_11 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_12 int Custom data word 12 You can manipulate the field custom_data_12 as if it were a regular field. To clear the value of custom_data_12 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_13 int Custom data word 13 You can manipulate the field custom_data_13 as if it were a regular field. To clear the value of custom_data_13 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_14 int Custom data word 14 You can manipulate the field custom_data_14 as if it were a regular field. To clear the value of custom_data_14 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_15 int Custom data word 15 You can manipulate the field custom_data_15 as if it were a regular field. To clear the value of custom_data_15 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"messages/ActuatorCyclic/Feedback/","title":"class Feedback","text":"<p>Member values </p> Member name Data type Description Usage feedback_id MessageId MessageId To set feedback_id, you simply assign a value directly to a field within feedback_id. You can also use the parent message's HasField() method to check if a message type field value has been set. status_flags int Status flags (see enum StatusFlags for the rest) You can manipulate the field status_flags as if it were a regular field. To clear the value of status_flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. jitter_comm int Jitter from the communication in \u03bcs You can manipulate the field jitter_comm as if it were a regular field. To clear the value of jitter_comm and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Position of the actuator (degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Angular velocity of the actuator (degrees per second) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque float Torque of the actuator (Newton meter) You can manipulate the field torque as if it were a regular field. To clear the value of torque and reset it to the default value for its type, you call the ClearField() method of the Message interface. current_motor float Current of the motor (Amperes) You can manipulate the field current_motor as if it were a regular field. To clear the value of current_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. voltage float Voltage of the main board in (Volt) You can manipulate the field voltage as if it were a regular field. To clear the value of voltage and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_motor float Motor temperature (average of the three (3) temperatures (degrees Celsius)) You can manipulate the field temperature_motor as if it were a regular field. To clear the value of temperature_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_core float Microcontroller temperature in (degrees Celsius) You can manipulate the field temperature_core as if it were a regular field. To clear the value of temperature_core and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_a int Bank A Fault (see ActuatorConfig.SafetyIdentifier) You can manipulate the field fault_bank_a as if it were a regular field. To clear the value of fault_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_b int Bank B Fault (see ActuatorConfig.SafetyIdentifier) You can manipulate the field fault_bank_b as if it were a regular field. To clear the value of fault_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_a int Bank A Warning (see ActuatorConfig.SafetyIdentifier) You can manipulate the field warning_bank_a as if it were a regular field. To clear the value of warning_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_b int Bank B Warning (see ActuatorConfig.SafetyIdentifier) You can manipulate the field warning_bank_b as if it were a regular field. To clear the value of warning_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"messages/ActuatorCyclic/MessageId/","title":"class MessageId","text":"<p>Member values </p> Member name Data type Description Usage identifier int Message ID (first 2 bytes : device ID, last 2 bytes : sequence number). By default, set to zero You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ActuatorCyclic (Python)</p>"},{"location":"messages/Base/Action/","title":"class Action","text":"<p>Member values </p> Member name Data type Description Usage handle ActionHandle Reference to the action (useful when updating an existing action) To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Action friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. send_twist_command oneof:action_parameters TwistCommand Control the tool in velocity You can manipulate the field send_twist_command as if it were a regular field. To clear the value of send_twist_command and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. send_wrench_command oneof:action_parameters WrenchCommand Control the tool in force (EXPERIMENTAL) You can manipulate the field send_wrench_command as if it were a regular field. To clear the value of send_wrench_command and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. send_joint_speeds oneof:action_parameters JointSpeeds Action to control each joint speed You can manipulate the field send_joint_speeds as if it were a regular field. To clear the value of send_joint_speeds and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. reach_pose oneof:action_parameters ConstrainedPose Reach a pose given Cartesian constraints. This action will be deprecated in a future version and will be replaced by execute_waypoint_list. You can manipulate the field reach_pose as if it were a regular field. To clear the value of reach_pose and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. reach_joint_angles oneof:action_parameters ConstrainedJointAngles Reach a series of joint angles given angular constraints. This action will be deprecated in a future version and will be replaced by execute_waypoint_list. You can manipulate the field reach_joint_angles as if it were a regular field. To clear the value of reach_joint_angles and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. toggle_admittance_mode oneof:action_parameters int Enable or disable the admittance mode You can manipulate the field toggle_admittance_mode as if it were a regular field. To clear the value of toggle_admittance_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. snapshot oneof:action_parameters Snapshot Take a snapshot of current robot position You can manipulate the field snapshot as if it were a regular field. To clear the value of snapshot and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. switch_control_mapping oneof:action_parameters SwitchControlMapping Switch the active controller map You can manipulate the field switch_control_mapping as if it were a regular field. To clear the value of switch_control_mapping and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. navigate_joints oneof:action_parameters int Select the next actuator to control in a map You can manipulate the field navigate_joints as if it were a regular field. To clear the value of navigate_joints and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. navigate_mappings oneof:action_parameters int Select a different map You can manipulate the field navigate_mappings as if it were a regular field. To clear the value of navigate_mappings and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. change_twist oneof:action_parameters ChangeTwist Change tool twist You can manipulate the field change_twist as if it were a regular field. To clear the value of change_twist and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. change_joint_speeds oneof:action_parameters ChangeJointSpeeds Change the joint speeds individually You can manipulate the field change_joint_speeds as if it were a regular field. To clear the value of change_joint_speeds and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. change_wrench oneof:action_parameters ChangeWrench Change the Cartesian force You can manipulate the field change_wrench as if it were a regular field. To clear the value of change_wrench and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. apply_emergency_stop oneof:action_parameters EmergencyStop Apply robot emergency stop You can manipulate the field apply_emergency_stop as if it were a regular field. To clear the value of apply_emergency_stop and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. clear_faults oneof:action_parameters Faults Clear faults. Robot will be able to move if there is no more fault (see BaseCyclic.BaseFeedback.[fault_bank_a fault_bank_b]) delay oneof:action_parameters Delay Apply a delay You can manipulate the field delay as if it were a regular field. To clear the value of delay and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. execute_action oneof:action_parameters ActionHandle Execute an existing action You can manipulate the field execute_action as if it were a regular field. To clear the value of execute_action and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. send_gripper_command oneof:action_parameters GripperCommand Send a gripper command You can manipulate the field send_gripper_command as if it were a regular field. To clear the value of send_gripper_command and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. send_gpio_command oneof:action_parameters GpioCommand Send a gpio command (not implemented yet) You can manipulate the field send_gpio_command as if it were a regular field. To clear the value of send_gpio_command and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. stop_action oneof:action_parameters Stop Stop movement You can manipulate the field stop_action as if it were a regular field. To clear the value of stop_action and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. play_pre_computed_trajectory oneof:action_parameters PreComputedJointTrajectory Play a pre-computed joint trajectory You can manipulate the field play_pre_computed_trajectory as if it were a regular field. To clear the value of play_pre_computed_trajectory and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. execute_sequence oneof:action_parameters SequenceHandle Execute an existing sequence You can manipulate the field execute_sequence as if it were a regular field. To clear the value of execute_sequence and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. execute_waypoint_list oneof:action_parameters WaypointList Execute a trajectory defined by a series of waypoints You can manipulate the field execute_waypoint_list as if it were a regular field. To clear the value of execute_waypoint_list and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActionExecutionState/","title":"class ActionExecutionState","text":"<p>Member values </p> Member name Data type Description Usage action_event int Action event type You can manipulate the field action_event as if it were a regular field. To clear the value of action_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. handle ActionHandle Identifies the action for which this event occured To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActionHandle/","title":"class ActionHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Action identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. action_type int Action type You can manipulate the field action_type as if it were a regular field. To clear the value of action_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Permission of specified Action entity. Must use 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActionList/","title":"class ActionList","text":"<p>Member values </p> Member name Data type Description Usage action_list Action Action Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActionNotification/","title":"class ActionNotification","text":"<p>Member values </p> Member name Data type Description Usage action_event int Action event type You can manipulate the field action_event as if it were a regular field. To clear the value of action_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. handle ActionHandle Identifies the action for which this event occured To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the action event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. abort_details int Details if action_event is equal to ACTION_ABORT You can manipulate the field abort_details as if it were a regular field. To clear the value of abort_details and reset it to the default value for its type, you call the ClearField() method of the Message interface. connection Connection Connection that caused the action event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. trajectory_info TrajectoryInfo Additional information from the current action Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActionNotificationList/","title":"class ActionNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ActionNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActivateMapHandle/","title":"class ActivateMapHandle","text":"<p>Member values </p> Member name Data type Description Usage mapping_handle MappingHandle Mapping that the active map is asked for To set mapping_handle, you simply assign a value directly to a field within mapping_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. map_group_handle MapGroupHandle Map group that the active map is asked for (not implemented yet) To set map_group_handle, you simply assign a value directly to a field within map_group_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. map_handle MapHandle New active map To set map_handle, you simply assign a value directly to a field within map_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ActuatorInformation/","title":"class ActuatorInformation","text":"<p>Member values </p> Member name Data type Description Usage count int Number of actuators You can manipulate the field count as if it were a regular field. To clear the value of count and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Admittance/","title":"class Admittance","text":"<p>Member values </p> Member name Data type Description Usage admittance_mode int mode You can manipulate the field admittance_mode as if it were a regular field. To clear the value of admittance_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/AdvancedSequenceHandle/","title":"class AdvancedSequenceHandle","text":"<p>Member values </p> Member name Data type Description Usage handle SequenceHandle Sequence handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. in_loop bool You can manipulate the field in_loop as if it were a regular field. To clear the value of in_loop and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/AngularWaypoint/","title":"class AngularWaypoint","text":"<p>Member values </p> Member name Data type Description Usage angles float Target position (in deg) You can manipulate the field angles as if it were a regular field. To clear the value of angles and reset it to the default value for its type, you call the ClearField() method of the Message interface. maximum_velocities float Maximum velocities for each actuator (in deg/s) during movement (optional) You can manipulate the field maximum_velocities as if it were a regular field. To clear the value of maximum_velocities and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration float Duration to reach this waypoint from the previous position (in seconds) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/AppendActionInformation/","title":"class AppendActionInformation","text":"<p>Member values </p> Member name Data type Description Usage sequence_handle SequenceHandle Sequence to which action must be appended To set sequence_handle, you simply assign a value directly to a field within sequence_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. action Action Action to append To set action, you simply assign a value directly to a field within action. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ArmStateInformation/","title":"class ArmStateInformation","text":"<p>Member values </p> Member name Data type Description Usage active_state int Arm active state You can manipulate the field active_state as if it were a regular field. To clear the value of active_state and reset it to the default value for its type, you call the ClearField() method of the Message interface. connection Connection Connection information of the last processed command which triggered an arm state change To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ArmStateNotification/","title":"class ArmStateNotification","text":"<p>Member values </p> Member name Data type Description Usage active_state int New arm state You can manipulate the field active_state as if it were a regular field. To clear the value of active_state and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the arm state event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BluetoothEnableState/","title":"class BluetoothEnableState","text":"<p>Member values </p> Member name Data type Description Usage enabled bool You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BridgeConfig/","title":"class BridgeConfig","text":"<p>Member values </p> Member name Data type Description Usage device_identifier int Identifier of the device to which the bridge is connecting. You can manipulate the field device_identifier as if it were a regular field. To clear the value of device_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. bridgetype int Bridge type. You can manipulate the field bridgetype as if it were a regular field. To clear the value of bridgetype and reset it to the default value for its type, you call the ClearField() method of the Message interface. port_config BridgePortConfig Port configuration. If used to enable port bridging, it is optional. If no port config is given defaults for bridge type is used. To set port_config, you simply assign a value directly to a field within port_config. You can also use the parent message's HasField() method to check if a message type field value has been set. bridge_id BridgeIdentifier Bridge identifier. Not used when creating bridge. It is used when retrieving configuration. To set bridge_id, you simply assign a value directly to a field within bridge_id. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BridgeIdentifier/","title":"class BridgeIdentifier","text":"<p>Member values </p> Member name Data type Description Usage bridge_id int Unique bridge identifier. You can manipulate the field bridge_id as if it were a regular field. To clear the value of bridge_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BridgeList/","title":"class BridgeList","text":"<p>Member values </p> Member name Data type Description Usage bridgeConfig BridgeConfig List of bridge configuration. Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BridgePortConfig/","title":"class BridgePortConfig","text":"<p>Member values </p> Member name Data type Description Usage target_port int Port on target device. You can manipulate the field target_port as if it were a regular field. To clear the value of target_port and reset it to the default value for its type, you call the ClearField() method of the Message interface. out_port int Port exposed on base's external interface You can manipulate the field out_port as if it were a regular field. To clear the value of out_port and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/BridgeResult/","title":"class BridgeResult","text":"<p>Member values </p> Member name Data type Description Usage bridge_id BridgeIdentifier ID of the bridge on which operation was performed To set bridge_id, you simply assign a value directly to a field within bridge_id. You can also use the parent message's HasField() method to check if a message type field value has been set. status int Result code of operation. You can manipulate the field status as if it were a regular field. To clear the value of status and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CapSenseConfig/","title":"class CapSenseConfig","text":"<p>Member values </p> Member name Data type Description Usage identifier int MessageId You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. mode int Operational mode of the sensor You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. threshold_a float Threshold of the sensor A (successive detection count to trigger a change of state) You can manipulate the field threshold_a as if it were a regular field. To clear the value of threshold_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. threshold_b float Threshold of the sensor B (successive detection count to trigger a change of state) You can manipulate the field threshold_b as if it were a regular field. To clear the value of threshold_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. sensitivity_a float Sensitivity of the sensor A (picofarad) You can manipulate the field sensitivity_a as if it were a regular field. To clear the value of sensitivity_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. sensitivity_b float Sensitivity of the sensor B (picofarad) You can manipulate the field sensitivity_b as if it were a regular field. To clear the value of sensitivity_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CartesianLimitation/","title":"class CartesianLimitation","text":"<p>Member values </p> Member name Data type Description Usage type int Limitation type You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. translation float Translation limitation You can manipulate the field translation as if it were a regular field. To clear the value of translation and reset it to the default value for its type, you call the ClearField() method of the Message interface. orientation float Orientation limitation You can manipulate the field orientation as if it were a regular field. To clear the value of orientation and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CartesianLimitationList/","title":"class CartesianLimitationList","text":"<p>Member values </p> Member name Data type Description Usage limitations CartesianLimitation Limitation Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CartesianSpeed/","title":"class CartesianSpeed","text":"<p>Member values </p> Member name Data type Description Usage translation float Translation speed (in meters per second) You can manipulate the field translation as if it were a regular field. To clear the value of translation and reset it to the default value for its type, you call the ClearField() method of the Message interface. orientation float Orientation speed (in degrees per second) You can manipulate the field orientation as if it were a regular field. To clear the value of orientation and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CartesianTrajectoryConstraint/","title":"class CartesianTrajectoryConstraint","text":"<p>Member values </p> Member name Data type Description Usage speed oneof:type CartesianSpeed Speed constraint You can manipulate the field speed as if it were a regular field. To clear the value of speed and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. duration oneof:type float Duration constraint (in seconds) (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CartesianWaypoint/","title":"class CartesianWaypoint","text":"<p>Member values </p> Member name Data type Description Usage pose Pose Target Cartesian Pose To set pose, you simply assign a value directly to a field within pose. You can also use the parent message's HasField() method to check if a message type field value has been set. reference_frame int The reference frame used for the goal Pose You can manipulate the field reference_frame as if it were a regular field. To clear the value of reference_frame and reset it to the default value for its type, you call the ClearField() method of the Message interface. maximum_linear_velocity float Maximum linear velocity (in m/s) during movement (optional) You can manipulate the field maximum_linear_velocity as if it were a regular field. To clear the value of maximum_linear_velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. maximum_angular_velocity float Maximum angular velocity (in deg/s) during movement (optional) You can manipulate the field maximum_angular_velocity as if it were a regular field. To clear the value of maximum_angular_velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. blending_radius float Blending radius (in m) to use for the movement (if this waypoint is not an endpoint). You can manipulate the field blending_radius as if it were a regular field. To clear the value of blending_radius and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ChangeJointSpeeds/","title":"class ChangeJointSpeeds","text":"<p>Member values </p> Member name Data type Description Usage joint_speeds JointSpeeds Joint speeds To set joint_speeds, you simply assign a value directly to a field within joint_speeds. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ChangeTwist/","title":"class ChangeTwist","text":"<p>Member values </p> Member name Data type Description Usage linear float Linear Cartesian velocity increment (in meters per second) You can manipulate the field linear as if it were a regular field. To clear the value of linear and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular float Angular Cartesian velocity increment (in degrees per second) You can manipulate the field angular as if it were a regular field. To clear the value of angular and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ChangeWrench/","title":"class ChangeWrench","text":"<p>Member values </p> Member name Data type Description Usage force float Linear force increment (in Newton) You can manipulate the field force as if it were a regular field. To clear the value of force and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque float Angular torque increment (in Newton*meters) You can manipulate the field torque as if it were a regular field. To clear the value of torque and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/CommunicationInterfaceConfiguration/","title":"class CommunicationInterfaceConfiguration","text":"<p>Member values </p> Member name Data type Description Usage type int Network type (e.g. Wi-Fi, Wired Ethernet) You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. enable bool Enable configuration. Set to true to enable network, false otherwise You can manipulate the field enable as if it were a regular field. To clear the value of enable and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConfigurationChangeNotification/","title":"class ConfigurationChangeNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Configuration event You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the configuration event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. sequence_handle oneof:configuration_change SequenceHandle Sequence for which the configuration changed You can manipulate the field sequence_handle as if it were a regular field. To clear the value of sequence_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. action_handle oneof:configuration_change ActionHandle Action for which the configuration changed You can manipulate the field action_handle as if it were a regular field. To clear the value of action_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. mapping_handle oneof:configuration_change MappingHandle Mapping for which the configuration changed You can manipulate the field mapping_handle as if it were a regular field. To clear the value of mapping_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. map_group_handle oneof:configuration_change MapGroupHandle Map group for which the configuration changed You can manipulate the field map_group_handle as if it were a regular field. To clear the value of map_group_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. map_handle oneof:configuration_change MapHandle Map for which the configuration changed You can manipulate the field map_handle as if it were a regular field. To clear the value of map_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. user_profile_handle oneof:configuration_change UserProfileHandle User Profile for which the configuration changed You can manipulate the field user_profile_handle as if it were a regular field. To clear the value of user_profile_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. protection_zone_handle oneof:configuration_change ProtectionZoneHandle Protection zone for which the configuration changed You can manipulate the field protection_zone_handle as if it were a regular field. To clear the value of protection_zone_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. safety_handle oneof:configuration_change SafetyHandle Safety for which the configuration changed You can manipulate the field safety_handle as if it were a regular field. To clear the value of safety_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. network_handle oneof:configuration_change NetworkHandle Network element for which the configuration changed You can manipulate the field network_handle as if it were a regular field. To clear the value of network_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. ssid oneof:configuration_change Ssid Wi-Fi instance for which the configuration changed You can manipulate the field ssid as if it were a regular field. To clear the value of ssid and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. controller_handle oneof:configuration_change ControllerHandle Controller instance for which the configuration changed You can manipulate the field controller_handle as if it were a regular field. To clear the value of controller_handle and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. connection Connection Connection that caused the configuration event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConfigurationChangeNotificationList/","title":"class ConfigurationChangeNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ConfigurationChangeNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConstrainedJointAngle/","title":"class ConstrainedJointAngle","text":"<p>Member values </p> Member name Data type Description Usage joint_identifier int Joint identifier (use device_identifier) You can manipulate the field joint_identifier as if it were a regular field. To clear the value of joint_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Joint value (in degrees) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. constraint JointTrajectoryConstraint Constraint to apply to the joint angle (optional) To set constraint, you simply assign a value directly to a field within constraint. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConstrainedJointAngles/","title":"class ConstrainedJointAngles","text":"<p>Member values </p> Member name Data type Description Usage joint_angles JointAngles Joint angles values To set joint_angles, you simply assign a value directly to a field within joint_angles. You can also use the parent message's HasField() method to check if a message type field value has been set. constraint JointTrajectoryConstraint Constraint to apply to all the joint angles (optional) To set constraint, you simply assign a value directly to a field within constraint. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConstrainedOrientation/","title":"class ConstrainedOrientation","text":"<p>Member values </p> Member name Data type Description Usage target_orientation Orientation Cartesian orientation To set target_orientation, you simply assign a value directly to a field within target_orientation. You can also use the parent message's HasField() method to check if a message type field value has been set. constraint CartesianTrajectoryConstraint Constraint to apply to the target orientation To set constraint, you simply assign a value directly to a field within constraint. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConstrainedPose/","title":"class ConstrainedPose","text":"<p>Member values </p> Member name Data type Description Usage target_pose Pose Cartesian pose To set target_pose, you simply assign a value directly to a field within target_pose. You can also use the parent message's HasField() method to check if a message type field value has been set. constraint CartesianTrajectoryConstraint Constraint to apply to the target pose To set constraint, you simply assign a value directly to a field within constraint. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ConstrainedPosition/","title":"class ConstrainedPosition","text":"<p>Member values </p> Member name Data type Description Usage target_position Position Cartesian position To set target_position, you simply assign a value directly to a field within target_position. You can also use the parent message's HasField() method to check if a message type field value has been set. constraint CartesianTrajectoryConstraint Constraint to apply to the target position To set constraint, you simply assign a value directly to a field within constraint. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControlModeInformation/","title":"class ControlModeInformation","text":"<p>Member values </p> Member name Data type Description Usage mode int Control mode You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControlModeNotification/","title":"class ControlModeNotification","text":"<p>Member values </p> Member name Data type Description Usage control_mode int New control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the control mode event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the control mode event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControlModeNotificationList/","title":"class ControlModeNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ControlModeNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerConfiguration/","title":"class ControllerConfiguration","text":"<p>Member values </p> Member name Data type Description Usage handle ControllerHandle Controller identifier To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Controller friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. active_mapping_handle MappingHandle Mapping that is active on this controller To set active_mapping_handle, you simply assign a value directly to a field within active_mapping_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. analog_input_identifier_enum str Name that identifies the enum used to interpret the \u2018analog_input_identifier\u2019 field (for example in ControllerEvent). Thus 'analog_input_identifier_enum' shall take the name of an existing enum (ex. Xbox360AnalogInputIdentifier) You can manipulate the field analog_input_identifier_enum as if it were a regular field. To clear the value of analog_input_identifier_enum and reset it to the default value for its type, you call the ClearField() method of the Message interface. digital_input_identifier_enum str Name that identifies the enum used to interpret the \u2018digital_input_identifier\u2019 field (for example in ControllerEvent). Thus 'digital_input_identifier_enum' shall take the name of an existing enum (ex. Xbox360DigitalInputIdentifier, WristDigitalInputIdentifier) You can manipulate the field digital_input_identifier_enum as if it were a regular field. To clear the value of digital_input_identifier_enum and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerConfigurationList/","title":"class ControllerConfigurationList","text":"<p>Member values </p> Member name Data type Description Usage controller_configurations ControllerConfiguration List of controller configurations Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerConfigurationMode/","title":"class ControllerConfigurationMode","text":"<p>Member values </p> Member name Data type Description Usage enable bool Enable controller configuration mode. Set to true to configure controllers, false for normal operation You can manipulate the field enable as if it were a regular field. To clear the value of enable and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerElementHandle/","title":"class ControllerElementHandle","text":"<p>Member values </p> Member name Data type Description Usage controller_handle ControllerHandle Controller handle To set controller_handle, you simply assign a value directly to a field within controller_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. button oneof:identifier int Button identifier (only set if 'button' controller event, otherwise zero) You can manipulate the field button as if it were a regular field. To clear the value of button and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. axis oneof:identifier int Axis identifier (only set if 'axis' controller event, otherwise zero) You can manipulate the field axis as if it were a regular field. To clear the value of axis and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerElementState/","title":"class ControllerElementState","text":"<p>Member values </p> Member name Data type Description Usage handle ControllerElementHandle Controller element handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. event_type int Type of controller element event that occured You can manipulate the field event_type as if it were a regular field. To clear the value of event_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. axis_value float Axis value (set between -1.0 and 1.0); only set if 'axis' controller element, otherwise set to zero You can manipulate the field axis_value as if it were a regular field. To clear the value of axis_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerEvent/","title":"class ControllerEvent","text":"<p>Member values </p> Member name Data type Description Usage input_type int Type of controller input that caused the event_identifier You can manipulate the field input_type as if it were a regular field. To clear the value of input_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. behavior int Controller behavior that occured You can manipulate the field behavior as if it were a regular field. To clear the value of behavior and reset it to the default value for its type, you call the ClearField() method of the Message interface. input_identifier int Controller input that caused the event You can manipulate the field input_identifier as if it were a regular field. To clear the value of input_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerHandle/","title":"class ControllerHandle","text":"<p>Member values </p> Member name Data type Description Usage type int Controller device type You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. controller_identifier int Controller device identifier You can manipulate the field controller_identifier as if it were a regular field. To clear the value of controller_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerList/","title":"class ControllerList","text":"<p>Member values </p> Member name Data type Description Usage handles ControllerHandle Controller handle Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerNotification/","title":"class ControllerNotification","text":"<p>Member values </p> Member name Data type Description Usage controller_state oneof:state ControllerState Used to indicate if a controller connection or disconnection event occured You can manipulate the field controller_state as if it were a regular field. To clear the value of controller_state and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. controller_element oneof:state ControllerElementState Used to indicate if a specific button (or axis) was pressed (or moved) You can manipulate the field controller_element as if it were a regular field. To clear the value of controller_element and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the controller event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the controller event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerNotificationList/","title":"class ControllerNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ControllerNotification Notifications Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ControllerState/","title":"class ControllerState","text":"<p>Member values </p> Member name Data type Description Usage handle ControllerHandle Controller identifier To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. event_type int Type of controller event that occured You can manipulate the field event_type as if it were a regular field. To clear the value of event_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Delay/","title":"class Delay","text":"<p>Member values </p> Member name Data type Description Usage duration int Delay (in seconds) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/EmergencyStop/","title":"class EmergencyStop","text":"<p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/FactoryNotification/","title":"class FactoryNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Event type You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the factory event to occur To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the factory event to occur To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Faults/","title":"class Faults","text":"<p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Finger/","title":"class Finger","text":"<p>Member values </p> Member name Data type Description Usage finger_identifier int Finger identifier You can manipulate the field finger_identifier as if it were a regular field. To clear the value of finger_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/FirmwareBundleVersions/","title":"class FirmwareBundleVersions","text":"<p>Member values </p> Member name Data type Description Usage main_bundle_version str Version of the main bundle You can manipulate the field main_bundle_version as if it were a regular field. To clear the value of main_bundle_version and reset it to the default value for its type, you call the ClearField() method of the Message interface. components_versions FirmwareComponentVersion List containing all components of the bundle Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/FirmwareComponentVersion/","title":"class FirmwareComponentVersion","text":"<p>Member values </p> Member name Data type Description Usage name str Name of the component You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. version str Version of the component You can manipulate the field version as if it were a regular field. To clear the value of version and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_id int Device id of the component You can manipulate the field device_id as if it were a regular field. To clear the value of device_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/FullIPv4Configuration/","title":"class FullIPv4Configuration","text":"<p>Member values </p> Member name Data type Description Usage handle NetworkHandle Network handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. ipv4_configuration IPv4Configuration IPv4 configuration To set ipv4_configuration, you simply assign a value directly to a field within ipv4_configuration. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/FullUserProfile/","title":"class FullUserProfile","text":"<p>Member values </p> Member name Data type Description Usage user_profile UserProfile Information about the user, including its username. To set user_profile, you simply assign a value directly to a field within user_profile. You can also use the parent message's HasField() method to check if a message type field value has been set. password str User's password You can manipulate the field password as if it were a regular field. To clear the value of password and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GpioCommand/","title":"class GpioCommand","text":"<p>Member values </p> Member name Data type Description Usage port_identifier int Gpio port identifier (0 == base expansion port) You can manipulate the field port_identifier as if it were a regular field. To clear the value of port_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. pin_identifier int Gpio pin identifier You can manipulate the field pin_identifier as if it were a regular field. To clear the value of pin_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. action int Action to perform on gpio You can manipulate the field action as if it were a regular field. To clear the value of action and reset it to the default value for its type, you call the ClearField() method of the Message interface. period int Period, in ms, of GPIO action (applicable only for pulse commands) You can manipulate the field period as if it were a regular field. To clear the value of period and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GpioConfiguration/","title":"class GpioConfiguration","text":"<p>Member values </p> Member name Data type Description Usage port_number int Port number (Base extension port is port 0) You can manipulate the field port_number as if it were a regular field. To clear the value of port_number and reset it to the default value for its type, you call the ClearField() method of the Message interface. pin_configurations GpioPinConfiguration Pin configuration list Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GpioConfigurationList/","title":"class GpioConfigurationList","text":"<p>Member values </p> Member name Data type Description Usage port_configurations GpioConfiguration Port configuration list Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GpioEvent/","title":"class GpioEvent","text":"<p>Member values </p> Member name Data type Description Usage input_type int Type of controller input that caused the event_identifier You can manipulate the field input_type as if it were a regular field. To clear the value of input_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. behavior int GPIO behavior that occured You can manipulate the field behavior as if it were a regular field. To clear the value of behavior and reset it to the default value for its type, you call the ClearField() method of the Message interface. input_identifier int GPIO PIN ID that caused the event You can manipulate the field input_identifier as if it were a regular field. To clear the value of input_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GpioPinConfiguration/","title":"class GpioPinConfiguration","text":"<p>Member values </p> Member name Data type Description Usage pin_id int Pin identifier You can manipulate the field pin_id as if it were a regular field. To clear the value of pin_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. pin_property int Pin property (read only) You can manipulate the field pin_property as if it were a regular field. To clear the value of pin_property and reset it to the default value for its type, you call the ClearField() method of the Message interface. output_enable bool Pin is configured as output if set to TRUE. If output is enabled, input events are masked. You can manipulate the field output_enable as if it were a regular field. To clear the value of output_enable and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_output_value bool Default output pin value. This is the value set when pin is initialized (TRUE == high / FALSE == low). You can manipulate the field default_output_value as if it were a regular field. To clear the value of default_output_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Gripper/","title":"class Gripper","text":"<p>Member values </p> Member name Data type Description Usage finger Finger Finger movements Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GripperCommand/","title":"class GripperCommand","text":"<p>Member values </p> Member name Data type Description Usage mode int Mode in which to control the gripper You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. gripper Gripper Gripper movement values To set gripper, you simply assign a value directly to a field within gripper. You can also use the parent message's HasField() method to check if a message type field value has been set. duration int Duration constraint. If not 0, allows to set a limit (in seconds) to the GripperCommand You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/GripperRequest/","title":"class GripperRequest","text":"<p>Member values </p> Member name Data type Description Usage mode int Mode for which the gripper movement status is requested You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/IKData/","title":"class IKData","text":"<p>Member values </p> Member name Data type Description Usage cartesian_pose Pose Cartesian pose of the end effector used to calculate the corresponding joint angles To set cartesian_pose, you simply assign a value directly to a field within cartesian_pose. You can also use the parent message's HasField() method to check if a message type field value has been set. guess JointAngles Initial guess for the joint angles To set guess, you simply assign a value directly to a field within guess. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/IPv4Configuration/","title":"class IPv4Configuration","text":"<p>Member values </p> Member name Data type Description Usage ip_address int IPv4 address You can manipulate the field ip_address as if it were a regular field. To clear the value of ip_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. subnet_mask int IPv4 subnet mask You can manipulate the field subnet_mask as if it were a regular field. To clear the value of subnet_mask and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_gateway int Gateway IPv4 address You can manipulate the field default_gateway as if it were a regular field. To clear the value of default_gateway and reset it to the default value for its type, you call the ClearField() method of the Message interface. dhcp_enabled bool Enable automatic (DHCP) IPv4 configuration. Set to true to enable DHCP instead of static configuration. You can manipulate the field dhcp_enabled as if it were a regular field. To clear the value of dhcp_enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/IPv4Information/","title":"class IPv4Information","text":"<p>Member values </p> Member name Data type Description Usage ip_address int IPv4 address You can manipulate the field ip_address as if it were a regular field. To clear the value of ip_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. subnet_mask int IPv4 subnet mask You can manipulate the field subnet_mask as if it were a regular field. To clear the value of subnet_mask and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_gateway int Gateway IPv4 address You can manipulate the field default_gateway as if it were a regular field. To clear the value of default_gateway and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointAngle/","title":"class JointAngle","text":"<p>Member values </p> Member name Data type Description Usage joint_identifier int Joint identifier You can manipulate the field joint_identifier as if it were a regular field. To clear the value of joint_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Position (in degrees) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointAngles/","title":"class JointAngles","text":"<p>Member values </p> Member name Data type Description Usage joint_angles JointAngle Array of joint angles Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointLimitation/","title":"class JointLimitation","text":"<p>Member values </p> Member name Data type Description Usage joint_identifier int Joint device identifier You can manipulate the field joint_identifier as if it were a regular field. To clear the value of joint_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. type int Joint limitation type You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Joint limitation value You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointSpeed/","title":"class JointSpeed","text":"<p>Member values </p> Member name Data type Description Usage joint_identifier int Joint identifier You can manipulate the field joint_identifier as if it were a regular field. To clear the value of joint_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Joint speed (in degrees per second) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration int Duration constraint. If not 0, allows to set a limit (in seconds) to the JointsSpeed (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointSpeeds/","title":"class JointSpeeds","text":"<p>Member values </p> Member name Data type Description Usage joint_speeds JointSpeed Array of joint speeds Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. duration int Duration constraint. If not 0, allows to set a limit (in seconds) common to every joint specified in 'joint_speeds' (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointTorque/","title":"class JointTorque","text":"<p>Member values </p> Member name Data type Description Usage joint_identifier int Joint identifier You can manipulate the field joint_identifier as if it were a regular field. To clear the value of joint_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Joint speed (in Newton*meters) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. duration int Duration constraint. If not 0, allows to set a limit (in seconds) to the JointTorque (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointTorques/","title":"class JointTorques","text":"<p>Member values </p> Member name Data type Description Usage joint_torques JointTorque Array of joint torque. Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. duration int Duration constraint. If not 0, allows to set a limit (in seconds) common to every joint specified in 'joint_torques' (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointTrajectoryConstraint/","title":"class JointTrajectoryConstraint","text":"<p>Member values </p> Member name Data type Description Usage type int Joint trajectory constraint type You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float Constraint value (in seconds or in meters per second depending on constraint type) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/JointsLimitationsList/","title":"class JointsLimitationsList","text":"<p>Member values </p> Member name Data type Description Usage joints_limitations JointLimitation Joints Limitations Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/KinematicTrajectoryConstraints/","title":"class KinematicTrajectoryConstraints","text":"<p>Member values </p> Member name Data type Description Usage angular_velocities float Angular velocities for each actuator (in deg/s) You can manipulate the field angular_velocities as if it were a regular field. To clear the value of angular_velocities and reset it to the default value for its type, you call the ClearField() method of the Message interface. linear_velocity float Linear velocity (in m/s) You can manipulate the field linear_velocity as if it were a regular field. To clear the value of linear_velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular_velocity float Angular velocity (in deg/s) You can manipulate the field angular_velocity as if it were a regular field. To clear the value of angular_velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Map/","title":"class Map","text":"<p>Member values </p> Member name Data type Description Usage handle MapHandle Map handle (do not set on createMap() call) To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Map friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. elements MapElement Array of map elements Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapElement/","title":"class MapElement","text":"<p>Member values </p> Member name Data type Description Usage event MapEvent Map event that occured To set event, you simply assign a value directly to a field within event. You can also use the parent message's HasField() method to check if a message type field value has been set. action Action Action to invoke upon event occurence To set action, you simply assign a value directly to a field within action. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Map element friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapEvent/","title":"class MapEvent","text":"<p>Member values </p> Member name Data type Description Usage safety_event oneof:events SafetyEvent Mapped safety event (not implemented yet) You can manipulate the field safety_event as if it were a regular field. To clear the value of safety_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. gpio_event oneof:events GpioEvent Mapped GPIO event You can manipulate the field gpio_event as if it were a regular field. To clear the value of gpio_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. controller_event oneof:events ControllerEvent Mapped controller event You can manipulate the field controller_event as if it were a regular field. To clear the value of controller_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. name str Map event friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapGroup/","title":"class MapGroup","text":"<p>Member values </p> Member name Data type Description Usage group_handle MapGroupHandle Map group handle (do not set on createMapGroup() call) To set group_handle, you simply assign a value directly to a field within group_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Map group friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. related_mapping_handle MappingHandle Mapping that this map group belongs to To set related_mapping_handle, you simply assign a value directly to a field within related_mapping_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. parent_group_handle MapGroupHandle Parent map group (if any) To set parent_group_handle, you simply assign a value directly to a field within parent_group_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. children_map_group_handles MapGroupHandle Children map groups (if any) Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. map_handles MapHandle Array of maps that are included in this map group Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapGroupHandle/","title":"class MapGroupHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Permission of specified map group entity. Must use 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapGroupList/","title":"class MapGroupList","text":"<p>Member values </p> Member name Data type Description Usage map_groups MapGroup Map group Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapHandle/","title":"class MapHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Permission of specified map entity. Must use 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MapList/","title":"class MapList","text":"<p>Member values </p> Member name Data type Description Usage map_list Map map Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Mapping/","title":"class Mapping","text":"<p>Member values </p> Member name Data type Description Usage handle MappingHandle Mapping handle (do not set on createMapping() call) To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Mapping friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. controller_identifier int Associated controller identifier You can manipulate the field controller_identifier as if it were a regular field. To clear the value of controller_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. active_map_group_handle MapGroupHandle Currently active map group (not implemented yet) To set active_map_group_handle, you simply assign a value directly to a field within active_map_group_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. map_group_handles MapGroupHandle Array of associated map groups (not implemented yet) Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. active_map_handle MapHandle Currently active map To set active_map_handle, you simply assign a value directly to a field within active_map_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. map_handles MapHandle Array of associated maps Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MappingHandle/","title":"class MappingHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Mapping identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Permission of specified mapping entity. Must use 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MappingInfoNotification/","title":"class MappingInfoNotification","text":"<p>Member values </p> Member name Data type Description Usage controller_identifier int Identifier of the controller You can manipulate the field controller_identifier as if it were a regular field. To clear the value of controller_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. active_map_handle MapHandle New active map To set active_map_handle, you simply assign a value directly to a field within active_map_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the mapping information event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the mapping information event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. mapping_handle MappingHandle Mapping for which the map was activated To set mapping_handle, you simply assign a value directly to a field within mapping_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MappingInfoNotificationList/","title":"class MappingInfoNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications MappingInfoNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/MappingList/","title":"class MappingList","text":"<p>Member values </p> Member name Data type Description Usage mappings Mapping Mapping Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/NetworkHandle/","title":"class NetworkHandle","text":"<p>Member values </p> Member name Data type Description Usage type int Network type You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/NetworkNotification/","title":"class NetworkNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Event type You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the network event to occur To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the network event to occur To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/NetworkNotificationList/","title":"class NetworkNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications NetworkNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/OperatingModeInformation/","title":"class OperatingModeInformation","text":"<p>Member values </p> Member name Data type Description Usage operating_mode int Operating mode You can manipulate the field operating_mode as if it were a regular field. To clear the value of operating_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_handle DeviceHandle Device matching operating mode (if applicable) To set device_handle, you simply assign a value directly to a field within device_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/OperatingModeNotification/","title":"class OperatingModeNotification","text":"<p>Member values </p> Member name Data type Description Usage operating_mode int New operating mode You can manipulate the field operating_mode as if it were a regular field. To clear the value of operating_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the operating mode event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the operating mode event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. device_handle DeviceHandle Device matching operating mode (if applicable) To set device_handle, you simply assign a value directly to a field within device_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/OperatingModeNotificationList/","title":"class OperatingModeNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications OperatingModeNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Orientation/","title":"class Orientation","text":"<p>Member values </p> Member name Data type Description Usage theta_x float Theta X orientation (in degrees) You can manipulate the field theta_x as if it were a regular field. To clear the value of theta_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_y float Theta Y orientation (in degrees) You can manipulate the field theta_y as if it were a regular field. To clear the value of theta_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_z float Theta Z orientation (in degrees) You can manipulate the field theta_z as if it were a regular field. To clear the value of theta_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/PasswordChange/","title":"class PasswordChange","text":"<p>Member values </p> Member name Data type Description Usage handle UserProfileHandle User handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. old_password str Current password You can manipulate the field old_password as if it were a regular field. To clear the value of old_password and reset it to the default value for its type, you call the ClearField() method of the Message interface. new_password str New password You can manipulate the field new_password as if it were a regular field. To clear the value of new_password and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Point/","title":"class Point","text":"<p>Member values </p> Member name Data type Description Usage x float x (in meters) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float y (in meters) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float z (in meters) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Pose/","title":"class Pose","text":"<p>Member values </p> Member name Data type Description Usage x float X position (in meters) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float Y position (in meters) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float Z position (in meters) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_x float Theta X orientation (in degrees) You can manipulate the field theta_x as if it were a regular field. To clear the value of theta_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_y float Theta Y orienation (in degrees) You can manipulate the field theta_y as if it were a regular field. To clear the value of theta_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_z float Theta Z orientation (in degrees) You can manipulate the field theta_z as if it were a regular field. To clear the value of theta_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Position/","title":"class Position","text":"<p>Member values </p> Member name Data type Description Usage x float X position (in meters) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float Y position (in meters) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float Z position (in meters) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/PreComputedJointTrajectory/","title":"class PreComputedJointTrajectory","text":"<p>Member values </p> Member name Data type Description Usage mode int Trajectory continuity mode You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. trajectory_elements PreComputedJointTrajectoryElement List of pre-computed elements composing the trajectory. Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/PreComputedJointTrajectoryElement/","title":"class PreComputedJointTrajectoryElement","text":"<p>Member values </p> Member name Data type Description Usage joint_angles float Angles values for all joints (in degrees) You can manipulate the field joint_angles as if it were a regular field. To clear the value of joint_angles and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_speeds float Speed values for all joints (in degrees per second) You can manipulate the field joint_speeds as if it were a regular field. To clear the value of joint_speeds and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_accelerations float Acceleration values for all joints (in degrees per second^2) You can manipulate the field joint_accelerations as if it were a regular field. To clear the value of joint_accelerations and reset it to the default value for its type, you call the ClearField() method of the Message interface. time_from_start float Absolute elaspsed time since initial point (in seconds) You can manipulate the field time_from_start as if it were a regular field. To clear the value of time_from_start and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZone/","title":"class ProtectionZone","text":"<p>Member values </p> Member name Data type Description Usage handle ProtectionZoneHandle Protection zone handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Protection zone friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. is_enabled bool True if protection zone is enabled, false otherwise You can manipulate the field is_enabled as if it were a regular field. To clear the value of is_enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. shape ZoneShape Protection zone shape To set shape, you simply assign a value directly to a field within shape. You can also use the parent message's HasField() method to check if a message type field value has been set. limitations CartesianLimitation List of Cartesian limitation Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. envelope_limitations CartesianLimitation List of Cartesian limitation of the envelop Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZoneHandle/","title":"class ProtectionZoneHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Protection zone identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Permission of specified Proctection zone entity. Must use 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZoneInformation/","title":"class ProtectionZoneInformation","text":"<p>Member values </p> Member name Data type Description Usage event int Event type You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZoneList/","title":"class ProtectionZoneList","text":"<p>Member values </p> Member name Data type Description Usage protection_zones ProtectionZone Protection zone Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZoneNotification/","title":"class ProtectionZoneNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Event type You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. handle ProtectionZoneHandle Handle of the protection zone that this event refers to To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the protection zone event to occur To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the protection zone event to occur To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ProtectionZoneNotificationList/","title":"class ProtectionZoneNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ProtectionZoneNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Query/","title":"class Query","text":"<p>Member values </p> Member name Data type Description Usage start_timestamp Timestamp Start timestamp (set to zero to specify it) To set start_timestamp, you simply assign a value directly to a field within start_timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. end_timestamp Timestamp End timestamp (set to zero to not specify it) To set end_timestamp, you simply assign a value directly to a field within end_timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. username str Queried username (set to \"\" to not specify it) You can manipulate the field username as if it were a regular field. To clear the value of username and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RFConfiguration/","title":"class RFConfiguration","text":"<p>Member values </p> Member name Data type Description Usage wifi_enable_state WifiEnableState To set wifi_enable_state, you simply assign a value directly to a field within wifi_enable_state. You can also use the parent message's HasField() method to check if a message type field value has been set. bluetooth_enable_state BluetoothEnableState To set bluetooth_enable_state, you simply assign a value directly to a field within bluetooth_enable_state. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RequestedActionType/","title":"class RequestedActionType","text":"<p>Member values </p> Member name Data type Description Usage action_type int Action type You can manipulate the field action_type as if it were a regular field. To clear the value of action_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RobotEventNotification/","title":"class RobotEventNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Robot event type You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. handle DeviceHandle Identifier of the hardware device connected or disconnected To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the robot event to occur To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the robot event to occur To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RobotEventNotificationList/","title":"class RobotEventNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications RobotEventNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RotationMatrix/","title":"class RotationMatrix","text":"<p>Member values </p> Member name Data type Description Usage row1 RotationMatrixRow First rotation matrix row To set row1, you simply assign a value directly to a field within row1. You can also use the parent message's HasField() method to check if a message type field value has been set. row2 RotationMatrixRow Second rotation matrix row To set row2, you simply assign a value directly to a field within row2. You can also use the parent message's HasField() method to check if a message type field value has been set. row3 RotationMatrixRow Third rotation matrix row To set row3, you simply assign a value directly to a field within row3. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/RotationMatrixRow/","title":"class RotationMatrixRow","text":"<p>Member values </p> Member name Data type Description Usage column1 float Value between -1.0 and 1.0 You can manipulate the field column1 as if it were a regular field. To clear the value of column1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. column2 float Value between -1.0 and 1.0 You can manipulate the field column2 as if it were a regular field. To clear the value of column2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. column3 float Value between -1.0 and 1.0 You can manipulate the field column3 as if it were a regular field. To clear the value of column3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SafetyEvent/","title":"class SafetyEvent","text":"<p>Member values </p> Member name Data type Description Usage safety_handle SafetyHandle Safety that caused the event to occur To set safety_handle, you simply assign a value directly to a field within safety_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SafetyNotificationList/","title":"class SafetyNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications SafetyNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Sequence/","title":"class Sequence","text":"<p>Member values </p> Member name Data type Description Usage handle SequenceHandle Sequence handle To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. name str Sequence name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. tasks SequenceTask Array of tasks that this sequence contains Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceHandle/","title":"class SequenceHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Sequence identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Sequence permission. See 'Kinova.Api.Common.Permission' enum. You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceInfoNotification/","title":"class SequenceInfoNotification","text":"<p>Member values </p> Member name Data type Description Usage event_identifier int Sequence event type You can manipulate the field event_identifier as if it were a regular field. To clear the value of event_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. sequence_handle SequenceHandle Handle of the sequence that this event refers to To set sequence_handle, you simply assign a value directly to a field within sequence_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. task_index int Task index You can manipulate the field task_index as if it were a regular field. To clear the value of task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. group_identifier int This field is deprecated and unused. Use task_index instead. You can manipulate the field group_identifier as if it were a regular field. To clear the value of group_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the sequence event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. abort_details int Details if event_identifier is equal to ABORT You can manipulate the field abort_details as if it were a regular field. To clear the value of abort_details and reset it to the default value for its type, you call the ClearField() method of the Message interface. connection Connection Connection that caused the sequence event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceInfoNotificationList/","title":"class SequenceInfoNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications SequenceInfoNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceInformation/","title":"class SequenceInformation","text":"<p>Member values </p> Member name Data type Description Usage event_identifier int Sequence event type You can manipulate the field event_identifier as if it were a regular field. To clear the value of event_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. task_index int Task index You can manipulate the field task_index as if it were a regular field. To clear the value of task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. task_identifier int Task identifier You can manipulate the field task_identifier as if it were a regular field. To clear the value of task_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceList/","title":"class SequenceList","text":"<p>Member values </p> Member name Data type Description Usage sequence_list Sequence Sequence Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTask/","title":"class SequenceTask","text":"<p>Member values </p> Member name Data type Description Usage group_identifier int This field is deprecated and unused. Use task_index in the SequenceTaskHandle instead. You can manipulate the field group_identifier as if it were a regular field. To clear the value of group_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. action Action Specifies the action to execute To set action, you simply assign a value directly to a field within action. You can also use the parent message's HasField() method to check if a message type field value has been set. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTaskConfiguration/","title":"class SequenceTaskConfiguration","text":"<p>Member values </p> Member name Data type Description Usage sequence_task_handle SequenceTaskHandle Sequence Handle and index of task to update To set sequence_task_handle, you simply assign a value directly to a field within sequence_task_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. sequence_task SequenceTask Configuration information on task to be updated To set sequence_task, you simply assign a value directly to a field within sequence_task. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTaskHandle/","title":"class SequenceTaskHandle","text":"<p>Member values </p> Member name Data type Description Usage sequence_handle SequenceHandle Sequence handle To set sequence_handle, you simply assign a value directly to a field within sequence_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. task_index int Task index inside the sequence You can manipulate the field task_index as if it were a regular field. To clear the value of task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTasks/","title":"class SequenceTasks","text":"<p>Member values </p> Member name Data type Description Usage sequence_tasks SequenceTask List of tasks Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTasksConfiguration/","title":"class SequenceTasksConfiguration","text":"<p>Member values </p> Member name Data type Description Usage sequence_task_handle SequenceTaskHandle Sequence Handle and task index as the insertion point To set sequence_task_handle, you simply assign a value directly to a field within sequence_task_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. sequence_tasks SequenceTask Tasks to be inserted Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTasksPair/","title":"class SequenceTasksPair","text":"<p>Member values </p> Member name Data type Description Usage sequence_handle SequenceHandle Sequence handle To set sequence_handle, you simply assign a value directly to a field within sequence_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. first_task_index int Index of first task You can manipulate the field first_task_index as if it were a regular field. To clear the value of first_task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. second_task_index int Index of second task You can manipulate the field second_task_index as if it were a regular field. To clear the value of second_task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SequenceTasksRange/","title":"class SequenceTasksRange","text":"<p>Member values </p> Member name Data type Description Usage first_task_index int Index of first task You can manipulate the field first_task_index as if it were a regular field. To clear the value of first_task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. second_task_index int Index of second task You can manipulate the field second_task_index as if it were a regular field. To clear the value of second_task_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ServoingModeInformation/","title":"class ServoingModeInformation","text":"<p>Member values </p> Member name Data type Description Usage servoing_mode int Servoing mode You can manipulate the field servoing_mode as if it were a regular field. To clear the value of servoing_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ServoingModeNotification/","title":"class ServoingModeNotification","text":"<p>Member values </p> Member name Data type Description Usage servoing_mode int New servoing mode You can manipulate the field servoing_mode as if it were a regular field. To clear the value of servoing_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the servoing mode event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the servoing mode event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ServoingModeNotificationList/","title":"class ServoingModeNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications ServoingModeNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Snapshot/","title":"class Snapshot","text":"<p>Member values </p> Member name Data type Description Usage snapshot_type int Snapshot type You can manipulate the field snapshot_type as if it were a regular field. To clear the value of snapshot_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Ssid/","title":"class Ssid","text":"<p>Member values </p> Member name Data type Description Usage identifier str Wi-Fi Service Set Identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Stop/","title":"class Stop","text":"<p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SwitchControlMapping/","title":"class SwitchControlMapping","text":"<p>Member values </p> Member name Data type Description Usage controller_identifier int Identifier of the controller for which changing the active map is requested You can manipulate the field controller_identifier as if it were a regular field. To clear the value of controller_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. map_group_handle MapGroupHandle Reference to the map group for which the active map needs to change To set map_group_handle, you simply assign a value directly to a field within map_group_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. map_handle MapHandle Reference to new active map To set map_handle, you simply assign a value directly to a field within map_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/SystemTime/","title":"class SystemTime","text":"<p>Member values </p> Member name Data type Description Usage sec int Seconds after the minute(0-59) You can manipulate the field sec as if it were a regular field. To clear the value of sec and reset it to the default value for its type, you call the ClearField() method of the Message interface. min int Minutes after the hour (0-59) You can manipulate the field min as if it were a regular field. To clear the value of min and reset it to the default value for its type, you call the ClearField() method of the Message interface. hour int Hours since midnight (0-23) You can manipulate the field hour as if it were a regular field. To clear the value of hour and reset it to the default value for its type, you call the ClearField() method of the Message interface. mday int Day of the month (1-31) You can manipulate the field mday as if it were a regular field. To clear the value of mday and reset it to the default value for its type, you call the ClearField() method of the Message interface. mon int Months since January (0-11) You can manipulate the field mon as if it were a regular field. To clear the value of mon and reset it to the default value for its type, you call the ClearField() method of the Message interface. year int Years since 1900 You can manipulate the field year as if it were a regular field. To clear the value of year and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Timeout/","title":"class Timeout","text":"<p>Member values </p> Member name Data type Description Usage value int Timeout value (not implemented yet) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TrajectoryErrorElement/","title":"class TrajectoryErrorElement","text":"<p>Member values </p> Member name Data type Description Usage error_type int Error type You can manipulate the field error_type as if it were a regular field. To clear the value of error_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. error_identifier int This field is deprecated and will be removed in a future release. You can manipulate the field error_identifier as if it were a regular field. To clear the value of error_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. error_value float Erroneous value You can manipulate the field error_value as if it were a regular field. To clear the value of error_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. min_value float Minimum permitted value You can manipulate the field min_value as if it were a regular field. To clear the value of min_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. max_value float Maximum permitted value You can manipulate the field max_value as if it were a regular field. To clear the value of max_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. index int Actuator index You can manipulate the field index as if it were a regular field. To clear the value of index and reset it to the default value for its type, you call the ClearField() method of the Message interface. message str Clarification message for the error You can manipulate the field message as if it were a regular field. To clear the value of message and reset it to the default value for its type, you call the ClearField() method of the Message interface. waypoint_index int Waypoint index (if it applies) You can manipulate the field waypoint_index as if it were a regular field. To clear the value of waypoint_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TrajectoryErrorReport/","title":"class TrajectoryErrorReport","text":"<p>Member values </p> Member name Data type Description Usage trajectory_error_elements TrajectoryErrorElement Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TrajectoryInfo/","title":"class TrajectoryInfo","text":"<p>Member values </p> Member name Data type Description Usage trajectory_info_type int Trajectory information type You can manipulate the field trajectory_info_type as if it were a regular field. To clear the value of trajectory_info_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. waypoint_index int Waypoint index (if applicable) You can manipulate the field waypoint_index as if it were a regular field. To clear the value of waypoint_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_index int Joint index (if applicable) You can manipulate the field joint_index as if it were a regular field. To clear the value of joint_index and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TransformationMatrix/","title":"class TransformationMatrix","text":"<p>Member values </p> Member name Data type Description Usage r0 TransformationRow First transformation row To set r0, you simply assign a value directly to a field within r0. You can also use the parent message's HasField() method to check if a message type field value has been set. r1 TransformationRow Second transformation row To set r1, you simply assign a value directly to a field within r1. You can also use the parent message's HasField() method to check if a message type field value has been set. r2 TransformationRow Third transformation row To set r2, you simply assign a value directly to a field within r2. You can also use the parent message's HasField() method to check if a message type field value has been set. r3 TransformationRow Fourth transformation row To set r3, you simply assign a value directly to a field within r3. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TransformationRow/","title":"class TransformationRow","text":"<p>Member values </p> Member name Data type Description Usage c0 float First column value You can manipulate the field c0 as if it were a regular field. To clear the value of c0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. c1 float Second column value You can manipulate the field c1 as if it were a regular field. To clear the value of c1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. c2 float Third column value You can manipulate the field c2 as if it were a regular field. To clear the value of c2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. c3 float Fourth column value You can manipulate the field c3 as if it were a regular field. To clear the value of c3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Twist/","title":"class Twist","text":"<p>Member values </p> Member name Data type Description Usage linear_x float Linear X velocity (m/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field linear_x as if it were a regular field. To clear the value of linear_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. linear_y float Linear Y velocity (m/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field linear_y as if it were a regular field. To clear the value of linear_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. linear_z float Linear Z velocity (m/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field linear_z as if it were a regular field. To clear the value of linear_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular_x float Angular X velocity (deg/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field angular_x as if it were a regular field. To clear the value of angular_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular_y float Angular Y velocity (deg/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field angular_y as if it were a regular field. To clear the value of angular_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular_z float Angular Z velocity (deg/s or ratio between -1.0 and 1.0 if used with joystick command) You can manipulate the field angular_z as if it were a regular field. To clear the value of angular_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TwistCommand/","title":"class TwistCommand","text":"<p>Member values </p> Member name Data type Description Usage reference_frame int The reference frame used for the twist command You can manipulate the field reference_frame as if it were a regular field. To clear the value of reference_frame and reset it to the default value for its type, you call the ClearField() method of the Message interface. twist Twist Twist value To set twist, you simply assign a value directly to a field within twist. You can also use the parent message's HasField() method to check if a message type field value has been set. duration int Duration constrant. If not 0, allows to set a limit (in milliseconds) to the TwistCommand (not implemented yet) You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/TwistLimitation/","title":"class TwistLimitation","text":"<p>Member values </p> Member name Data type Description Usage linear float Linear limitation You can manipulate the field linear as if it were a regular field. To clear the value of linear and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular float Angular limitation You can manipulate the field angular as if it were a regular field. To clear the value of angular and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/UserList/","title":"class UserList","text":"<p>Member values </p> Member name Data type Description Usage user_handles UserProfileHandle User handle Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/UserNotification/","title":"class UserNotification","text":"<p>Member values </p> Member name Data type Description Usage user_event int User event type You can manipulate the field user_event as if it were a regular field. To clear the value of user_event and reset it to the default value for its type, you call the ClearField() method of the Message interface. modified_user UserProfileHandle User profile that was modified To set modified_user, you simply assign a value directly to a field within modified_user. You can also use the parent message's HasField() method to check if a message type field value has been set. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the user profile event (i.e. user who changed the user profile) To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the user profile event (i.e. user who changed the user profile) To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/UserNotificationList/","title":"class UserNotificationList","text":"<p>Member values </p> Member name Data type Description Usage notifications UserNotification Notification Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/UserProfile/","title":"class UserProfile","text":"<p>Member values </p> Member name Data type Description Usage handle UserProfileHandle User handle (no need to set it with CreateUserProfile()) To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. username str Username, which is used to connect to robot (or login via Web App) You can manipulate the field username as if it were a regular field. To clear the value of username and reset it to the default value for its type, you call the ClearField() method of the Message interface. firstname str User's first name You can manipulate the field firstname as if it were a regular field. To clear the value of firstname and reset it to the default value for its type, you call the ClearField() method of the Message interface. lastname str User's last name You can manipulate the field lastname as if it were a regular field. To clear the value of lastname and reset it to the default value for its type, you call the ClearField() method of the Message interface. application_data str Application data (reserved for use by Web App) You can manipulate the field application_data as if it were a regular field. To clear the value of application_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/UserProfileList/","title":"class UserProfileList","text":"<p>Member values </p> Member name Data type Description Usage user_profiles UserProfile User profile Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Waypoint/","title":"class Waypoint","text":"<p>Member values </p> Member name Data type Description Usage name str Waypoint friendly name You can manipulate the field name as if it were a regular field. To clear the value of name and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular_waypoint oneof:type_of_waypoint AngularWaypoint You can manipulate the field angular_waypoint as if it were a regular field. To clear the value of angular_waypoint and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. cartesian_waypoint oneof:type_of_waypoint CartesianWaypoint You can manipulate the field cartesian_waypoint as if it were a regular field. To clear the value of cartesian_waypoint and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WaypointList/","title":"class WaypointList","text":"<p>Member values </p> Member name Data type Description Usage waypoints Waypoint Array of waypoints Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. duration float Duration of the waypoint list (in seconds). If unspecified or equal to 0, optimal duration is assumed. You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. use_optimal_blending bool At validation if this value is true, the waypoint list with optimal blending will be returned. You can manipulate the field use_optimal_blending as if it were a regular field. To clear the value of use_optimal_blending and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WaypointValidationReport/","title":"class WaypointValidationReport","text":"<p>Member values </p> Member name Data type Description Usage trajectory_error_report TrajectoryErrorReport Report on the validation, the waypoint list is valid if empty To set trajectory_error_report, you simply assign a value directly to a field within trajectory_error_report. You can also use the parent message's HasField() method to check if a message type field value has been set. optimal_waypoint_list WaypointList Validated Waypoint List with optimal blending radius if the option was set To set optimal_waypoint_list, you simply assign a value directly to a field within optimal_waypoint_list. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WifiConfiguration/","title":"class WifiConfiguration","text":"<p>Member values </p> Member name Data type Description Usage ssid Ssid SSID To set ssid, you simply assign a value directly to a field within ssid. You can also use the parent message's HasField() method to check if a message type field value has been set. security_key str Security key to used when connecting to Wi-Fi network You can manipulate the field security_key as if it were a regular field. To clear the value of security_key and reset it to the default value for its type, you call the ClearField() method of the Message interface. connect_automatically bool Connection mode. Set to true so robot automatically connects to this Wi-Fi network at bootup, false otherwise You can manipulate the field connect_automatically as if it were a regular field. To clear the value of connect_automatically and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WifiConfigurationList/","title":"class WifiConfigurationList","text":"<p>Member values </p> Member name Data type Description Usage wifi_configuration_list WifiConfiguration Wi-Fi configurations Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WifiEnableState/","title":"class WifiEnableState","text":"<p>Member values </p> Member name Data type Description Usage enabled bool You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WifiInformation/","title":"class WifiInformation","text":"<p>Member values </p> Member name Data type Description Usage ssid Ssid SSID To set ssid, you simply assign a value directly to a field within ssid. You can also use the parent message's HasField() method to check if a message type field value has been set. security_type int Wi-Fi security type You can manipulate the field security_type as if it were a regular field. To clear the value of security_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. encryption_type int Wi-Fi encryption type You can manipulate the field encryption_type as if it were a regular field. To clear the value of encryption_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. signal_quality int Wi-Fi signal quality You can manipulate the field signal_quality as if it were a regular field. To clear the value of signal_quality and reset it to the default value for its type, you call the ClearField() method of the Message interface. signal_strength int Wi-Fi signal power in dBm You can manipulate the field signal_strength as if it were a regular field. To clear the value of signal_strength and reset it to the default value for its type, you call the ClearField() method of the Message interface. frequency int Wi-Fi operating frequency (channel) in MHz You can manipulate the field frequency as if it were a regular field. To clear the value of frequency and reset it to the default value for its type, you call the ClearField() method of the Message interface. channel int Wi-Fi operating channel You can manipulate the field channel as if it were a regular field. To clear the value of channel and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WifiInformationList/","title":"class WifiInformationList","text":"<p>Member values </p> Member name Data type Description Usage wifi_information_list WifiInformation Wi-Fi information Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/Wrench/","title":"class Wrench","text":"<p>Member values </p> Member name Data type Description Usage force_x float Linear X force (Newtons or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field force_x as if it were a regular field. To clear the value of force_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. force_y float Linear Y force (Newtons or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field force_y as if it were a regular field. To clear the value of force_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. force_z float Linear Z force (Newtons or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field force_z as if it were a regular field. To clear the value of force_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque_x float Angular X torque (Newton-meters or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field torque_x as if it were a regular field. To clear the value of torque_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque_y float Angular Y torque (Newton-meters or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field torque_y as if it were a regular field. To clear the value of torque_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque_z float Angular Z torque (Newton-meters or ratio between -1.0 and 1.0 if used with Joystick command) You can manipulate the field torque_z as if it were a regular field. To clear the value of torque_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WrenchCommand/","title":"class WrenchCommand","text":"<p>Member values </p> Member name Data type Description Usage reference_frame int The reference frame used for the wrench command You can manipulate the field reference_frame as if it were a regular field. To clear the value of reference_frame and reset it to the default value for its type, you call the ClearField() method of the Message interface. mode int Mode in which the command is executed You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. wrench Wrench Wrench value To set wrench, you simply assign a value directly to a field within wrench. You can also use the parent message's HasField() method to check if a message type field value has been set. duration int Duration constraint. If not 0, allows to set a limit (in milliseconds) to the WrenchCommand You can manipulate the field duration as if it were a regular field. To clear the value of duration and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/WrenchLimitation/","title":"class WrenchLimitation","text":"<p>Member values </p> Member name Data type Description Usage force float Force limitation You can manipulate the field force as if it were a regular field. To clear the value of force and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque float Torque limitation You can manipulate the field torque as if it were a regular field. To clear the value of torque and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/Base/ZoneShape/","title":"class ZoneShape","text":"<p>Member values </p> Member name Data type Description Usage shape_type int Shape type You can manipulate the field shape_type as if it were a regular field. To clear the value of shape_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. origin Point Origin of the protection zone shape from reference (in meters) To set origin, you simply assign a value directly to a field within origin. You can also use the parent message's HasField() method to check if a message type field value has been set. orientation RotationMatrix Rotation matrix to provide shape orientation To set orientation, you simply assign a value directly to a field within orientation. You can also use the parent message's HasField() method to check if a message type field value has been set. dimensions float Shape size measurement (in meters). If rectangular prism: x, y and z dimensions. If cylinder: radius and height. If sphere: radius You can manipulate the field dimensions as if it were a regular field. To clear the value of dimensions and reset it to the default value for its type, you call the ClearField() method of the Message interface. envelope_thickness float Thickness of envelop around shape (in meters). The envelop is of same shape type as the shape at its center. You can manipulate the field envelope_thickness as if it were a regular field. To clear the value of envelope_thickness and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Base (Python)</p>"},{"location":"messages/BaseCyclic/ActuatorCommand/","title":"class ActuatorCommand","text":"<p>Member values </p> Member name Data type Description Usage command_id int Command ID (first 2 bytes: device ID, last 2 bytes: sequence number) You can manipulate the field command_id as if it were a regular field. To clear the value of command_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. flags int Flags You can manipulate the field flags as if it were a regular field. To clear the value of flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Desired position of the actuator (in degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Desired velocity of the actuator (in degrees per second) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque_joint float Desired torque of the actuator (in Newton * meters) You can manipulate the field torque_joint as if it were a regular field. To clear the value of torque_joint and reset it to the default value for its type, you call the ClearField() method of the Message interface. current_motor float Desired current of the motor (in Amperes) You can manipulate the field current_motor as if it were a regular field. To clear the value of current_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/ActuatorCustomData/","title":"class ActuatorCustomData","text":"<p>Member values </p> Member name Data type Description Usage command_id int Command ID (first 2 bytes: device ID, last 2 bytes: sequence number) You can manipulate the field command_id as if it were a regular field. To clear the value of command_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_0 int Custom data word 0 You can manipulate the field custom_data_0 as if it were a regular field. To clear the value of custom_data_0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_1 int Custom data word 1 You can manipulate the field custom_data_1 as if it were a regular field. To clear the value of custom_data_1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_2 int Custom data word 2 You can manipulate the field custom_data_2 as if it were a regular field. To clear the value of custom_data_2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_3 int Custom data word 3 You can manipulate the field custom_data_3 as if it were a regular field. To clear the value of custom_data_3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_4 int Custom data word 4 You can manipulate the field custom_data_4 as if it were a regular field. To clear the value of custom_data_4 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_5 int Custom data word 5 You can manipulate the field custom_data_5 as if it were a regular field. To clear the value of custom_data_5 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_6 int Custom data word 6 You can manipulate the field custom_data_6 as if it were a regular field. To clear the value of custom_data_6 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_7 int Custom data word 7 You can manipulate the field custom_data_7 as if it were a regular field. To clear the value of custom_data_7 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_8 int Custom data word 8 You can manipulate the field custom_data_8 as if it were a regular field. To clear the value of custom_data_8 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_9 int Custom data word 9 You can manipulate the field custom_data_9 as if it were a regular field. To clear the value of custom_data_9 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_10 int Custom data word 10 You can manipulate the field custom_data_10 as if it were a regular field. To clear the value of custom_data_10 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_11 int Custom data word 11 You can manipulate the field custom_data_11 as if it were a regular field. To clear the value of custom_data_11 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_12 int Custom data word 12 You can manipulate the field custom_data_12 as if it were a regular field. To clear the value of custom_data_12 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_13 int Custom data word 13 You can manipulate the field custom_data_13 as if it were a regular field. To clear the value of custom_data_13 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_14 int Custom data word 14 You can manipulate the field custom_data_14 as if it were a regular field. To clear the value of custom_data_14 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_15 int Custom data word 15 You can manipulate the field custom_data_15 as if it were a regular field. To clear the value of custom_data_15 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/ActuatorFeedback/","title":"class ActuatorFeedback","text":"<p>Member values </p> Member name Data type Description Usage command_id int Command ID (first 2 bytes: device ID, last 2 bytes: sequence number) You can manipulate the field command_id as if it were a regular field. To clear the value of command_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. status_flags int Status flags You can manipulate the field status_flags as if it were a regular field. To clear the value of status_flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. jitter_comm int Jitter from the communication (in microseconds) You can manipulate the field jitter_comm as if it were a regular field. To clear the value of jitter_comm and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Position of the actuator (in degrees) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Velocity of the actuator (in degrees per second) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. torque float Torque of the actuator (in Newton * meters) You can manipulate the field torque as if it were a regular field. To clear the value of torque and reset it to the default value for its type, you call the ClearField() method of the Message interface. current_motor float Current of the motor (in Amperes) You can manipulate the field current_motor as if it were a regular field. To clear the value of current_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. voltage float Voltage of the main board (in Volts) You can manipulate the field voltage as if it were a regular field. To clear the value of voltage and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_motor float Motor temperature (maximum of the three (3) phase temperatures in \u00b0C) You can manipulate the field temperature_motor as if it were a regular field. To clear the value of temperature_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_core float Microcontroller temperature (in degrees Celsius) You can manipulate the field temperature_core as if it were a regular field. To clear the value of temperature_core and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_a int Fault bank A You can manipulate the field fault_bank_a as if it were a regular field. To clear the value of fault_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_b int Fault bank B You can manipulate the field fault_bank_b as if it were a regular field. To clear the value of fault_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_a int Warning bank A You can manipulate the field warning_bank_a as if it were a regular field. To clear the value of warning_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_b int Warning bank B You can manipulate the field warning_bank_b as if it were a regular field. To clear the value of warning_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/BaseFeedback/","title":"class BaseFeedback","text":"<p>Member values </p> Member name Data type Description Usage active_state_connection_identifier int Connection identifier of the last processed command which triggered an arm state change You can manipulate the field active_state_connection_identifier as if it were a regular field. To clear the value of active_state_connection_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. active_state int Active state of the arm You can manipulate the field active_state as if it were a regular field. To clear the value of active_state and reset it to the default value for its type, you call the ClearField() method of the Message interface. arm_voltage float Arm voltage (in Volts) You can manipulate the field arm_voltage as if it were a regular field. To clear the value of arm_voltage and reset it to the default value for its type, you call the ClearField() method of the Message interface. arm_current float Arm current (in Amperes) You can manipulate the field arm_current as if it were a regular field. To clear the value of arm_current and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_cpu float CPU temperature (in degree Celsius) You can manipulate the field temperature_cpu as if it were a regular field. To clear the value of temperature_cpu and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_ambient float Ambient temperature (in degree Celsius) You can manipulate the field temperature_ambient as if it were a regular field. To clear the value of temperature_ambient and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_x float IMU Measured acceleration (X-Axis) of the base (in meters per second squared) You can manipulate the field imu_acceleration_x as if it were a regular field. To clear the value of imu_acceleration_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_y float IMU Measured acceleration (Y-Axis) of the base (in meters per second squared) You can manipulate the field imu_acceleration_y as if it were a regular field. To clear the value of imu_acceleration_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_z float IMU Measured acceleration (Z-Axis) of the base (in meters per second squared) You can manipulate the field imu_acceleration_z as if it were a regular field. To clear the value of imu_acceleration_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_x float IMU Measured angular velocity (X-Axis) of the base (in degrees per second) You can manipulate the field imu_angular_velocity_x as if it were a regular field. To clear the value of imu_angular_velocity_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_y float IMU Measured angular velocity (Y-Axis) of the base (in degrees per second) You can manipulate the field imu_angular_velocity_y as if it were a regular field. To clear the value of imu_angular_velocity_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_z float IMU Measured angular velocity (Z-Axis) of the base (in degrees per second) You can manipulate the field imu_angular_velocity_z as if it were a regular field. To clear the value of imu_angular_velocity_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_x float Measured Cartesian position (X-Axis) of the tool (in meters) You can manipulate the field tool_pose_x as if it were a regular field. To clear the value of tool_pose_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_y float Measured Cartesian position (Y-Axis) of the tool (in meters) You can manipulate the field tool_pose_y as if it were a regular field. To clear the value of tool_pose_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_z float Measured Cartesian position (Z-Axis) of the tool (in meters) You can manipulate the field tool_pose_z as if it were a regular field. To clear the value of tool_pose_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_theta_x float Measured Cartesian orientation (X-Axis) of the tool (in degrees) You can manipulate the field tool_pose_theta_x as if it were a regular field. To clear the value of tool_pose_theta_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_theta_y float Measured Cartesian orientation (Y-Axis) of the tool (in degrees) You can manipulate the field tool_pose_theta_y as if it were a regular field. To clear the value of tool_pose_theta_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_pose_theta_z float Measured Cartesian orientation (Z-Axis) of the tool (in degrees) You can manipulate the field tool_pose_theta_z as if it were a regular field. To clear the value of tool_pose_theta_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_linear_x float Measured Cartesian linear velocity (X-Axis) of the tool (in meters per second) You can manipulate the field tool_twist_linear_x as if it were a regular field. To clear the value of tool_twist_linear_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_linear_y float Measured Cartesian linear velocity (Y-Axis) of the tool (in meters per second) You can manipulate the field tool_twist_linear_y as if it were a regular field. To clear the value of tool_twist_linear_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_linear_z float Measured Cartesian linear velocity (Z-Axis) of the tool (in meters per second) You can manipulate the field tool_twist_linear_z as if it were a regular field. To clear the value of tool_twist_linear_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_angular_x float Measured Cartesian angular velocity (X-Axis) of the tool (in degrees per second) You can manipulate the field tool_twist_angular_x as if it were a regular field. To clear the value of tool_twist_angular_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_angular_y float Measured Cartesian angular velocity (Y-Axis) of the tool (in degrees per second) You can manipulate the field tool_twist_angular_y as if it were a regular field. To clear the value of tool_twist_angular_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_twist_angular_z float Measured Cartesian angular velocity (Z-Axis) of the tool (in degrees per second) You can manipulate the field tool_twist_angular_z as if it were a regular field. To clear the value of tool_twist_angular_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_force_x float Computed force in X-Axis from external wrench (in Newton) You can manipulate the field tool_external_wrench_force_x as if it were a regular field. To clear the value of tool_external_wrench_force_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_force_y float Computed force in Y-Axis from external wrench (in Newton) You can manipulate the field tool_external_wrench_force_y as if it were a regular field. To clear the value of tool_external_wrench_force_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_force_z float Computed force in Z-Axis from external wrench (in Newton) You can manipulate the field tool_external_wrench_force_z as if it were a regular field. To clear the value of tool_external_wrench_force_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_torque_x float Computed torque about X-axis from external wrench (in Newton-meters) You can manipulate the field tool_external_wrench_torque_x as if it were a regular field. To clear the value of tool_external_wrench_torque_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_torque_y float Computed torque about Y-axis from external wrench (in Newton-meters) You can manipulate the field tool_external_wrench_torque_y as if it were a regular field. To clear the value of tool_external_wrench_torque_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_external_wrench_torque_z float Computed torque about Z-axis from external wrench (in Newton-meters) You can manipulate the field tool_external_wrench_torque_z as if it were a regular field. To clear the value of tool_external_wrench_torque_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_a int The arm fault flags bank A (0 if no fault) see Base.SafetyIdentifier You can manipulate the field fault_bank_a as if it were a regular field. To clear the value of fault_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_b int The arm fault flags bank B (0 if no fault) see Base.SafetyIdentifier You can manipulate the field fault_bank_b as if it were a regular field. To clear the value of fault_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_a int The arm warning flags bank A (0 if no warning) see Base.SafetyIdentifier You can manipulate the field warning_bank_a as if it were a regular field. To clear the value of warning_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_b int The arm warning flags bank B (0 if no warning) see Base.SafetyIdentifier You can manipulate the field warning_bank_b as if it were a regular field. To clear the value of warning_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_x float Commanded Cartesian position (X-Axis) of the tool (in meters) You can manipulate the field commanded_tool_pose_x as if it were a regular field. To clear the value of commanded_tool_pose_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_y float Commanded Cartesian position (Y-Axis) of the tool (in meters) You can manipulate the field commanded_tool_pose_y as if it were a regular field. To clear the value of commanded_tool_pose_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_z float Commanded Cartesian position (Z-Axis) of the tool (in meters) You can manipulate the field commanded_tool_pose_z as if it were a regular field. To clear the value of commanded_tool_pose_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_theta_x float Commanded Cartesian orientation (X-Axis) of the tool (in degrees) You can manipulate the field commanded_tool_pose_theta_x as if it were a regular field. To clear the value of commanded_tool_pose_theta_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_theta_y float Commanded Cartesian orientation (Y-Axis) of the tool (in degrees) You can manipulate the field commanded_tool_pose_theta_y as if it were a regular field. To clear the value of commanded_tool_pose_theta_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. commanded_tool_pose_theta_z float Commanded Cartesian orientation (Z-Axis) of the tool (in degrees) You can manipulate the field commanded_tool_pose_theta_z as if it were a regular field. To clear the value of commanded_tool_pose_theta_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/Command/","title":"class Command","text":"<p>Member values </p> Member name Data type Description Usage frame_id int Frame ID You can manipulate the field frame_id as if it were a regular field. To clear the value of frame_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. actuators ActuatorCommand Actuator command (repeated) Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. interconnect Command Interface command To set interconnect, you simply assign a value directly to a field within interconnect. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/CustomData/","title":"class CustomData","text":"<p>Member values </p> Member name Data type Description Usage frame_id int Frame ID You can manipulate the field frame_id as if it were a regular field. To clear the value of frame_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_0 int Custom data word 0 You can manipulate the field custom_data_0 as if it were a regular field. To clear the value of custom_data_0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_1 int Custom data word 1 You can manipulate the field custom_data_1 as if it were a regular field. To clear the value of custom_data_1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_2 int Custom data word 2 You can manipulate the field custom_data_2 as if it were a regular field. To clear the value of custom_data_2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_3 int Custom data word 3 You can manipulate the field custom_data_3 as if it were a regular field. To clear the value of custom_data_3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_4 int Custom data word 4 You can manipulate the field custom_data_4 as if it were a regular field. To clear the value of custom_data_4 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_5 int Custom data word 5 You can manipulate the field custom_data_5 as if it were a regular field. To clear the value of custom_data_5 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_6 int Custom data word 6 You can manipulate the field custom_data_6 as if it were a regular field. To clear the value of custom_data_6 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_7 int Custom data word 7 You can manipulate the field custom_data_7 as if it were a regular field. To clear the value of custom_data_7 and reset it to the default value for its type, you call the ClearField() method of the Message interface. actuators_custom_data ActuatorCustomData Actuator custom data (repeated) Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. interconnect_custom_data CustomData Interconnect custom data To set interconnect_custom_data, you simply assign a value directly to a field within interconnect_custom_data. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/BaseCyclic/Feedback/","title":"class Feedback","text":"<p>Member values </p> Member name Data type Description Usage frame_id int Frame ID You can manipulate the field frame_id as if it were a regular field. To clear the value of frame_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. base BaseFeedback Base feedback To set base, you simply assign a value directly to a field within base. You can also use the parent message's HasField() method to check if a message type field value has been set. actuators ActuatorFeedback Actuator feedback Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. interconnect Feedback Interface feedback To set interconnect, you simply assign a value directly to a field within interconnect. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: BaseCyclic (Python)</p>"},{"location":"messages/Common/Connection/","title":"class Connection","text":"<p>Member values </p> Member name Data type Description Usage user_handle UserProfileHandle User profile handle, or set to zero if no user logged in To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection_information str Connection info (e.g. IP address with port number) You can manipulate the field connection_information as if it were a regular field. To clear the value of connection_information and reset it to the default value for its type, you call the ClearField() method of the Message interface. connection_identifier int Connection identifier You can manipulate the field connection_identifier as if it were a regular field. To clear the value of connection_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/CountryCode/","title":"class CountryCode","text":"<p>Member values </p> Member name Data type Description Usage identifier int ISO3166 country code identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/DeviceHandle/","title":"class DeviceHandle","text":"<p>Member values </p> Member name Data type Description Usage device_type int Device type You can manipulate the field device_type as if it were a regular field. To clear the value of device_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_identifier int Unique device identifier (used with other services) You can manipulate the field device_identifier as if it were a regular field. To clear the value of device_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. order int Unique value indicating the order of that device versus the others to facilitate representation You can manipulate the field order as if it were a regular field. To clear the value of order and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/Empty/","title":"class Empty","text":"<p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/NotificationHandle/","title":"class NotificationHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Notification identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/NotificationOptions/","title":"class NotificationOptions","text":"<p>Member values </p> Member name Data type Description Usage type int Type of notification You can manipulate the field type as if it were a regular field. To clear the value of type and reset it to the default value for its type, you call the ClearField() method of the Message interface. rate_m_sec int Rate value (in meters per second) (if applicable) You can manipulate the field rate_m_sec as if it were a regular field. To clear the value of rate_m_sec and reset it to the default value for its type, you call the ClearField() method of the Message interface. threshold_value float Threshold value (if applicable) You can manipulate the field threshold_value as if it were a regular field. To clear the value of threshold_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/SafetyHandle/","title":"class SafetyHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int Safety identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/SafetyNotification/","title":"class SafetyNotification","text":"<p>Member values </p> Member name Data type Description Usage safety_handle SafetyHandle Safety handle To set safety_handle, you simply assign a value directly to a field within safety_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. value int New safety status You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the safety event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the safety event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/Timestamp/","title":"class Timestamp","text":"<p>Member values </p> Member name Data type Description Usage sec int Number of seconds that have elapsed since Epoch You can manipulate the field sec as if it were a regular field. To clear the value of sec and reset it to the default value for its type, you call the ClearField() method of the Message interface. usec int Number of microseconds that have elapsed since the last second (0-999999) You can manipulate the field usec as if it were a regular field. To clear the value of usec and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/UARTConfiguration/","title":"class UARTConfiguration","text":"<p>Member values </p> Member name Data type Description Usage port_id int UART port identification You can manipulate the field port_id as if it were a regular field. To clear the value of port_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. enabled bool True if UART device is enabled, false otherwise You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. speed int Speed selection You can manipulate the field speed as if it were a regular field. To clear the value of speed and reset it to the default value for its type, you call the ClearField() method of the Message interface. word_length int Word length You can manipulate the field word_length as if it were a regular field. To clear the value of word_length and reset it to the default value for its type, you call the ClearField() method of the Message interface. stop_bits int Stop bits You can manipulate the field stop_bits as if it were a regular field. To clear the value of stop_bits and reset it to the default value for its type, you call the ClearField() method of the Message interface. parity int Parity mode You can manipulate the field parity as if it were a regular field. To clear the value of parity and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/UARTDeviceIdentification/","title":"class UARTDeviceIdentification","text":"<p>Member values </p> Member name Data type Description Usage port_id int UART device port id You can manipulate the field port_id as if it were a regular field. To clear the value of port_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/Common/UserProfileHandle/","title":"class UserProfileHandle","text":"<p>Member values </p> Member name Data type Description Usage identifier int User profile identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. permission int Must use 'Permission' as bitwise You can manipulate the field permission as if it were a regular field. To clear the value of permission and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Common (Python)</p>"},{"location":"messages/ControlConfig/AngularTwist/","title":"class AngularTwist","text":"<p>Member values </p> Member name Data type Description Usage angular float Desired angular speed (degrees / second) You can manipulate the field angular as if it were a regular field. To clear the value of angular and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/CartesianReferenceFrameInfo/","title":"class CartesianReferenceFrameInfo","text":"<p>Member values </p> Member name Data type Description Usage reference_frame int Reference frame You can manipulate the field reference_frame as if it were a regular field. To clear the value of reference_frame and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/CartesianTransform/","title":"class CartesianTransform","text":"<p>Member values </p> Member name Data type Description Usage x float x (in meters) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float y (in meters) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float z (in meters) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_x float Theta x (in degrees) You can manipulate the field theta_x as if it were a regular field. To clear the value of theta_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_y float Theta y (in degrees) You can manipulate the field theta_y as if it were a regular field. To clear the value of theta_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. theta_z float Theta z (in degrees) You can manipulate the field theta_z as if it were a regular field. To clear the value of theta_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/ControlConfigurationNotification/","title":"class ControlConfigurationNotification","text":"<p>Member values </p> Member name Data type Description Usage event int You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the factory event to occur To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the configuration event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/ControlModeInformation/","title":"class ControlModeInformation","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/ControlModeNotification/","title":"class ControlModeNotification","text":"<p>Member values </p> Member name Data type Description Usage control_mode int New control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. timestamp Timestamp Event timestamp To set timestamp, you simply assign a value directly to a field within timestamp. You can also use the parent message's HasField() method to check if a message type field value has been set. user_handle UserProfileHandle User that caused the control mode event To set user_handle, you simply assign a value directly to a field within user_handle. You can also use the parent message's HasField() method to check if a message type field value has been set. connection Connection Connection that caused the control mode event To set connection, you simply assign a value directly to a field within connection. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/DesiredSpeeds/","title":"class DesiredSpeeds","text":"<p>Member values </p> Member name Data type Description Usage linear float Desired linear speed (meters / second) You can manipulate the field linear as if it were a regular field. To clear the value of linear and reset it to the default value for its type, you call the ClearField() method of the Message interface. angular float Desired angular speed (degrees / second) You can manipulate the field angular as if it were a regular field. To clear the value of angular and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_speed float Desired joint speeds (degrees / second) You can manipulate the field joint_speed as if it were a regular field. To clear the value of joint_speed and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/GravityVector/","title":"class GravityVector","text":"<p>Member values </p> Member name Data type Description Usage x float x (meters / second^squared) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float y (meters / second^squared) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float z (meters / second^squared) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/JointAccelerationSoftLimits/","title":"class JointAccelerationSoftLimits","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_acceleration_soft_limits float Software acceleration limits You can manipulate the field joint_acceleration_soft_limits as if it were a regular field. To clear the value of joint_acceleration_soft_limits and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/JointSpeedSoftLimits/","title":"class JointSpeedSoftLimits","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_speed_soft_limits float Software joint speed limits You can manipulate the field joint_speed_soft_limits as if it were a regular field. To clear the value of joint_speed_soft_limits and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/JointSpeeds/","title":"class JointSpeeds","text":"<p>Member values </p> Member name Data type Description Usage joint_speed float Desired joint speeds (degrees / second) You can manipulate the field joint_speed as if it were a regular field. To clear the value of joint_speed and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/KinematicLimits/","title":"class KinematicLimits","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. twist_linear float Linear twist limits You can manipulate the field twist_linear as if it were a regular field. To clear the value of twist_linear and reset it to the default value for its type, you call the ClearField() method of the Message interface. twist_angular float Angular twist limits You can manipulate the field twist_angular as if it were a regular field. To clear the value of twist_angular and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_speed_limits float Joint speed limits You can manipulate the field joint_speed_limits as if it were a regular field. To clear the value of joint_speed_limits and reset it to the default value for its type, you call the ClearField() method of the Message interface. joint_acceleration_limits float Joint Acceleration limits You can manipulate the field joint_acceleration_limits as if it were a regular field. To clear the value of joint_acceleration_limits and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/KinematicLimitsList/","title":"class KinematicLimitsList","text":"<p>Member values </p> Member name Data type Description Usage kinematic_limits_list KinematicLimits List of kinematic limits Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/LinearTwist/","title":"class LinearTwist","text":"<p>Member values </p> Member name Data type Description Usage linear float Desired linear speed (meters / second) You can manipulate the field linear as if it were a regular field. To clear the value of linear and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/PayloadInformation/","title":"class PayloadInformation","text":"<p>Member values </p> Member name Data type Description Usage payload_mass float Tool mass in kg You can manipulate the field payload_mass as if it were a regular field. To clear the value of payload_mass and reset it to the default value for its type, you call the ClearField() method of the Message interface. payload_mass_center Position Tool mass center position relative to the tool reference frame To set payload_mass_center, you simply assign a value directly to a field within payload_mass_center. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/Position/","title":"class Position","text":"<p>Member values </p> Member name Data type Description Usage x float x position (in meters) You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y float y position (in meters) You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. z float z position (in meters) You can manipulate the field z as if it were a regular field. To clear the value of z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/ToolConfiguration/","title":"class ToolConfiguration","text":"<p>Member values </p> Member name Data type Description Usage tool_transform CartesianTransform Cartesian transform tool To set tool_transform, you simply assign a value directly to a field within tool_transform. You can also use the parent message's HasField() method to check if a message type field value has been set. tool_mass float Tool mass (in kg) You can manipulate the field tool_mass as if it were a regular field. To clear the value of tool_mass and reset it to the default value for its type, you call the ClearField() method of the Message interface. tool_mass_center Position Tool mass center position relative to the interface module reference frame To set tool_mass_center, you simply assign a value directly to a field within tool_mass_center. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/TwistAngularSoftLimit/","title":"class TwistAngularSoftLimit","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. twist_angular_soft_limit float Software angular twist limit You can manipulate the field twist_angular_soft_limit as if it were a regular field. To clear the value of twist_angular_soft_limit and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/ControlConfig/TwistLinearSoftLimit/","title":"class TwistLinearSoftLimit","text":"<p>Member values </p> Member name Data type Description Usage control_mode int Control mode You can manipulate the field control_mode as if it were a regular field. To clear the value of control_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. twist_linear_soft_limit float Software linear twist limit You can manipulate the field twist_linear_soft_limit as if it were a regular field. To clear the value of twist_linear_soft_limit and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ControlConfig (Python)</p>"},{"location":"messages/DeviceConfig/BootloaderVersion/","title":"class BootloaderVersion","text":"<p>Member values </p> Member name Data type Description Usage bootloader_version int Bootloader version You can manipulate the field bootloader_version as if it were a regular field. To clear the value of bootloader_version and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/Calibration/","title":"class Calibration","text":"<p>Member values </p> Member name Data type Description Usage calibration_item int Item to calibrate You can manipulate the field calibration_item as if it were a regular field. To clear the value of calibration_item and reset it to the default value for its type, you call the ClearField() method of the Message interface. calibration_parameter CalibrationParameter Parameters associated to calibration item Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/CalibrationElement/","title":"class CalibrationElement","text":"<p>Member values </p> Member name Data type Description Usage calibration_item int Item to get status You can manipulate the field calibration_item as if it were a regular field. To clear the value of calibration_item and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/CalibrationParameter/","title":"class CalibrationParameter","text":"<p>Member values </p> Member name Data type Description Usage calibration_parameter_identifier int Calibration parameter identifier You can manipulate the field calibration_parameter_identifier as if it were a regular field. To clear the value of calibration_parameter_identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. signedIntValue oneof:value int Signed int calibration value. You can manipulate the field signedIntValue as if it were a regular field. To clear the value of signedIntValue and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. unsignedIntValue oneof:value int Unsigned int calibration value. You can manipulate the field unsignedIntValue as if it were a regular field. To clear the value of unsignedIntValue and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. floatValue oneof:value float Float calibration value. You can manipulate the field floatValue as if it were a regular field. To clear the value of floatValue and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/CalibrationResult/","title":"class CalibrationResult","text":"<p>Member values </p> Member name Data type Description Usage calibration_status int Calibration status You can manipulate the field calibration_status as if it were a regular field. To clear the value of calibration_status and reset it to the default value for its type, you call the ClearField() method of the Message interface. calibration_details int Additional information (used when status is in fault) You can manipulate the field calibration_details as if it were a regular field. To clear the value of calibration_details and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/CapSenseConfig/","title":"class CapSenseConfig","text":"<p>Member values </p> Member name Data type Description Usage mode int Operational mode of the sensor You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. threshold_a float Sensitivity of the sensor A (0-100%). You can manipulate the field threshold_a as if it were a regular field. To clear the value of threshold_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. threshold_b float Sensitivity of the sensor B (0-100%). You can manipulate the field threshold_b as if it were a regular field. To clear the value of threshold_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/CapSenseRegister/","title":"class CapSenseRegister","text":"<p>Member values </p> Member name Data type Description Usage address int Register address You can manipulate the field address as if it were a regular field. To clear the value of address and reset it to the default value for its type, you call the ClearField() method of the Message interface. value int Register value You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/DeviceType/","title":"class DeviceType","text":"<p>Member values </p> Member name Data type Description Usage device_type int Device type You can manipulate the field device_type as if it were a regular field. To clear the value of device_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/FirmwareVersion/","title":"class FirmwareVersion","text":"<p>Member values </p> Member name Data type Description Usage firmware_version int Firmware version You can manipulate the field firmware_version as if it were a regular field. To clear the value of firmware_version and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/IPv4Settings/","title":"class IPv4Settings","text":"<p>Member values </p> Member name Data type Description Usage ipv4_address int IPv4Address You can manipulate the field ipv4_address as if it were a regular field. To clear the value of ipv4_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. ipv4_subnet_mask int IPv4SubnetMask You can manipulate the field ipv4_subnet_mask as if it were a regular field. To clear the value of ipv4_subnet_mask and reset it to the default value for its type, you call the ClearField() method of the Message interface. ipv4_default_gateway int IPv4DefaultGateway You can manipulate the field ipv4_default_gateway as if it were a regular field. To clear the value of ipv4_default_gateway and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/MACAddress/","title":"class MACAddress","text":"<p>Member values </p> Member name Data type Description Usage mac_address str MAC address You can manipulate the field mac_address as if it were a regular field. To clear the value of mac_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/ModelNumber/","title":"class ModelNumber","text":"<p>Member values </p> Member name Data type Description Usage model_number str Model number of size 25 including null character You can manipulate the field model_number as if it were a regular field. To clear the value of model_number and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/PartNumber/","title":"class PartNumber","text":"<p>Member values </p> Member name Data type Description Usage part_number str Part number of size 25 including null character You can manipulate the field part_number as if it were a regular field. To clear the value of part_number and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/PartNumberRevision/","title":"class PartNumberRevision","text":"<p>Member values </p> Member name Data type Description Usage part_number_revision str Part number revision You can manipulate the field part_number_revision as if it were a regular field. To clear the value of part_number_revision and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/PowerOnSelfTestResult/","title":"class PowerOnSelfTestResult","text":"<p>Member values </p> Member name Data type Description Usage power_on_self_test_result int Power on self test result You can manipulate the field power_on_self_test_result as if it were a regular field. To clear the value of power_on_self_test_result and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/RebootRqst/","title":"class RebootRqst","text":"<p>Member values </p> Member name Data type Description Usage delay int Bootloader delay You can manipulate the field delay as if it were a regular field. To clear the value of delay and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/RunMode/","title":"class RunMode","text":"<p>Member values </p> Member name Data type Description Usage run_mode int Run mode You can manipulate the field run_mode as if it were a regular field. To clear the value of run_mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyConfiguration/","title":"class SafetyConfiguration","text":"<p>Member values </p> Member name Data type Description Usage handle SafetyHandle Handle to safety to configure To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. error_threshold float Safety error threshold value You can manipulate the field error_threshold as if it were a regular field. To clear the value of error_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_threshold float Safety warning threshold value You can manipulate the field warning_threshold as if it were a regular field. To clear the value of warning_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. enable SafetyEnable Safety enable state To set enable, you simply assign a value directly to a field within enable. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyConfigurationList/","title":"class SafetyConfigurationList","text":"<p>Member values </p> Member name Data type Description Usage configuration SafetyConfiguration Safety configuration Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyEnable/","title":"class SafetyEnable","text":"<p>Member values </p> Member name Data type Description Usage handle SafetyHandle Handle to safety to enable or disable To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. enable bool Safety enable state You can manipulate the field enable as if it were a regular field. To clear the value of enable and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyInformation/","title":"class SafetyInformation","text":"<p>Member values </p> Member name Data type Description Usage handle SafetyHandle Safety handle that this information is about To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. can_change_safety_state bool True if related safety configuration can be modified You can manipulate the field can_change_safety_state as if it were a regular field. To clear the value of can_change_safety_state and reset it to the default value for its type, you call the ClearField() method of the Message interface. has_warning_threshold bool True if safety status can go in Warning You can manipulate the field has_warning_threshold as if it were a regular field. To clear the value of has_warning_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. has_error_threshold bool True if safety status can go in Error You can manipulate the field has_error_threshold as if it were a regular field. To clear the value of has_error_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. limit_type int Safety limit type You can manipulate the field limit_type as if it were a regular field. To clear the value of limit_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_warning_threshold float Default warning threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_warning_threshold' is true) You can manipulate the field default_warning_threshold as if it were a regular field. To clear the value of default_warning_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_error_threshold float Default error threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_error_threshold' is true) You can manipulate the field default_error_threshold as if it were a regular field. To clear the value of default_error_threshold and reset it to the default value for its type, you call the ClearField() method of the Message interface. upper_hard_limit float Maximal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT) You can manipulate the field upper_hard_limit as if it were a regular field. To clear the value of upper_hard_limit and reset it to the default value for its type, you call the ClearField() method of the Message interface. lower_hard_limit float Minimal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT) You can manipulate the field lower_hard_limit as if it were a regular field. To clear the value of lower_hard_limit and reset it to the default value for its type, you call the ClearField() method of the Message interface. status int Current Safety status You can manipulate the field status as if it were a regular field. To clear the value of status and reset it to the default value for its type, you call the ClearField() method of the Message interface. unit int Unit that the safety status is in You can manipulate the field unit as if it were a regular field. To clear the value of unit and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyInformationList/","title":"class SafetyInformationList","text":"<p>Member values </p> Member name Data type Description Usage information SafetyInformation Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyStatus/","title":"class SafetyStatus","text":"<p>Member values </p> Member name Data type Description Usage value int Safety status (e.g. in error, warning or normal state) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SafetyThreshold/","title":"class SafetyThreshold","text":"<p>Member values </p> Member name Data type Description Usage handle SafetyHandle Identifies safety to configure To set handle, you simply assign a value directly to a field within handle. You can also use the parent message's HasField() method to check if a message type field value has been set. value float Safety threshold value You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceConfig/SerialNumber/","title":"class SerialNumber","text":"<p>Member values </p> Member name Data type Description Usage serial_number str Serial number of size 25 including null character You can manipulate the field serial_number as if it were a regular field. To clear the value of serial_number and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: DeviceConfig (Python)</p>"},{"location":"messages/DeviceManager/DeviceHandles/","title":"class DeviceHandles","text":"<p>Member values </p> Member name Data type Description Usage device_handle DeviceHandle Device handle Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: DeviceManager (Python)</p>"},{"location":"messages/GripperCyclic/Command/","title":"class Command","text":"<p>Member values </p> Member name Data type Description Usage command_id MessageId MessageId To set command_id, you simply assign a value directly to a field within command_id. You can also use the parent message's HasField() method to check if a message type field value has been set. flags int Flags You can manipulate the field flags as if it were a regular field. To clear the value of flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. motor_cmd MotorCommand Array of finger commands, one for each finger of the gripper. Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/CustomData/","title":"class CustomData","text":"<p>Member values </p> Member name Data type Description Usage custom_data_id MessageId MessageId To set custom_data_id, you simply assign a value directly to a field within custom_data_id. You can also use the parent message's HasField() method to check if a message type field value has been set. gripper_custom_data CustomDataUnit To set gripper_custom_data, you simply assign a value directly to a field within gripper_custom_data. You can also use the parent message's HasField() method to check if a message type field value has been set. motor_custom_data CustomDataUnit Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/CustomDataUnit/","title":"class CustomDataUnit","text":"<p>Member values </p> Member name Data type Description Usage custom_data_0 int Custom data word 0 You can manipulate the field custom_data_0 as if it were a regular field. To clear the value of custom_data_0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_1 int Custom data word 1 You can manipulate the field custom_data_1 as if it were a regular field. To clear the value of custom_data_1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_2 int Custom data word 2 You can manipulate the field custom_data_2 as if it were a regular field. To clear the value of custom_data_2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_3 int Custom data word 3 You can manipulate the field custom_data_3 as if it were a regular field. To clear the value of custom_data_3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_4 int Custom data word 4 You can manipulate the field custom_data_4 as if it were a regular field. To clear the value of custom_data_4 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_5 int Custom data word 5 You can manipulate the field custom_data_5 as if it were a regular field. To clear the value of custom_data_5 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_6 int Custom data word 6 You can manipulate the field custom_data_6 as if it were a regular field. To clear the value of custom_data_6 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_7 int Custom data word 7 You can manipulate the field custom_data_7 as if it were a regular field. To clear the value of custom_data_7 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_8 int Custom data word 8 You can manipulate the field custom_data_8 as if it were a regular field. To clear the value of custom_data_8 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_9 int Custom data word 9 You can manipulate the field custom_data_9 as if it were a regular field. To clear the value of custom_data_9 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_10 int Custom data word 10 You can manipulate the field custom_data_10 as if it were a regular field. To clear the value of custom_data_10 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_11 int Custom data word 11 You can manipulate the field custom_data_11 as if it were a regular field. To clear the value of custom_data_11 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_12 int Custom data word 12 You can manipulate the field custom_data_12 as if it were a regular field. To clear the value of custom_data_12 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_13 int Custom data word 13 You can manipulate the field custom_data_13 as if it were a regular field. To clear the value of custom_data_13 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_14 int Custom data word 14 You can manipulate the field custom_data_14 as if it were a regular field. To clear the value of custom_data_14 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_15 int Custom data word 15 You can manipulate the field custom_data_15 as if it were a regular field. To clear the value of custom_data_15 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/Feedback/","title":"class Feedback","text":"<p>Member values </p> Member name Data type Description Usage feedback_id MessageId MessageId To set feedback_id, you simply assign a value directly to a field within feedback_id. You can also use the parent message's HasField() method to check if a message type field value has been set. status_flags int Status flags (see GripperConfig.RobotiqGripperStatusFlags) You can manipulate the field status_flags as if it were a regular field. To clear the value of status_flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_a int Fault bank A (see GripperConfig.SafetyIdentifier) You can manipulate the field fault_bank_a as if it were a regular field. To clear the value of fault_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_b int Fault bank B (see GripperConfig.SafetyIdentifier) You can manipulate the field fault_bank_b as if it were a regular field. To clear the value of fault_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_a int Warning bank A (see GripperConfig.SafetyIdentifier) You can manipulate the field warning_bank_a as if it were a regular field. To clear the value of warning_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_b int Warning bank B (see GripperConfig.SafetyIdentifier) You can manipulate the field warning_bank_b as if it were a regular field. To clear the value of warning_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. motor MotorFeedback Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/MessageId/","title":"class MessageId","text":"<p>Member values </p> Member name Data type Description Usage identifier int Message ID (first 2 bytes : device ID, last 2 bytes : sequence number) You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/MotorCommand/","title":"class MotorCommand","text":"<p>Member values </p> Member name Data type Description Usage motor_id int Motor ID (1, nb_motor) You can manipulate the field motor_id as if it were a regular field. To clear the value of motor_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Desired position of the gripper fingers in percentage (0-100%) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Desired velocity in percentage (0-100%) with which position will be set You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. force float This field is deprecated and unused. It will be removed in a future release. You can manipulate the field force as if it were a regular field. To clear the value of force and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/GripperCyclic/MotorFeedback/","title":"class MotorFeedback","text":"<p>Member values </p> Member name Data type Description Usage motor_id int Motor ID (1, nb_motor) You can manipulate the field motor_id as if it were a regular field. To clear the value of motor_id and reset it to the default value for its type, you call the ClearField() method of the Message interface. position float Position of the gripper fingers in percentage (0-100%) You can manipulate the field position as if it were a regular field. To clear the value of position and reset it to the default value for its type, you call the ClearField() method of the Message interface. velocity float Velocity of the gripper fingers in percentage (0-100%) You can manipulate the field velocity as if it were a regular field. To clear the value of velocity and reset it to the default value for its type, you call the ClearField() method of the Message interface. current_motor float Current comsumed by the gripper motor (mA) You can manipulate the field current_motor as if it were a regular field. To clear the value of current_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. voltage float Motor Voltage (V) You can manipulate the field voltage as if it were a regular field. To clear the value of voltage and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_motor float Motor temperature. (degrees Celsius) You can manipulate the field temperature_motor as if it were a regular field. To clear the value of temperature_motor and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: GripperCyclic (Python)</p>"},{"location":"messages/InterconnectConfig/EthernetConfiguration/","title":"class EthernetConfiguration","text":"<p>Member values </p> Member name Data type Description Usage device int Device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. enabled bool True if the ethernet device is enabled, false otherwise You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. speed int Speed selection You can manipulate the field speed as if it were a regular field. To clear the value of speed and reset it to the default value for its type, you call the ClearField() method of the Message interface. duplex int Duplex mode You can manipulate the field duplex as if it were a regular field. To clear the value of duplex and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/EthernetDeviceIdentification/","title":"class EthernetDeviceIdentification","text":"<p>Member values </p> Member name Data type Description Usage device int Ethernet device You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/GPIOConfiguration/","title":"class GPIOConfiguration","text":"<p>Member values </p> Member name Data type Description Usage identifier int GPIO identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. mode int Mode You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. pull int Pull mode You can manipulate the field pull as if it were a regular field. To clear the value of pull and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_value int Default value at power on You can manipulate the field default_value as if it were a regular field. To clear the value of default_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/GPIOIdentification/","title":"class GPIOIdentification","text":"<p>Member values </p> Member name Data type Description Usage identifier int GPIO identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/GPIOState/","title":"class GPIOState","text":"<p>Member values </p> Member name Data type Description Usage identifier int GPIO identifier You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. value int Value You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CConfiguration/","title":"class I2CConfiguration","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. enabled bool True if I2C device is enabled, false otherwise You can manipulate the field enabled as if it were a regular field. To clear the value of enabled and reset it to the default value for its type, you call the ClearField() method of the Message interface. mode int Mode You can manipulate the field mode as if it were a regular field. To clear the value of mode and reset it to the default value for its type, you call the ClearField() method of the Message interface. addressing int Addressing mode You can manipulate the field addressing as if it were a regular field. To clear the value of addressing and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CData/","title":"class I2CData","text":"<p>Member values </p> Member name Data type Description Usage data str Data byte(s) array (max 128 bytes) You can manipulate the field data as if it were a regular field. To clear the value of data and reset it to the default value for its type, you call the ClearField() method of the Message interface. size int Data byte(s) array size You can manipulate the field size as if it were a regular field. To clear the value of size and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CDeviceIdentification/","title":"class I2CDeviceIdentification","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CReadParameter/","title":"class I2CReadParameter","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_address int I2C device address You can manipulate the field device_address as if it were a regular field. To clear the value of device_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. size int I2C number of bytes to read (max 128 bytes) You can manipulate the field size as if it were a regular field. To clear the value of size and reset it to the default value for its type, you call the ClearField() method of the Message interface. timeout int Request timeout in milliseconds You can manipulate the field timeout as if it were a regular field. To clear the value of timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CReadRegisterParameter/","title":"class I2CReadRegisterParameter","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_address int I2C device address You can manipulate the field device_address as if it were a regular field. To clear the value of device_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. register_address int I2C register address (8 or 16 bits) You can manipulate the field register_address as if it were a regular field. To clear the value of register_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. register_address_size int I2C register address size You can manipulate the field register_address_size as if it were a regular field. To clear the value of register_address_size and reset it to the default value for its type, you call the ClearField() method of the Message interface. size int I2C number of bytes to read (max 128 bytes) You can manipulate the field size as if it were a regular field. To clear the value of size and reset it to the default value for its type, you call the ClearField() method of the Message interface. timeout int Request timeout in milliseconds You can manipulate the field timeout as if it were a regular field. To clear the value of timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CWriteParameter/","title":"class I2CWriteParameter","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_address int I2C device address You can manipulate the field device_address as if it were a regular field. To clear the value of device_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. timeout int Request timeout in milliseconds You can manipulate the field timeout as if it were a regular field. To clear the value of timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. data I2CData Data to write To set data, you simply assign a value directly to a field within data. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectConfig/I2CWriteRegisterParameter/","title":"class I2CWriteRegisterParameter","text":"<p>Member values </p> Member name Data type Description Usage device int I2C device identification You can manipulate the field device as if it were a regular field. To clear the value of device and reset it to the default value for its type, you call the ClearField() method of the Message interface. device_address int I2C device address You can manipulate the field device_address as if it were a regular field. To clear the value of device_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. register_address int I2C register address (8 or 16 bits) You can manipulate the field register_address as if it were a regular field. To clear the value of register_address and reset it to the default value for its type, you call the ClearField() method of the Message interface. register_address_size int I2C register address size You can manipulate the field register_address_size as if it were a regular field. To clear the value of register_address_size and reset it to the default value for its type, you call the ClearField() method of the Message interface. timeout int Request timeout in milliseconds You can manipulate the field timeout as if it were a regular field. To clear the value of timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. data I2CData Data to write To set data, you simply assign a value directly to a field within data. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: InterconnectConfig (Python)</p>"},{"location":"messages/InterconnectCyclic/Command/","title":"class Command","text":"<p>Member values </p> Member name Data type Description Usage command_id MessageId MessageId To set command_id, you simply assign a value directly to a field within command_id. You can also use the parent message's HasField() method to check if a message type field value has been set. flags int Flags You can manipulate the field flags as if it were a regular field. To clear the value of flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. gripper_command oneof:tool_command Command Gripper command You can manipulate the field gripper_command as if it were a regular field. To clear the value of gripper_command and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: InterconnectCyclic (Python)</p>"},{"location":"messages/InterconnectCyclic/CustomData/","title":"class CustomData","text":"<p>Member values </p> Member name Data type Description Usage custom_data_id MessageId MessageId To set custom_data_id, you simply assign a value directly to a field within custom_data_id. You can also use the parent message's HasField() method to check if a message type field value has been set. custom_data_0 int Custom data word 0 You can manipulate the field custom_data_0 as if it were a regular field. To clear the value of custom_data_0 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_1 int Custom data word 1 You can manipulate the field custom_data_1 as if it were a regular field. To clear the value of custom_data_1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_2 int Custom data word 2 You can manipulate the field custom_data_2 as if it were a regular field. To clear the value of custom_data_2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_3 int Custom data word 3 You can manipulate the field custom_data_3 as if it were a regular field. To clear the value of custom_data_3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_4 int Custom data word 4 You can manipulate the field custom_data_4 as if it were a regular field. To clear the value of custom_data_4 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_5 int Custom data word 5 You can manipulate the field custom_data_5 as if it were a regular field. To clear the value of custom_data_5 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_6 int Custom data word 6 You can manipulate the field custom_data_6 as if it were a regular field. To clear the value of custom_data_6 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_7 int Custom data word 7 You can manipulate the field custom_data_7 as if it were a regular field. To clear the value of custom_data_7 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_8 int Custom data word 8 You can manipulate the field custom_data_8 as if it were a regular field. To clear the value of custom_data_8 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_9 int Custom data word 9 You can manipulate the field custom_data_9 as if it were a regular field. To clear the value of custom_data_9 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_10 int Custom data word 10 You can manipulate the field custom_data_10 as if it were a regular field. To clear the value of custom_data_10 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_11 int Custom data word 11 You can manipulate the field custom_data_11 as if it were a regular field. To clear the value of custom_data_11 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_12 int Custom data word 12 You can manipulate the field custom_data_12 as if it were a regular field. To clear the value of custom_data_12 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_13 int Custom data word 13 You can manipulate the field custom_data_13 as if it were a regular field. To clear the value of custom_data_13 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_14 int Custom data word 14 You can manipulate the field custom_data_14 as if it were a regular field. To clear the value of custom_data_14 and reset it to the default value for its type, you call the ClearField() method of the Message interface. custom_data_15 int Custom data word 15 You can manipulate the field custom_data_15 as if it were a regular field. To clear the value of custom_data_15 and reset it to the default value for its type, you call the ClearField() method of the Message interface. gripper_custom_data oneof:tool_customData CustomData You can manipulate the field gripper_custom_data as if it were a regular field. To clear the value of gripper_custom_data and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: InterconnectCyclic (Python)</p>"},{"location":"messages/InterconnectCyclic/Feedback/","title":"class Feedback","text":"<p>Member values </p> Member name Data type Description Usage feedback_id MessageId MessageId To set feedback_id, you simply assign a value directly to a field within feedback_id. You can also use the parent message's HasField() method to check if a message type field value has been set. status_flags int Status flags You can manipulate the field status_flags as if it were a regular field. To clear the value of status_flags and reset it to the default value for its type, you call the ClearField() method of the Message interface. jitter_comm int Jitter from the communication (in microseconds) You can manipulate the field jitter_comm as if it were a regular field. To clear the value of jitter_comm and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_x float IMU Measured acceleration (X-Axis) of the interface module (in meters per second ^ squared) You can manipulate the field imu_acceleration_x as if it were a regular field. To clear the value of imu_acceleration_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_y float IMU Measured acceleration (Y-Axis) of the interface module (in meters per second ^ squared) You can manipulate the field imu_acceleration_y as if it were a regular field. To clear the value of imu_acceleration_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_acceleration_z float IMU Measured acceleration (Z-Axis) of the interface module (in meters per second ^ squared) You can manipulate the field imu_acceleration_z as if it were a regular field. To clear the value of imu_acceleration_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_x float IMU Measured angular velocity (X-Axis) of the interface module (in degrees per second) You can manipulate the field imu_angular_velocity_x as if it were a regular field. To clear the value of imu_angular_velocity_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_y float IMU Measured angular velocity (Y-Axis) of the interface module (in degrees per second) You can manipulate the field imu_angular_velocity_y as if it were a regular field. To clear the value of imu_angular_velocity_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. imu_angular_velocity_z float IMU Measured angular velocity (Z-Axis) of the interface module (in degrees per second) You can manipulate the field imu_angular_velocity_z as if it were a regular field. To clear the value of imu_angular_velocity_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. voltage float Voltage of the main board (in Volt) You can manipulate the field voltage as if it were a regular field. To clear the value of voltage and reset it to the default value for its type, you call the ClearField() method of the Message interface. temperature_core float Microcontroller temperature (in degrees Celsius) You can manipulate the field temperature_core as if it were a regular field. To clear the value of temperature_core and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_a int Fault bank A (see InterconnectConfig.SafetyIdentifier) You can manipulate the field fault_bank_a as if it were a regular field. To clear the value of fault_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. fault_bank_b int Fault bank B (see InterconnectConfig.SafetyIdentifier) You can manipulate the field fault_bank_b as if it were a regular field. To clear the value of fault_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_a int Warning bank A (see InterconnectConfig.SafetyIdentifier) You can manipulate the field warning_bank_a as if it were a regular field. To clear the value of warning_bank_a and reset it to the default value for its type, you call the ClearField() method of the Message interface. warning_bank_b int Warning bank B (see InterconnectConfig.SafetyIdentifier) You can manipulate the field warning_bank_b as if it were a regular field. To clear the value of warning_bank_b and reset it to the default value for its type, you call the ClearField() method of the Message interface. gripper_feedback oneof:tool_feedback Feedback Gripper model tool feedback You can manipulate the field gripper_feedback as if it were a regular field. To clear the value of gripper_feedback and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: InterconnectCyclic (Python)</p>"},{"location":"messages/InterconnectCyclic/MessageId/","title":"class MessageId","text":"<p>Member values </p> Member name Data type Description Usage identifier int Message ID (first 2 bytes : device ID, last 2 bytes : sequence number) You can manipulate the field identifier as if it were a regular field. To clear the value of identifier and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: InterconnectCyclic (Python)</p>"},{"location":"messages/ProductConfiguration/CompleteProductConfiguration/","title":"class CompleteProductConfiguration","text":"<p>Member values </p> Member name Data type Description Usage kin str Kinova Identification Number of the device You can manipulate the field kin as if it were a regular field. To clear the value of kin and reset it to the default value for its type, you call the ClearField() method of the Message interface. model int Model of the device You can manipulate the field model as if it were a regular field. To clear the value of model and reset it to the default value for its type, you call the ClearField() method of the Message interface. country_code CountryCode Country code for the device To set country_code, you simply assign a value directly to a field within country_code. You can also use the parent message's HasField() method to check if a message type field value has been set. assembly_plant str Assembly plant of the device You can manipulate the field assembly_plant as if it were a regular field. To clear the value of assembly_plant and reset it to the default value for its type, you call the ClearField() method of the Message interface. model_year str Year of the model You can manipulate the field model_year as if it were a regular field. To clear the value of model_year and reset it to the default value for its type, you call the ClearField() method of the Message interface. degree_of_freedom int Number of DOF for the device You can manipulate the field degree_of_freedom as if it were a regular field. To clear the value of degree_of_freedom and reset it to the default value for its type, you call the ClearField() method of the Message interface. base_type int Type of base for the device You can manipulate the field base_type as if it were a regular field. To clear the value of base_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. end_effector_type int End-effector type of the device You can manipulate the field end_effector_type as if it were a regular field. To clear the value of end_effector_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. vision_module_type int Vision module type of the device You can manipulate the field vision_module_type as if it were a regular field. To clear the value of vision_module_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. interface_module_type int Interface module type of the device You can manipulate the field interface_module_type as if it were a regular field. To clear the value of interface_module_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. arm_laterality int Arm laterality of the device You can manipulate the field arm_laterality as if it were a regular field. To clear the value of arm_laterality and reset it to the default value for its type, you call the ClearField() method of the Message interface. wrist_type int Wrist type of the device You can manipulate the field wrist_type as if it were a regular field. To clear the value of wrist_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"messages/ProductConfiguration/ProductConfigurationEndEffectorType/","title":"class ProductConfigurationEndEffectorType","text":"<p>Member values </p> Member name Data type Description Usage end_effector_type int New end-effector type You can manipulate the field end_effector_type as if it were a regular field. To clear the value of end_effector_type and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: ProductConfiguration (Python)</p>"},{"location":"messages/Session/ConnectionList/","title":"class ConnectionList","text":"<p>Member values </p> Member name Data type Description Usage connection Connection Connection Repeated message fields are represented as an object that acts like a Python sequence. However, You must use add() instead of append(). It also has an extend() function that appends an entire list of messages, but makes a copy of every message in the list. <p>Parent topic: Session (Python)</p>"},{"location":"messages/Session/CreateSessionInfo/","title":"class CreateSessionInfo","text":"<p>Member values </p> Member name Data type Description Usage username str User name You can manipulate the field username as if it were a regular field. To clear the value of username and reset it to the default value for its type, you call the ClearField() method of the Message interface. session_inactivity_timeout int Inactivity period (in milliseconds) allowed before the session times out and closes on its own You can manipulate the field session_inactivity_timeout as if it were a regular field. To clear the value of session_inactivity_timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. password str Password for the user You can manipulate the field password as if it were a regular field. To clear the value of password and reset it to the default value for its type, you call the ClearField() method of the Message interface. connection_inactivity_timeout int Inactivity period (in milliseconds) allowed before the robot stops any movements initiated from this session You can manipulate the field connection_inactivity_timeout as if it were a regular field. To clear the value of connection_inactivity_timeout and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: Session (Python)</p>"},{"location":"messages/VisionConfig/DistortionCoefficients/","title":"class DistortionCoefficients","text":"<p>Member values </p> Member name Data type Description Usage k1 float First radial distortion coefficient You can manipulate the field k1 as if it were a regular field. To clear the value of k1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. k2 float Second radial distortion coefficient You can manipulate the field k2 as if it were a regular field. To clear the value of k2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. k3 float Third radial distortion coefficient You can manipulate the field k3 as if it were a regular field. To clear the value of k3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. p1 float First tangential distortion coefficient You can manipulate the field p1 as if it were a regular field. To clear the value of p1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. p2 float Second tangential distortion coefficient You can manipulate the field p2 as if it were a regular field. To clear the value of p2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/ExtrinsicParameters/","title":"class ExtrinsicParameters","text":"<p>Member values </p> Member name Data type Description Usage rotation RotationMatrix The rotation matrix from depth sensor reference frame to color sensor reference frame To set rotation, you simply assign a value directly to a field within rotation. You can also use the parent message's HasField() method to check if a message type field value has been set. translation TranslationVector The translation vector from depth sensor reference frame to color sensor reference frame To set translation, you simply assign a value directly to a field within translation. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/FocusPoint/","title":"class FocusPoint","text":"<p>Member values </p> Member name Data type Description Usage x int Pixel value on the X axis, between 0 and the current resolution width - 1 You can manipulate the field x as if it were a regular field. To clear the value of x and reset it to the default value for its type, you call the ClearField() method of the Message interface. y int Pixel value on the Y axis, between 0 and the current resolution height - 1 You can manipulate the field y as if it were a regular field. To clear the value of y and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/IntrinsicParameters/","title":"class IntrinsicParameters","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor for which the parameters apply to You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. resolution int The resolution for which the parameters apply to You can manipulate the field resolution as if it were a regular field. To clear the value of resolution and reset it to the default value for its type, you call the ClearField() method of the Message interface. principal_point_x float Horizontal coordinate of the principal point of the image, as a pixel offset from the left edge You can manipulate the field principal_point_x as if it were a regular field. To clear the value of principal_point_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. principal_point_y float Vertical coordinate of the principal point of the image, as a pixel offset from the top edge You can manipulate the field principal_point_y as if it were a regular field. To clear the value of principal_point_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. focal_length_x float Focal length of the image plane, as a multiple of pixel width You can manipulate the field focal_length_x as if it were a regular field. To clear the value of focal_length_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. focal_length_y float Focal length of the image plane, as a multiple of pixel height You can manipulate the field focal_length_y as if it were a regular field. To clear the value of focal_length_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. distortion_coeffs DistortionCoefficients Distortion coefficients To set distortion_coeffs, you simply assign a value directly to a field within distortion_coeffs. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/IntrinsicProfileIdentifier/","title":"class IntrinsicProfileIdentifier","text":"<p>Member values </p> Member name Data type Description Usage sensor int Sensor You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. resolution int Resolution You can manipulate the field resolution as if it were a regular field. To clear the value of resolution and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/ManualFocus/","title":"class ManualFocus","text":"<p>Member values </p> Member name Data type Description Usage value int Abstract value allowing to change the focus distance, between 0 (infinity) and 1023 (close plane) You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/OptionIdentifier/","title":"class OptionIdentifier","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor to configure You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. option int The option to configure on the sensor You can manipulate the field option as if it were a regular field. To clear the value of option and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/OptionInformation/","title":"class OptionInformation","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor (color or depth) You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. option int The option You can manipulate the field option as if it were a regular field. To clear the value of option and reset it to the default value for its type, you call the ClearField() method of the Message interface. supported bool Is the option supported by the chosen sensor? You can manipulate the field supported as if it were a regular field. To clear the value of supported and reset it to the default value for its type, you call the ClearField() method of the Message interface. read_only bool Is the option read-only, or can it be changed? You can manipulate the field read_only as if it were a regular field. To clear the value of read_only and reset it to the default value for its type, you call the ClearField() method of the Message interface. minimum float Minimum value for the option You can manipulate the field minimum as if it were a regular field. To clear the value of minimum and reset it to the default value for its type, you call the ClearField() method of the Message interface. maximum float Maximum value for the option You can manipulate the field maximum as if it were a regular field. To clear the value of maximum and reset it to the default value for its type, you call the ClearField() method of the Message interface. step float Step size for the option value (if it takes on discrete values) You can manipulate the field step as if it were a regular field. To clear the value of step and reset it to the default value for its type, you call the ClearField() method of the Message interface. default_value float Default value for the option You can manipulate the field default_value as if it were a regular field. To clear the value of default_value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/OptionValue/","title":"class OptionValue","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor to configure (color or depth) You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. option int The option to configure You can manipulate the field option as if it were a regular field. To clear the value of option and reset it to the default value for its type, you call the ClearField() method of the Message interface. value float The desired value for the option You can manipulate the field value as if it were a regular field. To clear the value of value and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/RotationMatrix/","title":"class RotationMatrix","text":"<p>Member values </p> Member name Data type Description Usage row1 RotationMatrixRow First rotation matrix row To set row1, you simply assign a value directly to a field within row1. You can also use the parent message's HasField() method to check if a message type field value has been set. row2 RotationMatrixRow Second rotation matrix row To set row2, you simply assign a value directly to a field within row2. You can also use the parent message's HasField() method to check if a message type field value has been set. row3 RotationMatrixRow Third rotation matrix row To set row3, you simply assign a value directly to a field within row3. You can also use the parent message's HasField() method to check if a message type field value has been set. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/RotationMatrixRow/","title":"class RotationMatrixRow","text":"<p>Member values </p> Member name Data type Description Usage column1 float Value between -1.0 and 1.0 You can manipulate the field column1 as if it were a regular field. To clear the value of column1 and reset it to the default value for its type, you call the ClearField() method of the Message interface. column2 float Value between -1.0 and 1.0 You can manipulate the field column2 as if it were a regular field. To clear the value of column2 and reset it to the default value for its type, you call the ClearField() method of the Message interface. column3 float Value between -1.0 and 1.0 You can manipulate the field column3 as if it were a regular field. To clear the value of column3 and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/SensorFocusAction/","title":"class SensorFocusAction","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor on which to perform the focus action You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. focus_action int The focus action to perform on the sensor You can manipulate the field focus_action as if it were a regular field. To clear the value of focus_action and reset it to the default value for its type, you call the ClearField() method of the Message interface. focus_point oneof:action_parameters FocusPoint The X-Y point on which to focus You can manipulate the field focus_point as if it were a regular field. To clear the value of focus_point and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. manual_focus oneof:action_parameters ManualFocus The manual focus abstract value You can manipulate the field manual_focus as if it were a regular field. To clear the value of manual_focus and reset it to the default value for its type, you call the ClearField() method of the Message interface. The message class also has a WhichOneof method that lets you find out which field (if any) in the oneof has been set. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/SensorIdentifier/","title":"class SensorIdentifier","text":"<p>Member values </p> Member name Data type Description Usage sensor int Sensor You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/SensorSettings/","title":"class SensorSettings","text":"<p>Member values </p> Member name Data type Description Usage sensor int The sensor (color or depth) You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. resolution int The resolution setting You can manipulate the field resolution as if it were a regular field. To clear the value of resolution and reset it to the default value for its type, you call the ClearField() method of the Message interface. frame_rate int Frame rate setting You can manipulate the field frame_rate as if it were a regular field. To clear the value of frame_rate and reset it to the default value for its type, you call the ClearField() method of the Message interface. bit_rate int Maximum encoded bit rate You can manipulate the field bit_rate as if it were a regular field. To clear the value of bit_rate and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/TranslationVector/","title":"class TranslationVector","text":"<p>Member values </p> Member name Data type Description Usage t_x float Translation in meters in the x axis You can manipulate the field t_x as if it were a regular field. To clear the value of t_x and reset it to the default value for its type, you call the ClearField() method of the Message interface. t_y float Translation in meters in the y axis You can manipulate the field t_y as if it were a regular field. To clear the value of t_y and reset it to the default value for its type, you call the ClearField() method of the Message interface. t_z float Translation in meters in the z axis You can manipulate the field t_z as if it were a regular field. To clear the value of t_z and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"messages/VisionConfig/VisionNotification/","title":"class VisionNotification","text":"<p>Member values </p> Member name Data type Description Usage event int Vision event You can manipulate the field event as if it were a regular field. To clear the value of event and reset it to the default value for its type, you call the ClearField() method of the Message interface. sensor int The sensor that caused the notification (if applicable) You can manipulate the field sensor as if it were a regular field. To clear the value of sensor and reset it to the default value for its type, you call the ClearField() method of the Message interface. option int The option that caused the notification (if applicable) You can manipulate the field option as if it were a regular field. To clear the value of option and reset it to the default value for its type, you call the ClearField() method of the Message interface. <p>Parent topic: VisionConfig (Python)</p>"},{"location":"summary_pages/ActuatorConfig/","title":"ActuatorConfig (Python)","text":"<p>This page describes the Python ActuatorConfig API.</p>"},{"location":"summary_pages/ActuatorConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to configure actuators</p> <p>ActuatorConfigClient RPCs </p> Function name Return type Input type Description GetAxisOffsets AxisOffsets Empty Retrieves axis offsets for absolute and relative encoder SetAxisOffsets Empty AxisPosition Sets offsets for absolute and relative encoder Invoking this method shall invalidate arm calibration if one exists. This method is for kinova usage only. ReadTorqueCalibration TorqueCalibration Empty Reads torque calibration parameters (internal use only) WriteTorqueCalibration Empty TorqueCalibration Writes torque calibration parameters (internal use only) SetTorqueOffset Empty TorqueOffset Sets zero torque calibration GetControlMode ControlModeInformation Empty Retrieves actuator control mode SetControlMode Empty ControlModeInformation Sets actuator control mode GetActivatedControlLoop ControlLoop Empty Retrieves activated control loop(s) SetActivatedControlLoop Empty ControlLoop Sets activated control loop(s) GetVectorDriveParameters VectorDriveParameters Empty Retrieves motor drive FOC parameters (internal use only) SetVectorDriveParameters Empty VectorDriveParameters Sets motor drive FOC parameters (internal use only) GetEncoderDerivativeParameters EncoderDerivativeParameters Empty Retrieves encoder derivative parameters (internal use only) SetEncoderDerivativeParameters Empty EncoderDerivativeParameters Sets encoder derivative parameters (internal use only) GetControlLoopParameters ControlLoopParameters LoopSelection Retrieves control loop parameters SetControlLoopParameters Empty ControlLoopParameters Sets control loop parameters StartFrequencyResponse Empty FrequencyResponse Starts frequency response test (internal use only) StopFrequencyResponse Empty Empty Stops frequency response test (internal use only) StartStepResponse Empty StepResponse Starts step response test (internal use only) StopStepResponse Empty Empty Stops step response test (internal use only) StartRampResponse Empty RampResponse Starts ramp response test (internal use only) StopRampResponse Empty Empty Stops ramp response test (internal use only) SelectCustomData Empty CustomDataSelection Selects custom data GetSelectedCustomData CustomDataSelection Empty Retrieves selected custom data SetCommandMode Empty CommandModeInformation Sets command mode (config versus cyclic) ClearFaults Empty Empty Clears all error(s) and warning(s) (bank A and B) SetServoing Empty Servoing Enables or disables servoing MoveToPosition Empty PositionCommand Moves the actuator to the desired position GetCommandMode CommandModeInformation Empty Retrieves command mode (config versus cyclic) GetServoing Servoing Empty Retrieves servoing state GetTorqueOffset TorqueOffset Empty Retrieves torque offset calibration SetCoggingFeedforwardMode Empty CoggingFeedforwardModeInformation Sets cogging feedforward mode GetCoggingFeedforwardMode CoggingFeedforwardModeInformation Empty Retrieves cogging feedforward mode"},{"location":"summary_pages/ActuatorConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description AxisOffsets Axis offsets AxisPosition Axis position CoggingFeedforwardModeInformation Cogging feedforward mode CommandModeInformation Command mode ControlLoop Control loop ControlLoopParameters Control loop parameters (discrete transfer function) ControlModeInformation Control mode information CustomDataSelection Selected custom data channels content EncoderDerivativeParameters Variable window derivative parameters FrequencyResponse Frequency response LoopSelection Defines the loop selection PositionCommand Angular position command for an actuator RampResponse Ramp response Servoing Enables/disables servoing StepResponse Step response TorqueCalibration Torque calibration settings TorqueOffset Defines torque offset VectorDriveParameters Field-oriented control PI controller gain values <p>Enumerators </p> Enumerator Description CoggingFeedforwardMode Admissable cogging feedforward modes CommandMode Admissible command modes ControlLoopSelection Admissible control loop selections ControlMode Admissible control modes CustomDataIndex Custom data options SafetyIdentifierBankA Admissible bank A actuator safeties SafetyLimitType Admissible limit types ServiceVersion Identifies ActuatorConfig service current version"},{"location":"summary_pages/ActuatorCyclic/","title":"ActuatorCyclic (Python)","text":"<p>This page describes the Python ActuatorCyclic API.</p>"},{"location":"summary_pages/ActuatorCyclic/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to exchange cyclic data with an actuator</p> <p>ActuatorCyclicClient RPCs </p> Function name Return type Input type Description Refresh Feedback Command Sends a command to a single actuator and receives feedback on status of that actuator RefreshCommand Empty Command Sends a command to a single actuator without feedback RefreshFeedback Feedback MessageId Obtains feedback from a single actuator RefreshCustomData CustomData MessageId Obtains custom data from a single actuator"},{"location":"summary_pages/ActuatorCyclic/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description Command Defines an actuator command CustomData Custom development data, content varies according to debug needs Feedback Status feedback provided by an actuator MessageId Provides a message identifier <p>Enumerators </p> Enumerator Description CommandFlags Identifies actuator commands ServiceVersion Identifies ActuatorCyclic service current version StatusFlags Identifies actuator status"},{"location":"summary_pages/Api/","title":"Api (Python)","text":"<p>This page describes the Python API error codes.</p>"},{"location":"summary_pages/Api/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p>"},{"location":"summary_pages/Api/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Enumerators </p> Enumerator Description ErrorCodes Possible error codes SubErrorCodes Possible sub-error codes"},{"location":"summary_pages/Base/","title":"Base (Python)","text":"<p>This page describes the Python Base API.</p>"},{"location":"summary_pages/Base/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Base service. Broadly useful service. Provides functions for configuring a range of base-related functionalities and for enabling high-level control for the robot.</p> <p>BaseClient RPCs </p> Function name Return type Input type Description CreateUserProfile UserProfileHandle FullUserProfile Creates a user profile and returns a handle to the profile UpdateUserProfile Empty UserProfile Updates an existing user profile ReadUserProfile UserProfile UserProfileHandle Retrieves an existing user profile DeleteUserProfile Empty UserProfileHandle Deletes an existing user profile ReadAllUserProfiles UserProfileList Empty Retrieves all user profiles ReadAllUsers UserList Empty Retrieves the list of all user profile handles ChangePassword Empty PasswordChange Changes the password of an existing user CreateSequence SequenceHandle Sequence Creates a new sequence and returns a handle to the sequence UpdateSequence Empty Sequence Updates an existing sequence ReadSequence Sequence SequenceHandle Retrieves an existing sequence DeleteSequence Empty SequenceHandle Deletes an existing sequence ReadAllSequences SequenceList Empty Retrieves the list of all existing sequences PlaySequence Empty SequenceHandle Plays an existing sequence PlayAdvancedSequence Empty AdvancedSequenceHandle Plays an existing sequence with options StopSequence Empty Empty Stops execution of currently playing sequence PauseSequence Empty Empty Pauses execution of currently playing sequence ResumeSequence Empty Empty Resumes execution of currently paused sequence CreateProtectionZone ProtectionZoneHandle ProtectionZone Creates a new protection zone and returns a handle to the protection zone UpdateProtectionZone Empty ProtectionZone Updates an existing protection zone ReadProtectionZone ProtectionZone ProtectionZoneHandle Retrieves an existing protection zone DeleteProtectionZone Empty ProtectionZoneHandle Deletes an existing protection zone ReadAllProtectionZones ProtectionZoneList Empty Retrieves a list of all protection zones CreateMapping MappingHandle Mapping Creates a new mapping ReadMapping Mapping MappingHandle Retrieves an existing mapping UpdateMapping Empty Mapping Updates an existing mapping DeleteMapping Empty MappingHandle Deletes an existing mapping ReadAllMappings MappingList Empty Retrieves a list of all mappings CreateMap MapHandle Map Creates a new map ReadMap Map MapHandle Retrieves an existing map UpdateMap Empty Map Updates an existing map DeleteMap Empty MapHandle Deletes an existing map ReadAllMaps MapList MappingHandle Retrieves a list of all maps associated to the specified mapping ActivateMap Empty ActivateMapHandle Activates the specified map within the specified map group and mapping CreateAction ActionHandle Action Creates a new action ReadAction Action ActionHandle Retrieves an existing action ReadAllActions ActionList RequestedActionType Retrieves a list of all existing actions DeleteAction Empty ActionHandle Deletes an existing action UpdateAction Empty Action Updates an existing action ExecuteActionFromReference Empty ActionHandle Commands the robot to execute the specified existing action ExecuteAction Empty Action Commands the robot to execute the specified action PauseAction Empty Empty Pauses the currently executed action. ResumeAction can be invoked afterwards StopAction Empty Empty Stops the currently executed action. ResumeAction cannot be invoked afterwards ResumeAction Empty Empty Resumes execution of the currently paused action GetIPv4Configuration IPv4Configuration NetworkHandle Retrieves the IPv4 network configuration for the specified network adapter SetIPv4Configuration Empty FullIPv4Configuration Modifies the IPv4 network configuration for the specified network adapter SetCommunicationInterfaceEnable Empty CommunicationInterfaceConfiguration Enables (or disables) the specified communication interface IsCommunicationInterfaceEnable CommunicationInterfaceConfiguration NetworkHandle Determines if the specified communication interface is enabled (or disabled) GetAvailableWifi WifiInformationList Empty Retrieves the list of available Wi-Fi networks GetWifiInformation WifiInformation Ssid Retrieves information about a specific Wi-Fi network AddWifiConfiguration Empty WifiConfiguration Configures a specific Wi-Fi network DeleteWifiConfiguration Empty Ssid Deletes a specific Wi-Fi network GetAllConfiguredWifis WifiConfigurationList Empty Retrieves the list of configured Wi-Fi networks ConnectWifi Empty Ssid Connects robot to specified Wi-Fi network DisconnectWifi Empty Empty Disconnects the robot from the currently connected Wi-Fi network GetConnectedWifiInformation WifiInformation Empty Retrieves information about the connected Wi-Fi network Unsubscribe Empty NotificationHandle Unsubscribes client from receiving notifications for the specified topic OnNotificationConfigurationChangeTopic NotificationHandle NotificationOptions Subscribes to configuration change topic for notifications OnNotificationMappingInfoTopic NotificationHandle NotificationOptions Subscribes to mapping information topic for notifications OnNotificationControlModeTopic NotificationHandle NotificationOptions Subscribes to control mode topic for notifications. This function may be removed in a future release. It has been moved to ControlConfig service. OnNotificationOperatingModeTopic NotificationHandle NotificationOptions Subscribes to operating mode topic for notifications OnNotificationSequenceInfoTopic NotificationHandle NotificationOptions Subscribes to sequence information topic for notifications OnNotificationProtectionZoneTopic NotificationHandle NotificationOptions Subscribes to protection zone topic for notifications OnNotificationUserTopic NotificationHandle NotificationOptions Subscribes to user topic for notifications OnNotificationControllerTopic NotificationHandle NotificationOptions Subscribes to controller topic for notifications OnNotificationActionTopic NotificationHandle NotificationOptions Subscribes to action topic for notifications OnNotificationRobotEventTopic NotificationHandle NotificationOptions Subscribes to robot event topic for notifications PlayCartesianTrajectory Empty ConstrainedPose Moves robot to the specifed tool pose (position and orientation) while imposing specified constraints. This RPC will be deprecated in a future version and will be replaced by ExecuteWaypointTrajectory.. This function will be removed in a future release. PlayCartesianTrajectoryPosition Empty ConstrainedPosition Moves robot to the specifed position while imposing specified constraints. This RPC will be deprecated in a future version and will be replaced by ExecuteWaypointTrajectory.. This function will be removed in a future release. PlayCartesianTrajectoryOrientation Empty ConstrainedOrientation Moves to the specifed orientation while imposing specified constraints. This RPC will be deprecated in a future version and will be replaced by ExecuteWaypointTrajectory.. This function will be removed in a future release. Stop Empty Empty Stops robot movement GetMeasuredCartesianPose Pose Empty Retrieves the current computed tool pose (position and orientation) for the robot SendWrenchCommand Empty WrenchCommand Sends a wrench command (screw consisting of force and torque) to be applied to the tool. This method is EXPERIMENTAL. SendWrenchJoystickCommand Empty WrenchCommand Sends a wrench (screw consisting of force and torque) joystick command to be applied to the tool. The wrench values sent to this call are expected to be a ratio of maximum value (between -1.0/+1.0). This method is EXPERIMENTAL. SendTwistJoystickCommand Empty TwistCommand Sends a twist (screw consisting of linear and angular velocity) joystick command to be applied to the tool. The twist values sent to this call are expected to be a ratio of the maximum value (between -1.0/+1.0). SendTwistCommand Empty TwistCommand Sends a twist (screw consisting of linear and angular velocity) command to be applied to the tool PlayJointTrajectory Empty ConstrainedJointAngles Moves joints to the specified joint angles while imposing specified constraints. This RPC will be deprecated in a future version and will be replaced by ExecuteWaypointTrajectory.. This function will be removed in a future release. PlaySelectedJointTrajectory Empty ConstrainedJointAngle Moves specifed joint to the specifed joint angle while imposing specified constraints. This RPC will be deprecated in a future version and will be replaced by ExecuteWaypointTrajectory.. This function will be removed in a future release. GetMeasuredJointAngles JointAngles Empty Retrieves the currently measured joint angles for each joint SendJointSpeedsCommand Empty JointSpeeds Sends a set of joint speed commands to all joints with one command. Joint speed commmands must be sent to all joints. If you do not want to move some of the joints, simply send a speed value of 0 degrees / second for that joint. SendSelectedJointSpeedCommand Empty JointSpeed Sends a speed command for a specific joint SendGripperCommand Empty GripperCommand Sends a command to move the gripper GetMeasuredGripperMovement Gripper GripperRequest Retrieves the current gripper movement, that is the current gripper position, force or speed SetAdmittance Empty Admittance Sets the robot in the chosen admittance mode SetOperatingMode Empty OperatingModeInformation Sets a new operating mode. Only Maintenance, Update and Run modes are permitted. ApplyEmergencyStop Empty Empty Stops robot movement and activates emergency stop state. You will not be able to move the robot. Use ClearFaults() to clear the stop. ClearFaults Empty Empty Clears robot stop. Robot is permitted to move again. GetControlMode ControlModeInformation Empty Retrieves current control mode. This function may be removed in a future release. It has been moved to ControlConfig service. GetOperatingMode OperatingModeInformation Empty Retrieves current operating mode SetServoingMode Empty ServoingModeInformation Sets the servoing mode GetServoingMode ServoingModeInformation Empty Retrieves current servoing mode OnNotificationServoingModeTopic NotificationHandle NotificationOptions Subscribes to servoing mode topic for notifications RestoreFactorySettings Empty Empty Deletes all configurations and reverts settings to their factory defaults (except network settings) Reboot Empty Empty Reboots the robot OnNotificationFactoryTopic NotificationHandle NotificationOptions Subscribes to factory topic for notifications GetAllConnectedControllers ControllerList Empty Retrieves the list of all connected controllers GetControllerState ControllerState ControllerHandle Retrieves the state of a specified controller GetActuatorCount ActuatorInformation Empty Retrieves the number of actuators in the robot StartWifiScan Empty Empty Initiates Wi-Fi scanning GetConfiguredWifi WifiConfiguration Ssid Retrieves a configured Wi-Fi network OnNotificationNetworkTopic NotificationHandle NotificationOptions Subscribes to network event notifications GetArmState ArmStateInformation Empty Retrieves current robot arm state OnNotificationArmStateTopic NotificationHandle NotificationOptions Subscribes to robot arm state notifications GetIPv4Information IPv4Information NetworkHandle Retrieves the IPv4 network information for the specified network adapter SetWifiCountryCode Empty CountryCode Sets the Wi-Fi country code GetWifiCountryCode CountryCode Empty Retrieves the Wi-Fi country code SetCapSenseConfig Empty CapSenseConfig Configures capacitive sensor on the gripper or wrist GetCapSenseConfig CapSenseConfig Empty Retrieves configuration of capacitive sensor on the gripper or wrist GetAllJointsSpeedHardLimitation JointsLimitationsList Empty Retrieves speed hard limits for all joints. This function will be removed in a future release. Use GetKinematicHardLimits from the ControlConfig service instead. GetAllJointsTorqueHardLimitation JointsLimitationsList Empty Retrieves torque hard limits for all joints. This function will be removed in a future release. GetTwistHardLimitation TwistLimitation Empty Retrieves twist hard limitations. This function will be removed in a future release. Use GetKinematicHardLimits from the ControlConfig service instead. GetWrenchHardLimitation WrenchLimitation Empty Retrieves wrench hard limitations. This function will be removed in a future release. SendJointSpeedsJoystickCommand Empty JointSpeeds Sends the desired joystick speeds to all joints with one command. The speed values sent to this call are expected to be a ratio of the maximum value (between -1.0/+1.0) Speeds must be sent to all joints. If you don't want to move some of the joints, send a value of 0. SendSelectedJointSpeedJoystickCommand Empty JointSpeed Sends a joystick speed for a specific joint. The speed value sent to this call is expected to be a ratio of the maximum value (between -1.0/+1.0) EnableBridge BridgeResult BridgeConfig Enables TCP bridge to hardware device DisableBridge BridgeResult BridgeIdentifier Disables specified TCP bridge GetBridgeList BridgeList Empty Retrieves list of created bridges GetBridgeConfig BridgeConfig BridgeIdentifier Retrieves configuration for specified bridge PlayPreComputedJointTrajectory Empty PreComputedJointTrajectory Plays a pre-computed angular trajectory GetProductConfiguration CompleteProductConfiguration Empty Retrieves product configuration information UpdateEndEffectorTypeConfiguration Empty ProductConfigurationEndEffectorType Set new end-effector type in product configuration (Identification Number) RestoreFactoryProductConfiguration Empty Empty Restores product configuration to factory product configuration GetTrajectoryErrorReport TrajectoryErrorReport Empty Obtains trajectory error report listing errors for rejected trajectory. Provides some feedback on why the trajectory could not be completed. GetAllJointsSpeedSoftLimitation JointsLimitationsList Empty Retrieves list of soft speed limits for all joints. This function will be removed in a future release. Use GetKinematicSoftLimits from the ControlConfig service instead. GetAllJointsTorqueSoftLimitation JointsLimitationsList Empty Retrieves list of soft torque limits for all joints. This function will be removed in a future release. GetTwistSoftLimitation TwistLimitation Empty Retrieves all twist soft limitations. This function will be removed in a future release. Use GetKinematicSoftLimits from the ControlConfig service instead. GetWrenchSoftLimitation WrenchLimitation Empty Retrieves all wrench soft limitations. This function will be removed in a future release. SetControllerConfigurationMode Empty ControllerConfigurationMode Sets controller configuration mode GetControllerConfigurationMode ControllerConfigurationMode Empty Retrieves current controller configuration mode StartTeaching Empty SequenceTaskHandle Enables the teaching mode on a sequence StopTeaching Empty Empty Disables the teaching mode on a sequence AddSequenceTasks SequenceTasksRange SequenceTasksConfiguration Adds tasks to the specified sequence UpdateSequenceTask Empty SequenceTaskConfiguration Updates a task within the specified sequence SwapSequenceTasks Empty SequenceTasksPair Swaps two task indexes in a sequence ReadSequenceTask SequenceTask SequenceTaskHandle Reads a specific task from the specified sequence ReadAllSequenceTasks SequenceTasks SequenceHandle Reads all tasks from the specified sequence DeleteSequenceTask Empty SequenceTaskHandle Deletes a specific task from the specified sequence DeleteAllSequenceTasks Empty SequenceHandle Deletes all tasks from the specified sequence TakeSnapshot Empty Snapshot Take a snapshot of current robot Cartesian, joint or gripper position GetFirmwareBundleVersions FirmwareBundleVersions Empty Retrieves current firmware bundle versions ExecuteWaypointTrajectory Empty WaypointList Executes a trajectory defined by a series of waypoints in joint space or in Cartesian space MoveSequenceTask Empty SequenceTasksPair Move task to new index in a sequence DuplicateMapping MappingHandle MappingHandle Duplicates an existing mapping DuplicateMap MapHandle MapHandle Duplicates an existing map SetControllerConfiguration Empty ControllerConfiguration Sets controller configuration GetControllerConfiguration ControllerConfiguration ControllerHandle Retrieves current controller configuration GetAllControllerConfigurations ControllerConfigurationList Empty Retrieves all controller configurations ComputeForwardKinematics Pose JointAngles Get the forward kinematics given specified angular positions of actuators ComputeInverseKinematics JointAngles IKData Get the inverse kinematics given a specified cartesian pose and guess of joint angles ValidateWaypointList WaypointValidationReport WaypointList Validate a waypoint list, returns an empty trajectory error report list if the waypoint list is valid. If the use_optimal_blending option is true, a waypoint list with optimal blending will be return. SetWifiEnableState Empty WifiEnableState Enable or disable the wifi capabilities on the arm GetWifiEnableState WifiEnableState Empty Get the wifi capabilities state (enabled or disabled) SetBluetoothEnableState Empty BluetoothEnableState Enable or disable the Bluetooth capabilities on the arm GetBluetoothEnableState BluetoothEnableState Empty Get the Bluetooth capabilities state (enabled or disabled)"},{"location":"summary_pages/Base/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description Action Defines an action. An action is some task performed on the robot. ActionExecutionState Indicates the execution state of an action (not implemented yet) ActionHandle Reference to a specific action ActionList Array of actions ActionNotification Notification about a single action event ActionNotificationList Array of action notifications ActivateMapHandle Reference to a specific new active map for the specified mapping and map group ActuatorInformation A count of the number of actuators in the robot Admittance An admittance mode AdvancedSequenceHandle Reference to a sequence along with execution options AngularWaypoint An angular Waypoint AppendActionInformation Representation of the result of appending (adding at the end) an action to an existing sequence (not implemented yet) ArmStateInformation Information about the arm state ArmStateNotification Notification about a single arm state event BluetoothEnableState BridgeConfig Bridge configuration information. It is used to either create a bridge or to retrieve information about an existing bridge BridgeIdentifier Bridge identifier BridgeList An array of configuration information for different bridges. BridgePortConfig Port configuration information for a TCP port bridge BridgeResult The result of an operation on a specific bridge CapSenseConfig Capacitive sensor configuration information CartesianLimitation Translation and orientation limits for a specified limit type for Cartesian configuration CartesianLimitationList Array of Cartesian limitations CartesianSpeed A Cartesian tool speed (translation speed and angular speed) CartesianTrajectoryConstraint Cartesian trajectory constraint that can be applied when controlling in Cartesian trajectory mode CartesianWaypoint A Cartesian Waypoint ChangeJointSpeeds Action to change the maximum angular velocity per joint by a specific increment ChangeTwist Action to change the maximum Cartesian velocity by a specific increment ChangeWrench Action to change the maximum Cartesian force by a specific increment CommunicationInterfaceConfiguration Configuration information for enabling or disabling a specific communication interface (e.g. Wi-Fi, Wired Ethernet) ConfigurationChangeNotification Representation of a configuration change event ConfigurationChangeNotificationList Array of configuration change notifications ConstrainedJointAngle A single joint angle value with specifed constraint ConstrainedJointAngles An array of joint angles values with specified constraint ConstrainedOrientation Cartesian tool orientation with specified constraint ConstrainedPose Cartesian tool pose with specified constraint ConstrainedPosition Cartesian tool position with specified constraint ControlModeInformation Control mode information This message may be removed in a future release. It has been moved to ControlConfig service. ControlModeNotification Notification about a single control mode event ControlModeNotificationList Array of control mode notifications ControllerConfiguration Controller configuration information ControllerConfigurationList Controller configuration information for multiple controllers ControllerConfigurationMode Controller configuration mode information ControllerElementHandle Reference ro a specific button (or axis) of a controller device ControllerElementState Indicates if a specific button (or axis) was pressed (or moved) ControllerEvent A controller event ControllerHandle Reference to a specific controller device ControllerList Array of references to different controllers ControllerNotification Notification about a single controller event ControllerNotificationList Array of controller notifications ControllerState Indicates if a specific controller is connected (or disconnected) Delay Action to apply a delay EmergencyStop Action to force an emergency of the robot FactoryNotification Notification about a single factory event Faults Action to clear faults Finger Movement of a specified gripper finger FirmwareBundleVersions Firmware bundle versions including main firmware bundle version and components versions FirmwareComponentVersion Individual component with its version FullIPv4Configuration IPv4 configuration for a specific network FullUserProfile Information about a user, together with a password. Full set of information needed to create a user profile. GpioCommand A command to control expansion port's GPIO GpioConfiguration GPIO port configuration information GpioConfigurationList List of GPIO port configurations GpioEvent A GPIO event GpioPinConfiguration GPIO pin configuration information Gripper Gripper movement composed of a series of fingers movement GripperCommand A command to control the gripper movement GripperRequest Request to apply a specific gripper mode IKData Input needed for the calculation of inverse kinematics IPv4Configuration IPv4 configuration information IPv4Information Information about an IPv4 endpoint JointAngle Angle value of a specific joint JointAngles An array of joint angles JointLimitation Limitation for a specified robot joint JointSpeed Speed of a specific joint JointSpeeds An array of joints speeds JointTorque joint torque for a specified joint JointTorques An array of joint torques JointTrajectoryConstraint Joint trajectory constraint that can be applied when controlling a joint in trajectory mode JointsLimitationsList Array of joint limitations KinematicTrajectoryConstraints Angular and Cartesian kinematic constraints (maximum velocities) Map A map as an array of map elements MapElement Associates an event to an action MapEvent A map event MapGroup All information about a map group including the list of maps that it contains and its relationship versus other map groups (not implemented yet) MapGroupHandle Reference to a specific map group (not implemented yet) MapGroupList Array of map groups (not implemented yet) MapHandle Reference to a specific map MapList Array of maps Mapping All information about a mapping including the controller to which it is associated, the array of map groups it contains, the currently active map group, the array of maps it contains and the currently active map MappingHandle Reference to a specific Mapping MappingInfoNotification Notification about a single mapping information event MappingInfoNotificationList Array of mapping information notifications MappingList Array of mappings NetworkHandle Reference to a network NetworkNotification Notification about a single network event NetworkNotificationList Array of network event notifications OperatingModeInformation Information about the operating mode OperatingModeNotification Notification about a single operating mode event OperatingModeNotificationList Array of operating mode notifications Orientation A Cartesian tool orientation. Defines orientation as sequence of three Euler angles using x-y-z Tait-Bryan extrinsic convention. That is, rotation around fixed X-axis, then rotation around fixed Y-axis, then rotation around fixed Z-axis. PasswordChange Information required to change user password Point Coordinates of a Cartesian point Pose A Cartesian tool pose (position and orientation). Orientation is defined as a sequence of three Euler angles using x-y-z Tait-Bryan extrinsic convention. That is, rotation around fixed X-axis, then rotation around fixed Y-axis, then rotation around fixed Z-axis. Position A Cartesian tool position PreComputedJointTrajectory Pre-computed joint trajectory subject to specified continuity constraints. The starting point of the trajectory must have an elapsed time of 0 ms and the angular values must reflect the current state of the robot. The robot control libraries will validate the trajectory fulfills the specified continuity constraints before playing the trajectory. PreComputedJointTrajectoryElement Set of angle, speed, acceleration, and elapsed time values for each joint for a given 1 ms interval. A PreComputedJointTrajectory is made up of a series of these elements. ProtectionZone Protection zone configuration ProtectionZoneHandle Reference to a specific protection zone ProtectionZoneInformation Information about a protection zone event ProtectionZoneList Array of protection zones ProtectionZoneNotification Notification about a single protection zone event ProtectionZoneNotificationList Array of protection zone notifications Query Parameters of an event log query (not implemented yet) RFConfiguration RequestedActionType Message used for requesting all action instances of a specific action type RobotEventNotification Notification about a single robot event RobotEventNotificationList Array of robot event notifications RotationMatrix Representation of a 3x3 rotation matrix. To be a valid rotation matrix, the rows must be orthonormal (the rows must each have norm of 1 and the row vectors must be orthogonal to each other). The determinant of the matrix must also be +1. RotationMatrixRow Single row of a 3x3 rotation matrix. To be a valid possible row of a rotation matrix, the norm of the row must be 1 (the sum of the squares of the row elements has to equal 1). SafetyEvent A safety event (not implemented yet) SafetyNotificationList Array of safety notifications Sequence Information about a sequence SequenceHandle Reference to a specific sequence SequenceInfoNotification Notification about a single sequence information event SequenceInfoNotificationList Array of sequence information notifications SequenceInformation Information about a sequence SequenceList An array of sequences SequenceTask Information on a single task within a sequence SequenceTaskConfiguration Reference to a specific task within a sequence, and configuration information on task to be updated SequenceTaskHandle Reference to a specific task inside a sequence SequenceTasks Information on multiple tasks within a sequence SequenceTasksConfiguration Reference to a specific task within a sequence, and information on list of sequence tasks to be inserted SequenceTasksPair Information on a sequence and a pair of tasks to be operated on SequenceTasksRange Information on a range of task indexes ServoingModeInformation Information about the servoing mode ServoingModeNotification Notification about a single servoing mode event ServoingModeNotificationList Array of servoing mode notifications Snapshot Action parameter to take a snapshot of current robot position Ssid Wi-Fi SSID Stop Action to stop robot movement SwitchControlMapping Action parameter to switch the active controller map SystemTime Identifies the system time (not implemented yet) Timeout Timeout for a specified duration TrajectoryErrorElement Details for a single trajectory validation error TrajectoryErrorReport Report collecting information on different validation errors for a particular trajectory TrajectoryInfo Additional trajectory information TransformationMatrix A 4x4 homogeneous transformation matrix representing the transformation between two reference frames. TransformationRow A single row of a 4x4 homogeneous transformation matrix Twist A twist (linear and angular velocity). TwistCommand A twist command to be applied to the tool TwistLimitation Linear and angular speed limitations for twist configuration UserList Array of user profile handles UserNotification Notification about a single user event UserNotificationList Array of user notifications UserProfile Information about a user UserProfileList Array of user profiles Waypoint A waypoint describing part of a trajectory. WaypointList A waypoint list WaypointValidationReport Waypoint Validation results WifiConfiguration Wi-Fi connection configuration WifiConfigurationList Array of Wi-Fi connection configuration for different networks WifiEnableState WifiInformation Information about a specific Wi-Fi network WifiInformationList Array of information about different Wi-Fi networks Wrench A wrench (force and torque) WrenchCommand A wrench command to be applied to the tool WrenchLimitation Force and torque limitations for wrench configuration ZoneShape Protection zone shape description <p>Enumerators </p> Enumerator Description ActionEvent Admissible action event types ActionType Admissible types of actions AdmittanceMode Admissible admittance modes BackupEvent Admissible backup events (not implemented yet) BridgeStatus Bridge operation status BridgeType Type of port forward bridge to create CapSenseMode Admissible capacitive sensor modes ConfigurationNotificationEvent Admissible configuration events ControlMode Admissible robot control modes. This enum may be removed in a future release. It has been moved to ControlConfig service. ControllerBehavior Admissible controller input behaviors ControllerElementEventType Admissible controller element event types ControllerEventType Admissible controller event types ControllerInputType Admissible controller input types ControllerType Admissible controller types EventIdSequenceInfoNotification Admissible sequence event types FactoryEvent Admissible factory events Gen3GpioPinId Available GPIO PIN (See the user guide at section Base expansion connector) GpioAction Admissible GPIO actions GpioBehavior Admissible GPIO behavior GpioPinPropertyFlags Admissible gpio pin properties GripperMode Admissible gripper control mode JointNavigationDirection Admissible joint navigation directions JointTrajectoryConstraintType Admissible constraint types that can be applied when controlling a joint in trajectory mode LedState Admissible LED states (not implemented yet) LimitationType Admissible limitation types NavigationDirection Admissible map navigation directions NetworkEvent Admissible network events NetworkType Admissible network types OperatingMode Admissible robot operating modes (used to report robot firmware upgrade current state) ProtectionZoneEvent Admissible protection zone events RobotEvent Admissible robot events SafetyIdentifier Admissible Base safeties. Used with BaseCyclic.BaseFeedback.[fault_bank_a ServiceVersion Identifies Base service current version ServoingMode Admissible servoing modes ShapeType Admissible protection zone shape types SignalQuality Admissible signal quality values SnapshotType Admissible types of snapshots SoundType Admissible sound types (not implemented yet) TrajectoryContinuityMode Admissible trajectory continuity mode TrajectoryErrorIdentifier This enum is deprecated and will be removed in a future release TrajectoryErrorType Trajectory validation error types TrajectoryInfoType Additional trajectory info type UserEvent Admissible user event types WifiEncryptionType Admissible Wi-Fi encryption types WifiSecurityType Admissible Wi-Fi Security types WrenchMode Admissible wrench (force) modes WristDigitalInputIdentifier Admissible Wrist digital inputs Xbox360AnalogInputIdentifier Admissible XBOX360 analog inputs Xbox360DigitalInputIdentifier Admissible XBOX360 digital inputs"},{"location":"summary_pages/BaseCyclic/","title":"BaseCyclic (Python)","text":"<p>This page describes the Python BaseCyclic API.</p>"},{"location":"summary_pages/BaseCyclic/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to exchange cyclic data with base</p> <p>BaseCyclicClient RPCs </p> Function name Return type Input type Description Refresh Feedback Command Sends a command to actuators and interface and returns feedback from base, actuators, and interface on actual status RefreshCommand Empty Command Sends a command to actuators and interface without receiving feedback RefreshFeedback Feedback Empty Obtains feedback from base, actuators, and interface on their status RefreshCustomData CustomData CustomData Retrieves custom data"},{"location":"summary_pages/BaseCyclic/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description ActuatorCommand Defines an actuator command ActuatorCustomData Custom development data from an actuator, content varies according to debug needs ActuatorFeedback Defines the feedback provided by an actuator BaseFeedback Defines the feedback provided by the base Command Defines a command provided to robot devices (actuators and interface) CustomData Custom development data, content varies according to debug needs Feedback Defines the feedback provided by robot devices (base, actuators and interface) <p>Enumerators </p> Enumerator Description ServiceVersion Identifies BaseCyclic current version"},{"location":"summary_pages/Common/","title":"Common (Python)","text":"<p>This page describes the Python Common API.</p>"},{"location":"summary_pages/Common/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p>"},{"location":"summary_pages/Common/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description Connection Connection between a user and the robot CountryCode Country code DeviceHandle Reference to a specific device Empty Message used when no information needs to be exchanged between client application and robot, and vice versa NotificationHandle Reference to a specific notification topic NotificationOptions Specifies options associated to a notification SafetyHandle Reference to a specific safety SafetyNotification Notification about a single safety event Timestamp Timestamp based on Epoch (00:00:00 Thursday, January 1, 1970) UARTConfiguration UART configuration details UARTDeviceIdentification UART port id identification UserProfileHandle Reference to a user profile <p>Enumerators </p> Enumerator Description ArmState Admissible robot arm states CartesianReferenceFrame Admissible Cartesian reference frame modes CountryCodeIdentifier Supported ISO3166 country identifiers DeviceTypes Admissible device types NotificationType Admissible notification types Permission Admissible permissions. Used as bitfields SafetyStatusValue Admissible safety statuses UARTParity Admissible UART parity mode UARTSpeed Admissible UART baudrates UARTStopBits Admissible UART stop bits UARTWordLength Admissible UART word lengths Unit Admissible units used throughout API methods"},{"location":"summary_pages/ControlConfig/","title":"ControlConfig (Python)","text":"<p>This page describes the Python ControlConfig API.</p>"},{"location":"summary_pages/ControlConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to configure robot control library</p> <p>ControlConfigClient RPCs </p> Function name Return type Input type Description SetGravityVector Empty GravityVector Sets global gravity vector in terms of base reference frame. This needs to be configured to enable control of the robot in wall or ceiling mounting of the robot. GetGravityVector GravityVector Empty Retrieves global gravity vector SetPayloadInformation Empty PayloadInformation Sets payload information. This needs to be configured so that the control library can take into account the presence of the payload mass in computing the dynamics of the robot. GetPayloadInformation PayloadInformation Empty Retrieves payload information SetToolConfiguration Empty ToolConfiguration Sets tool configuration. This needs to be configured for two reasons. 1) so that the control library can take into account the presence of the tool mass in computing the dynamics of the robot. 2) so that the robot is aware of the tool frame center relative position and orientation to correctly compute and report the tool position. GetToolConfiguration ToolConfiguration Empty Retrieves tool configuration OnNotificationControlConfigurationTopic NotificationHandle NotificationOptions Subscribes to control configuration notifications Unsubscribe Empty NotificationHandle Unsubscribes client from receiving specified type of notifications SetCartesianReferenceFrame Empty CartesianReferenceFrameInfo Defines the reference frame to use with twist and wrench commands GetCartesianReferenceFrame CartesianReferenceFrameInfo Empty Retrieves the current reference frame used by the twist and wrench commands GetControlMode ControlModeInformation Empty Retrieves current control mode SetJointSpeedSoftLimits Empty JointSpeedSoftLimits Set the software joint speed limits. SetTwistLinearSoftLimit Empty TwistLinearSoftLimit Set the software twist linear limit. SetTwistAngularSoftLimit Empty TwistAngularSoftLimit Set the software twist angular limit. SetJointAccelerationSoftLimits Empty JointAccelerationSoftLimits Set the software joint acceleration limits. GetKinematicHardLimits KinematicLimits Empty Retrieves angular and twist hard limits. GetKinematicSoftLimits KinematicLimits ControlModeInformation Retrieves the software kinematic limits for a specific control mode. GetAllKinematicSoftLimits KinematicLimitsList Empty Retrieves the software kinematic limits for all control modes. SetDesiredLinearTwist Empty LinearTwist Set the desired linear twist when using the joystick. SetDesiredAngularTwist Empty AngularTwist Set the desired angular twist when using the joystick. SetDesiredJointSpeeds Empty JointSpeeds Set the desired joint speeds when using the joystick in angular mode. GetDesiredSpeeds DesiredSpeeds Empty Retrieves the desired joystick speeds ResetGravityVector GravityVector Empty Resets gravity vector to default values ResetPayloadInformation PayloadInformation Empty Resets payload information to default values ResetToolConfiguration ToolConfiguration Empty Resets tool configuration to default values ResetJointSpeedSoftLimits JointSpeedSoftLimits ControlModeInformation Resets joint speed soft limits to default values ResetTwistLinearSoftLimit TwistLinearSoftLimit ControlModeInformation Resets twist linear soft limit to default value ResetTwistAngularSoftLimit TwistAngularSoftLimit ControlModeInformation Resets twist angular soft limit to default value ResetJointAccelerationSoftLimits JointAccelerationSoftLimits ControlModeInformation Resets joint acceleration soft limits to default values OnNotificationControlModeTopic NotificationHandle NotificationOptions Subscribes to control mode topic for notifications"},{"location":"summary_pages/ControlConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description AngularTwist Desired Joystick angular speed. CartesianReferenceFrameInfo Cartesian reference frame CartesianTransform Defines a Cartesian transform ControlConfigurationNotification Notification about a single control configuration event ControlModeInformation Control mode information ControlModeNotification Notification about a single control mode event DesiredSpeeds Desired Joystick speeds. GravityVector Defines the gravity vector in terms of the robot base frame. If not explicitly configured, it defaults to (0, 0, -9.81), assuming a mounting on a horizontal surface. If the robot is mounted on a wall or ceiling, the gravity vector relative to the base frame will change. The control library needs to be aware of this to accurately compensate for gravity. JointAccelerationSoftLimits Software Joint acceleration limits JointSpeedSoftLimits Software joint speed limits JointSpeeds Desired Joystick joint speeds. KinematicLimits Kinematic limits KinematicLimitsList Kinematic limits LinearTwist Desired Joystick linear speed. PayloadInformation Defines payload information Position A Cartesian position ToolConfiguration Defines a tool configuration TwistAngularSoftLimit Software twist angular speed limit TwistLinearSoftLimit Software twist linear speed limit <p>Enumerators </p> Enumerator Description ControlConfigurationEvent Admissible control configuration events ControlMode Admissible robot control modes ServiceVersion Identifies ControlConfig current version"},{"location":"summary_pages/DeviceConfig/","title":"DeviceConfig (Python)","text":"<p>This page describes the Python DeviceConfig API.</p>"},{"location":"summary_pages/DeviceConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to get and set device configuration information</p> <p>DeviceConfigClient RPCs </p> Function name Return type Input type Description GetRunMode RunMode Empty Returns the run mode for the device SetRunMode Empty RunMode Sets the run mode for the device GetDeviceType DeviceType Empty Retrieves the type for the device GetFirmwareVersion FirmwareVersion Empty Retrieves the device firmware version GetBootloaderVersion BootloaderVersion Empty Retrieves the device bootloader version GetModelNumber ModelNumber Empty Retrieves the device model number GetPartNumber PartNumber Empty Retrieves the device part number GetSerialNumber SerialNumber Empty Retrieves the device serial number GetMACAddress MACAddress Empty Retrieves the device MAC address GetIPv4Settings IPv4Settings Empty Retrieves the device IPv4 settings (not implemented on Base) SetIPv4Settings Empty IPv4Settings Sets the device IPv4 settings (not implemented on Base) GetPartNumberRevision PartNumberRevision Empty Retrieves the device part number revision RebootRequest Empty RebootRqst Sends a request to the device to reboot SetSafetyEnable Empty SafetyEnable Enables (disable) the specified safety SetSafetyErrorThreshold Empty SafetyThreshold Sets the error threshold for the specified safety SetSafetyWarningThreshold Empty SafetyThreshold Sets the warning threshold for the specified safety SetSafetyConfiguration Empty SafetyConfiguration Configures the specified safety (i.e. sets error and warning thresholds) GetSafetyConfiguration SafetyConfiguration SafetyHandle Retrieves configuration about the specified safety GetSafetyInformation SafetyInformation SafetyHandle Retrieves information about the specified safety GetSafetyEnable SafetyEnable SafetyHandle Indicates if specified safety is enabled (or disabled) GetSafetyStatus SafetyStatus SafetyHandle Indicates if the specified safety is raised ClearAllSafetyStatus Empty Empty Clear all safety status for this device if they are no longer raised ClearSafetyStatus Empty SafetyHandle Clear a specific safety status if it is no longer raised GetAllSafetyConfiguration SafetyConfigurationList Empty Retrieves configuration on all safeties GetAllSafetyInformation SafetyInformationList Empty Retrieves information on all safeties ResetSafetyDefaults Empty Empty Restores all safety configurations to factory defaults OnNotificationSafetyTopic NotificationHandle NotificationOptions Subscribes to safety notifications ExecuteCalibration Empty Calibration Starts device calibration (intended for Kinova Production of Pico) GetCalibrationResult CalibrationResult CalibrationElement Retrieves the status/result of device calibration (intended for Kinova Production of Pico) StopCalibration CalibrationResult Calibration Stop calibration in progress SetCapSenseConfig Empty CapSenseConfig Sets the capacitive sensor calibration GetCapSenseConfig CapSenseConfig Empty Retrieves the capacitive sensor calibration ReadCapSenseRegister CapSenseRegister CapSenseRegister Reads low-level register from the capacitive sensor (for Kinova internal use ony, not to be used in the field) WriteCapSenseRegister Empty CapSenseRegister Writes to low-level register of the capacitive sensor (for Kinova internal use ony, not to be used in the field)"},{"location":"summary_pages/DeviceConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description BootloaderVersion Bootloader version for the device Calibration Calibration information to push to device CalibrationElement Calibration element CalibrationParameter Single calibration parameter information CalibrationResult Result of a calibration CapSenseConfig Capacitive sensor configuration message CapSenseRegister Message used to address a register DeviceType Device type FirmwareVersion Firmware version for the device IPv4Settings IPv4 settings for the device, including address, subnet mask, and default gateway MACAddress MAC address for the device ModelNumber Model number for the device PartNumber Part number for the device PartNumberRevision Part number revision for the device PowerOnSelfTestResult Result of power on self test RebootRqst Reboot request with bootloader delay RunMode Run mode SafetyConfiguration Configuration for a safety SafetyConfigurationList Array of safety configurations SafetyEnable Enable or disable a specific safety SafetyInformation Information about a specific safety SafetyInformationList Array of safety information SafetyStatus Safety status SafetyThreshold Configure threshold of a specific safety SerialNumber Serial number for the device <p>Enumerators </p> Enumerator Description CalibrationItem Admissible calibration items CalibrationStatus Admissible calibration status CapSenseMode Admissible capacitive sensor mode RunModes Options for the run mode for the device SafetyLimitType Types of safeties limits ServiceVersion Identifies DeviceConfig current version"},{"location":"summary_pages/DeviceManager/","title":"DeviceManager (Python)","text":"<p>This page describes the Python DeviceManager API.</p>"},{"location":"summary_pages/DeviceManager/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>This service provides information about which devices are present in the robot</p> <p>DeviceManagerClient RPCs </p> Function name Return type Input type Description ReadAllDevices DeviceHandles Empty Retrieves the list of every device that the system contains, along with its type and order within the system"},{"location":"summary_pages/DeviceManager/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description DeviceHandles Array of Device handles <p>Enumerators </p> Enumerator Description ServiceVersion Identifies DeviceManager service current version"},{"location":"summary_pages/GripperConfig/","title":"GripperConfig (Python)","text":"<p>This page describes the Python GripperConfig API.</p>"},{"location":"summary_pages/GripperConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p>"},{"location":"summary_pages/GripperConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Enumerators </p> Enumerator Description RobotiqGripperStatusFlags Status flags for Robotiq Adaptive Gripper SafetyIdentifier Gripper safety identifier"},{"location":"summary_pages/GripperCyclic/","title":"GripperCyclic (Python)","text":"<p>This page describes the Python GripperCyclic API.</p>"},{"location":"summary_pages/GripperCyclic/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to exchange cyclic data with gripper</p> <p>GripperCyclicClient RPCs </p> Function name Return type Input type Description Refresh Feedback Command Sends a command to the gripper and receives feedback about the actual status of the gripper RefreshCommand Empty Command Sends a command to the gripper without receiving feedback RefreshFeedback Feedback MessageId Obtains feedback from the gripper on its status RefreshCustomData CustomData MessageId Obtains custom data from the gripper"},{"location":"summary_pages/GripperCyclic/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description Command Command sent to a gripper CustomData Custom data from gripper and gripper motors CustomDataUnit Custom data Feedback Status feedback from a gripper MessageId Message identifier for command or feedback MotorCommand Command to a single gripper motor MotorFeedback Status feedback from a single gripper motor <p>Enumerators </p> Enumerator Description ServiceVersion"},{"location":"summary_pages/InterconnectConfig/","title":"InterconnectConfig (Python)","text":"<p>This page describes the Python InterconnectConfig API.</p>"},{"location":"summary_pages/InterconnectConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to get and set interface module (interconnect) configuration information, including user expansion</p> <p>InterconnectConfigClient RPCs </p> Function name Return type Input type Description GetUARTConfiguration UARTConfiguration UARTDeviceIdentification Retrieves user UART configuration SetUARTConfiguration Empty UARTConfiguration Configures user UART GetEthernetConfiguration EthernetConfiguration EthernetDeviceIdentification Retrieves user Ethernet configuration SetEthernetConfiguration Empty EthernetConfiguration Configures user Ethernet port GetGPIOConfiguration GPIOConfiguration GPIOIdentification Retrieves user GPIO configuration SetGPIOConfiguration Empty GPIOConfiguration Configures user GPIO GetGPIOState GPIOState GPIOIdentification Retrieves user GPIO state SetGPIOState Empty GPIOState Configures user GPIO state GetI2CConfiguration I2CConfiguration I2CDeviceIdentification Retrieves user I2C configuration SetI2CConfiguration Empty I2CConfiguration Configures user I2C I2CRead I2CData I2CReadParameter Performs an I2C read request I2CReadRegister I2CData I2CReadRegisterParameter Performs an I2C read register request I2CWrite Empty I2CWriteParameter Performs an I2C write request I2CWriteRegister Empty I2CWriteRegisterParameter Performs an I2C write register request"},{"location":"summary_pages/InterconnectConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description EthernetConfiguration Ethernet configuration information EthernetDeviceIdentification Ethernet device identification GPIOConfiguration GPIO configuration information GPIOIdentification GPIO identification GPIOState GPIO state I2CConfiguration I2C configuration information I2CData I2C data I2CDeviceIdentification I2C device identification I2CReadParameter I2C read request I2CReadRegisterParameter I2C read register request I2CWriteParameter I2C write request I2CWriteRegisterParameter I2C write register request <p>Enumerators </p> Enumerator Description EthernetDevice Admissible Ethernet device EthernetDuplex Admissible Ethernet duplex mode EthernetSpeed Admissible Ethernet speed GPIOIdentifier Admissible GPIO identifier GPIOMode Admissible GPIO mode GPIOPull Admissible GPIO pull mode GPIOValue Admissible GPIO value I2CDevice Admissible I2C device I2CDeviceAddressing I2C device addressing mode I2CMode I2C mode I2CRegisterAddressSize I2C register address size SafetyIdentifier Admissible interface module safeties ServiceVersion Identifies InterconnectConfig current version UARTPortId Admissible UART port"},{"location":"summary_pages/InterconnectCyclic/","title":"InterconnectCyclic (Python)","text":"<p>This page describes the Python InterconnectCyclic API.</p>"},{"location":"summary_pages/InterconnectCyclic/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to exchange cyclic data with interface module</p> <p>InterconnectCyclicClient RPCs </p> Function name Return type Input type Description Refresh Feedback Command Sends a command to the interface module and receive feedback about the actual status RefreshCommand Empty Command Sends a command to the interface module without receiving feedback RefreshFeedback Feedback MessageId Obtains feedback from the interface module on its status RefreshCustomData CustomData MessageId Obtains custom data from the interface module"},{"location":"summary_pages/InterconnectCyclic/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description Command Interface module command CustomData Custom development data, content varies according to debugging needs Feedback Defines the feedback provided by interface module MessageId Identifies a message <p>Enumerators </p> Enumerator Description ServiceVersion Identifies InterconnectCyclic service current version"},{"location":"summary_pages/ProductConfiguration/","title":"ProductConfiguration (Python)","text":"<p>This page describes the Python ProductConfiguration API.</p>"},{"location":"summary_pages/ProductConfiguration/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p>"},{"location":"summary_pages/ProductConfiguration/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description CompleteProductConfiguration Complete configuration for a given device ProductConfigurationEndEffectorType New end-effector installed on arm <p>Enumerators </p> Enumerator Description ArmLaterality Admissible arm laterality BaseType Admissible base types EndEffectorType Admissible end-effector modules InterfaceModuleType Admissible interface modules ModelId Admissible model identification VisionModuleType Admissible vision modules WristType Admissible wrist types"},{"location":"summary_pages/Session/","title":"Session (Python)","text":"<p>This page describes the Python Session API.</p>"},{"location":"summary_pages/Session/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to manage user sessions</p> <p>SessionClient RPCs </p> Function name Return type Input type Description CreateSession Empty CreateSessionInfo Creates a new session on the robot using given values for user name, session timeout value, and password CloseSession Empty Empty Closes an existing open session KeepAlive Empty Empty Sends message to robot to keep current session alive GetConnections ConnectionList Empty Retrieves the list of connections"},{"location":"summary_pages/Session/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description ConnectionList Array of connections CreateSessionInfo Parameters needed to create a new session <p>Enumerators </p> Enumerator Description ServiceVersion Identifies session service current version"},{"location":"summary_pages/VisionConfig/","title":"VisionConfig (Python)","text":"<p>This page describes the Python VisionConfig API.</p>"},{"location":"summary_pages/VisionConfig/#rpc-reference","title":"RPC reference","text":"<p>This section describes the existing RPCs used in this API.</p> <p>Service to configure the Vision Module</p> <p>VisionConfigClient RPCs </p> Function name Return type Input type Description SetSensorSettings Empty SensorSettings Sets sensor settings (resolution, frame rate, etc) GetSensorSettings SensorSettings SensorIdentifier Retrieves sensor settings (resolution, frame rate, etc) GetOptionValue OptionValue OptionIdentifier Retrieves option value from the sensor SetOptionValue Empty OptionValue Writes new value to sensor option GetOptionInformation OptionInformation OptionIdentifier Retrieves option information from the sensor OnNotificationVisionTopic NotificationHandle NotificationOptions Subscribes to Vision configuration notifications DoSensorFocusAction Empty SensorFocusAction Do a focus action GetIntrinsicParameters IntrinsicParameters SensorIdentifier Retrieves sensor intrinsic parameters GetIntrinsicParametersProfile IntrinsicParameters IntrinsicProfileIdentifier Retrieves sensor intrinsic parameters for a specific profile SetIntrinsicParameters Empty IntrinsicParameters Sets sensor intrinsic parameters GetExtrinsicParameters ExtrinsicParameters Empty Retrieves sensor extrinsic parameters SetExtrinsicParameters Empty ExtrinsicParameters Sets sensor extrinsic parameters"},{"location":"summary_pages/VisionConfig/#class-reference","title":"Class reference","text":"<p>This section describes the data classes used in this API.</p> <p>Messages </p> Class Description DistortionCoefficients Distortion coefficients for sensor intrinsic parameters ExtrinsicParameters Sensor extrinsic parameters FocusPoint Focus point in the X-Y coordinates of the image IntrinsicParameters Sensor intrinsic parameters IntrinsicProfileIdentifier Intrisic parameters profile to retrieve ManualFocus Abstract value that affects the focus distance OptionIdentifier Sensor and the option to configure OptionInformation Information about the optional settings for the chosen sensor OptionValue Value of the particular option for the sensor RotationMatrix Representation of a 3x3 rotation matrix. To be a valid rotation matrix, the rows must be orthonormal (the rows must each have norm of 1 and the row vectors must be orthogonal to each other). The determinant must also be +1. RotationMatrixRow Single row of a 3x3 rotation matrix. To be a valid possible row of a rotation matrix, the norm of the row must be 1 (the sum of the squares of the row elements has to equal 1). SensorFocusAction Focus action to perform for the specified sensor SensorIdentifier Sensor to configure SensorSettings Main sensor settings - resolution, frame rate, bit rate - for the chosen sensor (color or depth). TranslationVector Provides a 3x1 translation vector configuration VisionNotification Notification about a single vision module event <p>Enumerators </p> Enumerator Description BitRate Maximum encoded bit rate, in Mbps FocusAction Focus action to perform (start/pause continuous, focus now, disable). Supported only with Color sensor. FrameRate Sensor frame rate Option Admissible vision module sensor options. Note that some options are only available for the color sensor and some are only available for the depth sensor. Resolution Sensor resolution. Note that some settings are only for the color sensor and some are only for the depth sensor. Sensor Vision module sensor to configure ServiceVersion Identifies VisionConfig service current version VisionEvent Admissible Vision module events."}]}